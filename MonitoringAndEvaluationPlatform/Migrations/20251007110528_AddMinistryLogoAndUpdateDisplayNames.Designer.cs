// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringAndEvaluationPlatform.Data;

#nullable disable

namespace MonitoringAndEvaluationPlatform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251007110528_AddMinistryLogoAndUpdateDisplayNames")]
    partial class AddMinistryLogoAndUpdateDisplayNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunityProject", b =>
                {
                    b.Property<string>("CommunitiesCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("projectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("CommunitiesCode", "projectsProjectID");

                    b.HasIndex("projectsProjectID");

                    b.ToTable("ProjectCommunities", (string)null);
                });

            modelBuilder.Entity("DistrictProject", b =>
                {
                    b.Property<string>("DistrictsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("projectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("DistrictsCode", "projectsProjectID");

                    b.HasIndex("projectsProjectID");

                    b.ToTable("ProjectDistricts", (string)null);
                });

            modelBuilder.Entity("DonorProject", b =>
                {
                    b.Property<int>("DonorsCode")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("DonorsCode", "ProjectsProjectID");

                    b.HasIndex("ProjectsProjectID");

                    b.ToTable("DonorProject");
                });

            modelBuilder.Entity("GovernorateProject", b =>
                {
                    b.Property<string>("GovernoratesCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("projectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("GovernoratesCode", "projectsProjectID");

                    b.HasIndex("projectsProjectID");

                    b.ToTable("ProjectGovernorates", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MinistryProject", b =>
                {
                    b.Property<int>("MinistriesCode")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("MinistriesCode", "ProjectsProjectID");

                    b.HasIndex("ProjectsProjectID");

                    b.ToTable("ProjectMinistries", (string)null);
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ActionPlan", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("PlansCount")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ProjectID")
                        .IsUnique();

                    b.ToTable("ActionPlans");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Activity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("ActionPlanCode")
                        .HasColumnType("int");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("ActionPlanCode");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MinistryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Community", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AR_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrictCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("SubDistrictCode");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.District", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovernorateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code");

                    b.HasIndex("GovernorateCode");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Donor", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Partner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("donorCategory")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Framework", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Frameworks");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Goal", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Governorate", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Indicator", b =>
                {
                    b.Property<int>("IndicatorCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicatorCode"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("GAGRA")
                        .HasColumnType("float");

                    b.Property<double>("GAGRR")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("MethodOfComputation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubOutputCode")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<DateTime>("TargetYear")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("IndicatorCode");

                    b.HasIndex("SubOutputCode");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Measure", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndicatorCode")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("IndicatorCode");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Ministry", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinistryDisplayName_AR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinistryDisplayName_EN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinistryUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Ministries");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Outcome", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<int>("FrameworkCode")
                        .HasColumnType("int");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("FrameworkCode");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Output", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutcomeCode")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("OutcomeCode");

                    b.ToTable("Outputs");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Plan", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<int>("ActivityCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Planned")
                        .HasColumnType("int");

                    b.Property<int>("Realised")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ActivityCode");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EstimatedBudget")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<int>("Financial")
                        .HasColumnType("int");

                    b.Property<int?>("GoalCode")
                        .HasColumnType("int");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<bool>("IsEntireCountry")
                        .HasColumnType("bit");

                    b.Property<int?>("MinistryCode")
                        .HasColumnType("int");

                    b.Property<int>("Physical")
                        .HasColumnType("int");

                    b.Property<int>("ProjectManagerCode")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("RealBudget")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuperVisorCode")
                        .HasColumnType("int");

                    b.Property<double>("performance")
                        .HasColumnType("float");

                    b.HasKey("ProjectID");

                    b.HasIndex("GoalCode");

                    b.HasIndex("MinistryCode");

                    b.HasIndex("ProjectManagerCode");

                    b.HasIndex("SuperVisorCode");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectDonor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DonorCode")
                        .HasColumnType("int");

                    b.Property<decimal>("FundingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundingPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonorCode");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDonors");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectIndicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndicatorCode")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorCode");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectIndicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectManager", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SDGIndicator", b =>
                {
                    b.Property<int>("IndicatorCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicatorCode"));

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetCode")
                        .HasColumnType("int");

                    b.HasKey("IndicatorCode");

                    b.HasIndex("TargetCode");

                    b.ToTable("sDGIndicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Sector", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubDistrict", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("DistrictCode");

                    b.ToTable("SubDistricts");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubOutput", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutputCode")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("OutputCode");

                    b.ToTable("SubOutputs");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SuperVisor", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("SuperVisors");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Target", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DisbursementPerformance")
                        .HasColumnType("float");

                    b.Property<string>("EN_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FieldMonitoring")
                        .HasColumnType("float");

                    b.Property<int>("GoalCode")
                        .HasColumnType("int");

                    b.Property<double>("ImpactAssessment")
                        .HasColumnType("float");

                    b.Property<double>("IndicatorsPerformance")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.HasIndex("GoalCode");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("ProjectSector", b =>
                {
                    b.Property<int>("ProjectsProjectID")
                        .HasColumnType("int");

                    b.Property<int>("SectorsCode")
                        .HasColumnType("int");

                    b.HasKey("ProjectsProjectID", "SectorsCode");

                    b.HasIndex("SectorsCode");

                    b.ToTable("ProjectSectors", (string)null);
                });

            modelBuilder.Entity("ProjectSubDistrict", b =>
                {
                    b.Property<string>("SubDistrictsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("projectsProjectID")
                        .HasColumnType("int");

                    b.HasKey("SubDistrictsCode", "projectsProjectID");

                    b.HasIndex("projectsProjectID");

                    b.ToTable("ProjectSubDistricts", (string)null);
                });

            modelBuilder.Entity("CommunityProject", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Community", null)
                        .WithMany()
                        .HasForeignKey("CommunitiesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DistrictProject", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DonorProject", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Donor", null)
                        .WithMany()
                        .HasForeignKey("DonorsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GovernorateProject", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Governorate", null)
                        .WithMany()
                        .HasForeignKey("GovernoratesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MinistryProject", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Ministry", null)
                        .WithMany()
                        .HasForeignKey("MinistriesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ActionPlan", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", "Project")
                        .WithOne("ActionPlan")
                        .HasForeignKey("MonitoringAndEvaluationPlatform.Models.ActionPlan", "ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Activity", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ActionPlan", "ActionPlan")
                        .WithMany("Activities")
                        .HasForeignKey("ActionPlanCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Community", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.SubDistrict", "SubDistrict")
                        .WithMany("Communities")
                        .HasForeignKey("SubDistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDistrict");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.District", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Governorate", "Governorate")
                        .WithMany("Districts")
                        .HasForeignKey("GovernorateCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Indicator", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.SubOutput", "SubOutput")
                        .WithMany("Indicators")
                        .HasForeignKey("SubOutputCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubOutput");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Measure", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Indicator", "Indicator")
                        .WithMany("Measures")
                        .HasForeignKey("IndicatorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Outcome", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Framework", "Framework")
                        .WithMany("Outcomes")
                        .HasForeignKey("FrameworkCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Output", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Outcome", "Outcome")
                        .WithMany("Outputs")
                        .HasForeignKey("OutcomeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outcome");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Plan", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Activity", "Activity")
                        .WithMany("Plans")
                        .HasForeignKey("ActivityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Project", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalCode");

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Ministry", "Ministry")
                        .WithMany()
                        .HasForeignKey("MinistryCode");

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.ProjectManager", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.SuperVisor", "SuperVisor")
                        .WithMany()
                        .HasForeignKey("SuperVisorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Ministry");

                    b.Navigation("ProjectManager");

                    b.Navigation("SuperVisor");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectDonor", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Donor", "Donor")
                        .WithMany("ProjectDonors")
                        .HasForeignKey("DonorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", "Project")
                        .WithMany("ProjectDonors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectFile", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ProjectIndicator", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Indicator", "Indicator")
                        .WithMany("ProjectIndicators")
                        .HasForeignKey("IndicatorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", "Project")
                        .WithMany("ProjectIndicators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SDGIndicator", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Target", "Target")
                        .WithMany("SDGsIndicators")
                        .HasForeignKey("TargetCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubDistrict", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.District", "District")
                        .WithMany("SubDistricts")
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubOutput", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Output", "Output")
                        .WithMany("SubOutputs")
                        .HasForeignKey("OutputCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Output");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Target", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Goal", "Goal")
                        .WithMany("Targets")
                        .HasForeignKey("GoalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("ProjectSector", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Sector", null)
                        .WithMany()
                        .HasForeignKey("SectorsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectSubDistrict", b =>
                {
                    b.HasOne("MonitoringAndEvaluationPlatform.Models.SubDistrict", null)
                        .WithMany()
                        .HasForeignKey("SubDistrictsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringAndEvaluationPlatform.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.ActionPlan", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Activity", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.District", b =>
                {
                    b.Navigation("SubDistricts");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Donor", b =>
                {
                    b.Navigation("ProjectDonors");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Framework", b =>
                {
                    b.Navigation("Outcomes");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Goal", b =>
                {
                    b.Navigation("Targets");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Governorate", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Indicator", b =>
                {
                    b.Navigation("Measures");

                    b.Navigation("ProjectIndicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Outcome", b =>
                {
                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Output", b =>
                {
                    b.Navigation("SubOutputs");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Project", b =>
                {
                    b.Navigation("ActionPlan")
                        .IsRequired();

                    b.Navigation("ProjectDonors");

                    b.Navigation("ProjectFiles");

                    b.Navigation("ProjectIndicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubDistrict", b =>
                {
                    b.Navigation("Communities");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.SubOutput", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("MonitoringAndEvaluationPlatform.Models.Target", b =>
                {
                    b.Navigation("SDGsIndicators");
                });
#pragma warning restore 612, 618
        }
    }
}
