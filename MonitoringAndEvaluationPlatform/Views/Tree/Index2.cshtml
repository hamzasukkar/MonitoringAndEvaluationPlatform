@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Localization
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization

@{
    ViewData["Title"] = "Framework Hierarchy Tree";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.Name;
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="dashboard-title">
                <i class="fas fa-sitemap me-3"></i>
                @Localizer["Framework Hierarchy Tree"]
            </h1>
            <p class="dashboard-subtitle">
                @Localizer["Visual representation of the complete framework hierarchy with performance metrics"]
            </p>
        </div>
        <div class="tree-controls">
            <button class="btn btn-outline-primary btn-sm me-2" id="expandAll">
                <i class="fas fa-expand-arrows-alt me-1"></i>
                @Localizer["Expand All"]
            </button>
            <button class="btn btn-outline-primary btn-sm me-2" id="collapseAll">
                <i class="fas fa-compress-arrows-alt me-1"></i>
                @Localizer["Collapse All"]
            </button>
            <button class="btn btn-outline-success btn-sm" id="exportChart">
                <i class="fas fa-download me-1"></i>
                @Localizer["Export"]
            </button>
        </div>
    </div>
</div>

<!-- Legend Card -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-info-circle me-2"></i>
            @Localizer["Hierarchy Legend"]
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-2 col-sm-6 mb-2">
                <div class="legend-item">
                    <div class="legend-color framework-color"></div>
                    <span>@Localizer["Framework"]</span>
                </div>
            </div>
            <div class="col-md-2 col-sm-6 mb-2">
                <div class="legend-item">
                    <div class="legend-color outcome-color"></div>
                    <span>@Localizer["Outcome"]</span>
                </div>
            </div>
            <div class="col-md-2 col-sm-6 mb-2">
                <div class="legend-item">
                    <div class="legend-color output-color"></div>
                    <span>@Localizer["Output"]</span>
                </div>
            </div>
            <div class="col-md-2 col-sm-6 mb-2">
                <div class="legend-item">
                    <div class="legend-color suboutput-color"></div>
                    <span>@Localizer["Sub-Output"]</span>
                </div>
            </div>
            <div class="col-md-2 col-sm-6 mb-2">
                <div class="legend-item">
                    <div class="legend-color indicator-color"></div>
                    <span>@Localizer["Indicator"]</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Tree Container Card -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-tree me-2"></i>
            @Localizer["Organizational Chart View"]
        </h5>
    </div>
    <div class="card-body p-0">
        <div id="treeContainer" class="tree-visualization">
            <div class="loading-container">
                <div class="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">@Localizer["Loading..."]</span>
                    </div>
                </div>
                <p class="mt-3 text-muted">@Localizer["Loading framework hierarchy..."]</p>
            </div>
        </div>
    </div>
</div>

<style>
    /* Dashboard Header Styling */
    .dashboard-header {
        margin-bottom: 2rem;
        padding: 1.5rem 0;
        border-bottom: 2px solid var(--border-color);
    }

    .dashboard-title {
        color: var(--accent-gold-color);
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .dashboard-subtitle {
        color: var(--text-light-color);
        font-size: 1.1rem;
        margin-bottom: 0;
        opacity: 0.8;
    }

    /* Tree Controls */
    .tree-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Legend Styling */
    .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: var(--text-light-color);
    }

    .legend-color {
        width: 16px;
        height: 16px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .framework-color { background-color: #6f42c1; }
    .outcome-color { background-color: #dc3545; }
    .output-color { background-color: #007bff; }
    .suboutput-color { background-color: #28a745; }
    .indicator-color { background-color: #fd7e14; }

    /* Tree Visualization Container */
    .tree-visualization {
        min-height: 600px;
        background-color: var(--secondary-card-background);
        position: relative;
        overflow-x: auto;
        padding: 2rem;
    }

    /* Loading State */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 400px;
        color: var(--text-light-color);
    }

    .loading-spinner .spinner-border {
        width: 3rem;
        height: 3rem;
        color: var(--accent-gold-color);
    }

    /* Tree Node Styling */
    .org-chart {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: max-content;
        padding: 2rem 0;
    }

    .node-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 15px 10px;
        position: relative;
    }

    .tree-node {
        background: var(--secondary-card-background);
        border: 2px solid var(--border-color);
        border-radius: 12px;
        padding: 1rem 1.25rem;
        margin: 0.5rem;
        min-width: 220px;
        max-width: 320px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        position: relative;
    }

    .tree-node:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
        border-color: var(--accent-gold-color);
    }

    /* Node Type Colors */
    .tree-node.framework {
        border-left: 4px solid #6f42c1;
        background: linear-gradient(135deg, rgba(111, 66, 193, 0.1) 0%, var(--secondary-card-background) 100%);
    }

    .tree-node.outcome {
        border-left: 4px solid #dc3545;
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.1) 0%, var(--secondary-card-background) 100%);
    }

    .tree-node.output {
        border-left: 4px solid #007bff;
        background: linear-gradient(135deg, rgba(0, 123, 255, 0.1) 0%, var(--secondary-card-background) 100%);
    }

    .tree-node.suboutput {
        border-left: 4px solid #28a745;
        background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, var(--secondary-card-background) 100%);
    }

    .tree-node.indicator {
        border-left: 4px solid #fd7e14;
        background: linear-gradient(135deg, rgba(253, 126, 20, 0.1) 0%, var(--secondary-card-background) 100%);
    }

    /* Node Content */
    .node-title {
        font-weight: 600;
        color: var(--accent-gold-color);
        font-size: 1rem;
        margin-bottom: 0.5rem;
        line-height: 1.3;
    }

    .node-type {
        background: rgba(200, 168, 95, 0.15);
        color: var(--accent-gold-color);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.75rem;
        display: inline-block;
    }

    .node-metrics {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .performance-badge {
        background: var(--success-color);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.8rem;
        flex: 1;
    }

    .weight-badge {
        background: rgba(200, 168, 95, 0.2);
        color: var(--accent-gold-color);
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
        flex: 1;
    }

    /* Expand/Collapse Icon */
    .expand-icon {
        position: absolute;
        top: 8px;
        right: 8px;
        width: 24px;
        height: 24px;
        background: var(--accent-gold-color);
        color: var(--primary-background-color);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    }

    .expand-icon:hover {
        background: var(--hover-gold-color);
        transform: scale(1.1);
    }

    .expand-icon.collapsed::before {
        content: '+';
    }

    .expand-icon.expanded::before {
        content: '−';
    }

    /* Children Container */
    .children-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;
        margin-top: 25px;
        position: relative;
    }

    .children-container.collapsed {
        display: none;
    }

    /* Connecting Lines */
    .node-container::before {
        content: '';
        position: absolute;
        top: -25px;
        left: 50%;
        transform: translateX(-50%);
        width: 2px;
        height: 25px;
        background: var(--border-color);
        opacity: 0.6;
    }

    .org-chart > .node-container:first-child::before {
        display: none;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .dashboard-header .d-flex {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }

        .tree-controls {
            justify-content: center;
            flex-wrap: wrap;
        }

        .tree-node {
            min-width: 180px;
            max-width: 280px;
            padding: 0.75rem 1rem;
        }

        .dashboard-title {
            font-size: 1.5rem;
        }

        .tree-visualization {
            padding: 1rem;
        }

        .node-metrics {
            flex-direction: column;
            gap: 0.25rem;
        }

        .performance-badge,
        .weight-badge {
            text-align: center;
            width: 100%;
        }
    }

    @@media (max-width: 480px) {
        .tree-controls {
            flex-direction: column;
            width: 100%;
        }

        .tree-controls .btn {
            width: 100%;
            margin: 0.25rem 0;
        }

        .legend-item {
            justify-content: center;
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const frameworkCode = @ViewData["FrameworkCode"];
    const expandAllBtn = document.getElementById('expandAll');
    const collapseAllBtn = document.getElementById('collapseAll');
    const exportBtn = document.getElementById('exportChart');

    loadHierarchyData();

    function loadHierarchyData() {
        fetch(`/Tree/GetFrameworkHierarchy/${frameworkCode}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                const hierarchyStructure = buildHierarchy(data);
                renderOrganizationalChart(hierarchyStructure);
                hideLoadingSpinner();
            })
            .catch(error => {
                console.error('Error fetching hierarchy data:', error);
                showErrorMessage();
            });
    }

    function buildHierarchy(flatData) {
        const nodeMap = {};
        const rootNodes = [];

        // First pass: create all nodes
        flatData.forEach(item => {
            nodeMap[item.id] = { ...item, children: [] };
        });

        // Second pass: build hierarchy
        flatData.forEach(item => {
            if (item.pid && nodeMap[item.pid]) {
                nodeMap[item.pid].children.push(nodeMap[item.id]);
            } else {
                rootNodes.push(nodeMap[item.id]);
            }
        });

        return rootNodes;
    }

    function renderOrganizationalChart(nodes) {
        const container = document.getElementById('treeContainer');
        const orgChart = document.createElement('div');
        orgChart.className = 'org-chart';

        nodes.forEach(node => {
            orgChart.appendChild(createNodeElement(node));
        });

        container.innerHTML = '';
        container.appendChild(orgChart);
        attachEventListeners();
    }

    function createNodeElement(node) {
        const nodeContainer = document.createElement('div');
        nodeContainer.className = 'node-container';
        nodeContainer.dataset.nodeId = node.id;

        const nodeDiv = document.createElement('div');
        nodeDiv.className = `tree-node ${node.type.toLowerCase()}`;

        const hasChildren = node.children && node.children.length > 0;

        nodeDiv.innerHTML = `
            <div class="node-title">${node.name}</div>
            <div class="node-type">${node.type}</div>
            <div class="node-metrics">
                <div class="performance-badge">${node.indicatorsPerformance}</div>
                <div class="weight-badge">Weight: ${node.weight}</div>
            </div>
            ${hasChildren ? '<div class="expand-icon collapsed"></div>' : ''}
        `;

        nodeContainer.appendChild(nodeDiv);

        if (hasChildren) {
            const childrenContainer = document.createElement('div');
            childrenContainer.className = 'children-container collapsed';

            node.children.forEach(child => {
                childrenContainer.appendChild(createNodeElement(child));
            });

            nodeContainer.appendChild(childrenContainer);
        }

        return nodeContainer;
    }

    function attachEventListeners() {
        // Toggle node expansion
        document.querySelectorAll('.expand-icon').forEach(icon => {
            icon.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleNodeExpansion(this);
            });
        });

        // Control buttons
        expandAllBtn.addEventListener('click', expandAllNodes);
        collapseAllBtn.addEventListener('click', collapseAllNodes);
        exportBtn.addEventListener('click', exportChart);
    }

    function toggleNodeExpansion(icon) {
        const nodeContainer = icon.closest('.node-container');
        const childrenContainer = nodeContainer.querySelector('.children-container');

        if (!childrenContainer) return;

        const isCollapsed = icon.classList.contains('collapsed');

        if (isCollapsed) {
            childrenContainer.classList.remove('collapsed');
            icon.classList.remove('collapsed');
            icon.classList.add('expanded');
        } else {
            childrenContainer.classList.add('collapsed');
            icon.classList.remove('expanded');
            icon.classList.add('collapsed');
        }
    }

    function expandAllNodes() {
        document.querySelectorAll('.children-container').forEach(container => {
            container.classList.remove('collapsed');
        });
        document.querySelectorAll('.expand-icon').forEach(icon => {
            icon.classList.remove('collapsed');
            icon.classList.add('expanded');
        });
    }

    function collapseAllNodes() {
        document.querySelectorAll('.children-container').forEach(container => {
            container.classList.add('collapsed');
        });
        document.querySelectorAll('.expand-icon').forEach(icon => {
            icon.classList.remove('expanded');
            icon.classList.add('collapsed');
        });
    }

    function exportChart() {
        // Simple export functionality - opens print dialog
        const chartContainer = document.querySelector('.org-chart');
        if (chartContainer) {
            window.print();
        }
    }

    function hideLoadingSpinner() {
        const loadingContainer = document.querySelector('.loading-container');
        if (loadingContainer) {
            loadingContainer.style.display = 'none';
        }
    }

    function showErrorMessage() {
        const container = document.getElementById('treeContainer');
        container.innerHTML = `
            <div class="loading-container">
                <div class="text-danger">
                    <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                    <p>Error loading framework hierarchy data.</p>
                    <button class="btn btn-outline-primary" onclick="location.reload()">
                        <i class="fas fa-refresh me-1"></i>
                        Try Again
                    </button>
                </div>
            </div>
        `;
    }
});
</script>
