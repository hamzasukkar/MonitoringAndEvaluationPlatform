@model IEnumerable<MonitoringAndEvaluationPlatform.Models.Donor>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization

@{
	ViewData["Title"] = "Donors";
	Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="page-title-section">
            <div class="page-breadcrumb">
                <a href="@Url.Action("Index", "Home")" class="breadcrumb-link">
                    <i class="fas fa-home"></i>
                    @Localizer["Home"]
                </a>
                <i class="fas fa-chevron-right breadcrumb-separator"></i>
                <span class="current-page">@Localizer["Donors"]</span>
            </div>
            <h1 class="page-title">@Localizer["Donor Management"]</h1>
            <p class="page-description">Manage funding partners and track their performance</p>
        </div>
    </div>
</div>

@await Html.PartialAsync("_ManagementNavigation")

<!-- Quick Add Section -->
<div class="quick-add-section">
    <div class="quick-add-card">
        <div class="quick-add-header">
            <div class="quick-add-icon">
                <i class="fas fa-plus-circle"></i>
            </div>
            <div>
                <h3 class="quick-add-title">@Localizer["Add New Donor"]</h3>
                <p class="quick-add-subtitle">Create a new funding partner entry</p>
            </div>
        </div>
        <form id="createDonorForm" class="quick-add-form">
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="form-group">
                    <label for="Partner" class="form-label">
                        <i class="fas fa-handshake me-1"></i>@Localizer["Partner Name"]
                    </label>
                    <input type="text" name="Partner" class="modern-input" required placeholder="Enter partner name" />
                </div>
                <div class="form-group">
                    <label for="donorCategory" class="form-label">
                        <i class="fas fa-tags me-1"></i>@Localizer["Donor Category"]
                    </label>
                    <select name="donorCategory" class="modern-select" required>
                        <option value="">@Localizer["Select Category"]</option>
                        <option value="1">@Localizer["UN Organizations"]</option>
                        <option value="2">@Localizer["Countries"]</option>
                        <option value="3">@Localizer["International NGOs"]</option>
                        <option value="4">@Localizer["Local"]</option>
                    </select>
                </div>
                <div class="form-group action-group">
                    <button type="submit" class="modern-btn primary">
                        <i class="fas fa-plus-circle me-2"></i>@Localizer["Create Donor"]
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Donors List Section -->
<div class="admin-list-section">
    <div class="admin-card">
        <div class="admin-header">
            <div class="header-title">
                <i class="fas fa-users"></i>
                <span>@Localizer["Donors List"]</span>
            </div>
            @if (Model.Any())
            {
                <div class="header-badge">
                    <span class="count-badge">@Model.Count()</span>
                </div>
            }
        </div>

        <div class="admin-content">
            @if (Model.Any())
            {
                <div class="admin-table-container">
                    <table class="modern-admin-table">
                        <thead>
                            <tr>
                                <th><i class="fas fa-handshake me-1"></i>@Localizer["Partner Name"]</th>
                                <th><i class="fas fa-tags me-1"></i>@Localizer["Category"]</th>
                                <th><i class="fas fa-chart-line me-1"></i>@Localizer["Indicators Performance"]</th>
                                <th><i class="fas fa-dollar-sign me-1"></i>@Localizer["Disbursement Performance"]</th>
                                <th><i class="fas fa-cogs me-1"></i>@Localizer["Actions"]</th>
                            </tr>
                        </thead>
                        <tbody id="donorsTableBody">
                            @foreach (var item in Model)
                            {
                                string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                                string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                                double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                                <tr id="donor-row-@item.Code" class="admin-table-row">
                                    <td class="name-cell">
                                        <div class="cell-content">
                                            <div class="name-display">
                                                <span id="donor-partner-@item.Code" class="donor-partner-view name-text">
                                                    @item.Partner
                                                </span>
                                                <input type="text" id="donor-partner-input-@item.Code" class="modern-input-sm donor-partner-edit d-none" value="@item.Partner" />
                                            </div>
                                        </div>
                                    </td>
                                    <td class="category-cell">
                                        <span id="donor-category-@item.Code" class="donor-category-view category-badge">
                                            @item.donorCategory.ToString()
                                        </span>
                                        <select id="donor-category-select-@item.Code" class="modern-select-sm donor-category-edit d-none">
                                            @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.UNOrganizations)
                                            {
                                                <option value="1" selected>@Localizer["UN Organizations"]</option>
                                            }
                                            else
                                            {
                                                <option value="1">@Localizer["UN Organizations"]</option>
                                            }
                                            @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.Countries)
                                            {
                                                <option value="2" selected>@Localizer["Countries"]</option>
                                            }
                                            else
                                            {
                                                <option value="2">@Localizer["Countries"]</option>
                                            }
                                            @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.InternationalNonGovernmentalOrganizations)
                                            {
                                                <option value="3" selected>@Localizer["International NGOs"]</option>
                                            }
                                            else
                                            {
                                                <option value="3">@Localizer["International NGOs"]</option>
                                            }
                                            @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.Local)
                                            {
                                                <option value="4" selected>@Localizer["Local"]</option>
                                            }
                                            else
                                            {
                                                <option value="4">@Localizer["Local"]</option>
                                            }
                                        </select>
                                    </td>
                                    <td class="performance-cell">
                                        <div class="modern-progress-bar">
                                            <div class="progress-track">
                                                <div class="progress-fill @indicatorsClass.ToLower()" style="width: @IndicatorsPerformance%"></div>
                                            </div>
                                            <span class="progress-text">@IndicatorsPerformance%</span>
                                        </div>
                                    </td>
                                    <td class="performance-cell">
                                        <div class="modern-progress-bar">
                                            <div class="progress-track">
                                                <div class="progress-fill @disbursementClass.ToLower()" style="width: @item.DisbursementPerformance%"></div>
                                            </div>
                                            <span class="progress-text">@Math.Round(item.DisbursementPerformance, 0)%</span>
                                        </div>
                                    </td>
                                    <td class="actions-cell">
                                        <div class="action-buttons">
                                            <button class="action-btn edit"
                                                    id="edit-btn-@item.Code"
                                                    onclick="toggleDonorEdit(@item.Code)" title="@Localizer["Edit"]">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="action-btn delete" title="@Localizer["Delete"]"
                                                    onclick="deleteDonor(@item.Code)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <h3 class="empty-state-title">@Localizer["No Donors Found"]</h3>
                    <p class="empty-state-text">
                        @Localizer["No donors have been added yet. Use the form above to add your first donor."]
                    </p>
                </div>
            }
        </div>
    </div>
</div>

<style>
/* Modern Administrative Views Styling */

/* Quick Add Section */
.quick-add-section {
    margin-bottom: 2rem;
}

.quick-add-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.quick-add-header {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
}

.quick-add-icon {
    width: 50px;
    height: 50px;
    border-radius: 15px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    color: #fff;
    font-size: 1.25rem;
}

.quick-add-title {
    color: #fff;
    margin: 0 0 0.25rem 0;
    font-size: 1.25rem;
    font-weight: 600;
}

.quick-add-subtitle {
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
    font-size: 0.9rem;
}

.quick-add-form {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 1.5rem;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr auto;
    gap: 1.5rem;
    align-items: end;
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-label {
    color: rgba(255, 255, 255, 0.9);
    font-weight: 500;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
}

.modern-input,
.modern-select {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    padding: 0.75rem 1rem;
    color: #fff;
    font-size: 0.95rem;
    transition: all 0.3s ease;
}

.modern-input:focus,
.modern-select:focus {
    outline: none;
    border-color: #667eea;
    background: rgba(255, 255, 255, 0.15);
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
}

.modern-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.modern-select option {
    background: #2d3748;
    color: #fff;
}

.modern-btn {
    border: none;
    border-radius: 10px;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    font-size: 0.95rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    min-width: 140px;
}

.modern-btn.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #fff;
}

.modern-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}

/* Admin List Section */
.admin-list-section {
    margin: 2rem 0;
}

.admin-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
}

.admin-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1.5rem 2rem;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.header-title {
    display: flex;
    align-items: center;
    font-size: 1.25rem;
    font-weight: 600;
}

.header-title i {
    margin-right: 0.75rem;
    font-size: 1.1rem;
}

.count-badge {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.375rem 0.75rem;
    border-radius: 15px;
    font-size: 0.85rem;
    font-weight: 500;
}

.admin-content {
    padding: 0;
}

.admin-table-container {
    overflow-x: auto;
}

.modern-admin-table {
    width: 100%;
    border-collapse: collapse;
    background: transparent;
}

.modern-admin-table thead {
    background: rgba(255, 255, 255, 0.1);
}

.modern-admin-table th {
    padding: 1.2rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.9);
    text-transform: uppercase;
    font-size: 0.85rem;
    letter-spacing: 0.5px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    text-align: left;
}

.modern-admin-table td {
    padding: 1rem 1.2rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
    transition: all 0.3s ease;
}

.admin-table-row:hover {
    background: rgba(255, 255, 255, 0.05);
}

.name-cell {
    font-weight: 500;
    min-width: 200px;
}

.name-text {
    color: #fff;
    font-weight: 600;
}

.category-badge {
    background: rgba(102, 126, 234, 0.2);
    color: #667eea;
    padding: 0.375rem 0.75rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
}

.modern-input-sm,
.modern-select-sm {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 0.5rem 0.75rem;
    color: #fff;
    font-size: 0.9rem;
    width: 100%;
}

.modern-input-sm:focus,
.modern-select-sm:focus {
    outline: none;
    border-color: #667eea;
    background: rgba(255, 255, 255, 0.15);
}

.performance-cell {
    min-width: 150px;
}

.modern-progress-bar {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.progress-track {
    flex: 1;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    overflow: hidden;
    position: relative;
}

.progress-fill {
    height: 100%;
    border-radius: 10px;
    transition: width 0.3s ease;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.progress-fill.bg-success {
    background: linear-gradient(90deg, #28a745, #20c997);
}

.progress-fill.bg-warning {
    background: linear-gradient(90deg, #ffc107, #fd7e14);
}

.progress-fill.bg-danger {
    background: linear-gradient(90deg, #dc3545, #e91e63);
}

.progress-text {
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.85rem;
    font-weight: 500;
    min-width: 35px;
}

.actions-cell {
    text-align: right;
    width: 120px;
}

.action-buttons {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

.action-btn {
    width: 36px;
    height: 36px;
    border: none;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
}

.action-btn.edit {
    background: rgba(255, 193, 7, 0.2);
    color: #ffc107;
}

.action-btn.delete {
    background: rgba(220, 53, 69, 0.2);
    color: #dc3545;
}

.action-btn:hover {
    transform: scale(1.1);
    opacity: 0.8;
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 3rem;
}

.empty-state-icon {
    font-size: 4rem;
    color: rgba(255, 255, 255, 0.3);
    margin-bottom: 1.5rem;
}

.empty-state-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 1rem;
}

.empty-state-text {
    color: rgba(255, 255, 255, 0.6);
    font-size: 1rem;
    max-width: 400px;
    margin: 0 auto;
    line-height: 1.6;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .modern-admin-table {
        font-size: 0.85rem;
    }

    .modern-admin-table th,
    .modern-admin-table td {
        padding: 0.75rem 0.5rem;
    }

    .action-buttons {
        flex-direction: column;
        gap: 0.25rem;
    }
}
</style>


<script>
    $(document).ready(function() {

        // Create Donor Form Submission
        $('#createDonorForm').on('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);

            $.ajax({
                url: '@Url.Action("CreateInline")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        // Add new row to table
                        const newRow = `
                            <tr id="donor-row-${response.donor.code}">
                                <td>
                                    <span id="donor-partner-${response.donor.code}" class="donor-partner-view">
                                        ${response.donor.partner}
                                    </span>
                                    <input type="text" id="donor-partner-input-${response.donor.code}" class="form-control form-control-sm donor-partner-edit d-none" value="${response.donor.partner}" />
                                </td>
                                <td>
                                    <span id="donor-category-${response.donor.code}" class="donor-category-view">
                                        ${response.donor.donorCategory}
                                    </span>
                                    <select id="donor-category-select-${response.donor.code}" class="form-select form-select-sm donor-category-edit d-none">
                                        <option value="1">@Localizer["UN Organizations"]</option>
                                        <option value="2">@Localizer["Countries"]</option>
                                        <option value="3">@Localizer["International NGOs"]</option>
                                        <option value="4">@Localizer["Local"]</option>
                                    </select>
                                </td>
                                <td title="Indicators Performance: 0%">
                                    <div class="progress" style="height: 24px; border-radius: 4px;">
                                        <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                                    </div>
                                </td>
                                <td title="Disbursement Performance: 0%">
                                    <div class="progress" style="height: 24px; border-radius: 4px;">
                                        <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                                    </div>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-warning" id="edit-btn-${response.donor.code}" onclick="toggleDonorEdit(${response.donor.code})" title="@Localizer["Edit"]">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" title="@Localizer["Delete"]" onclick="deleteDonor(${response.donor.code})">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>`;

                        $('#donorsTableBody').append(newRow);
                        $('#createDonorForm')[0].reset();

                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Success!"]',
                            text: '@Localizer["Donor created successfully"]',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', '@Localizer["An error occurred while creating the donor"]', 'error');
                }
            });
        });

        // Inline Editing for text fields
        $(document).on('click', '.editable-field', function() {
            if ($(this).hasClass('editing')) return;

            const $this = $(this);
            const originalValue = $this.text().trim();
            const field = $this.data('field');
            const id = $this.data('id');

            $this.addClass('editing');
            $this.html(`<input type="text" class="edit-input" value="${originalValue}" data-original="${originalValue}">`);

            const $input = $this.find('.edit-input');
            $input.focus().select();

            // Save on Enter or blur
            $input.on('blur keypress', function(e) {
                if (e.type === 'keypress' && e.which !== 13) return;

                const newValue = $(this).val().trim();
                const originalValue = $(this).data('original');

                if (newValue === originalValue) {
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                if (newValue === '') {
                    Swal.fire('Error', '@Localizer["Value cannot be empty"]', 'error');
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                // Save changes
                $.ajax({
                    url: '@Url.Action("InlineEdit")',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            $this.removeClass('editing').text(newValue);
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Updated!"]',
                                text: '@Localizer["Field updated successfully"]',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            $this.removeClass('editing').text(originalValue);
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        $this.removeClass('editing').text(originalValue);
                        Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                    }
                });
            });

            // Cancel on Escape
            $input.on('keypress', function(e) {
                if (e.which === 27) { // Escape key
                    $this.removeClass('editing').text(originalValue);
                }
            });
        });

        // Inline Editing for select fields
        $(document).on('click', '.editable-field-select', function() {
            if ($(this).hasClass('editing')) return;

            const $this = $(this);
            const originalValue = $this.text().trim();
            const originalNumericValue = $this.data('value');
            const field = $this.data('field');
            const id = $this.data('id');

            const selectOptions = `
                <option value="1" ${originalNumericValue === 1 ? 'selected' : ''}>@Localizer["UN Organizations"]</option>
                <option value="2" ${originalNumericValue === 2 ? 'selected' : ''}>@Localizer["Countries"]</option>
                <option value="3" ${originalNumericValue === 3 ? 'selected' : ''}>@Localizer["International NGOs"]</option>
                <option value="4" ${originalNumericValue === 4 ? 'selected' : ''}>@Localizer["Local"]</option>
            `;

            $this.addClass('editing');
            $this.html(`<select class="edit-select" data-original-text="${originalValue}" data-original-value="${originalNumericValue}">${selectOptions}</select>`);

            const $select = $this.find('.edit-select');
            $select.focus();

            // Save on change or blur
            $select.on('blur change', function(e) {
                const newValue = $(this).val();
                const newText = $(this).find('option:selected').text();
                const originalValue = $(this).data('original-value');
                const originalText = $(this).data('original-text');

                if (newValue == originalValue) {
                    $this.removeClass('editing').text(originalText);
                    return;
                }

                // Save changes
                $.ajax({
                    url: '@Url.Action("InlineEdit")',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            $this.removeClass('editing').text(newText).data('value', parseInt(newValue));
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Updated!"]',
                                text: '@Localizer["Category updated successfully"]',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            $this.removeClass('editing').text(originalText);
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        $this.removeClass('editing').text(originalText);
                        Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                    }
                });
            });
        });

    }); // End document ready

    // Delete Donor - Global function
    function deleteDonor(id) {
        console.log('Delete donor called with id:', id);
        Swal.fire({
            title: '@Localizer["Are you sure?"]',
            text: "@Localizer["You won't be able to revert this!"]",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '@Localizer["Yes, delete it!"]',
            cancelButtonText: '@Localizer["Cancel"]'
        }).then((result) => {
            console.log('SweetAlert result:', result);
            if (result.isConfirmed) {
                console.log('Sending delete request for id:', id);
                $.ajax({
                    url: '@Url.Action("InlineDelete")',
                    type: 'POST',
                    data: { id: id },
                    success: function(response) {
                        console.log('Delete response:', response);
                        if (response.success) {
                            $(`#donor-row-${id}`).fadeOut(function() {
                                $(this).remove();
                            });
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Deleted!"]',
                                text: '@Localizer["Donor has been deleted."]',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire('Error', response.message || 'Unknown error', 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Delete error:', xhr, status, error);
                        Swal.fire('Error', '@Localizer["An error occurred while deleting"]', 'error');
                    }
                });
            }
        });
    }

    // Toggle Donor Inline Edit - Global function
    function toggleDonorEdit(code) {
        const partnerSpan = $(`#donor-partner-${code}`);
        const partnerInput = $(`#donor-partner-input-${code}`);
        const categorySpan = $(`#donor-category-${code}`);
        const categorySelect = $(`#donor-category-select-${code}`);
        const button = $(`#edit-btn-${code}`);

        const isEditing = partnerInput.hasClass('d-none') === false;

        if (isEditing) {
            // Save via AJAX
            const newPartner = partnerInput.val();
            const newCategory = categorySelect.val();
            const categoryText = categorySelect.find('option:selected').text();

            $.ajax({
                url: '@Url.Action("QuickUpdate")',
                type: 'POST',
                data: {
                    id: code,
                    partner: newPartner,
                    donorCategory: newCategory
                },
                success: function (response) {
                    if (response.success) {
                        partnerSpan.text(newPartner);
                        categorySpan.text(categoryText);
                        partnerInput.addClass('d-none');
                        categorySelect.addClass('d-none');
                        partnerSpan.removeClass('d-none');
                        categorySpan.removeClass('d-none');
                        button.html('<i class="fas fa-edit"></i>');
                        button.removeClass('btn-success').addClass('btn-outline-warning');
                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Donor updated successfully"]',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                }
            });
        } else {
            // Enter edit mode
            partnerInput.removeClass('d-none');
            categorySelect.removeClass('d-none');
            partnerSpan.addClass('d-none');
            categorySpan.addClass('d-none');
            button.html('<i class="fas fa-save"></i>');
            button.removeClass('btn-outline-warning').addClass('btn-success');
            partnerInput.focus();
        }
    }
</script>