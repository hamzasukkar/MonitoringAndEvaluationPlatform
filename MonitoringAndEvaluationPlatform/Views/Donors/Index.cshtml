@model IEnumerable<MonitoringAndEvaluationPlatform.Models.Donor>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization

@{
	ViewData["Title"] = "Donors";
	Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="page-title-section">
            <div class="page-breadcrumb">
                <a href="@Url.Action("Index", "Home")" class="breadcrumb-link">
                    <i class="fas fa-home"></i>
                    @Localizer["Home"]
                </a>
                <i class="fas fa-chevron-right breadcrumb-separator"></i>
                <span class="current-page">@Localizer["Donors"]</span>
            </div>
            <h1 class="page-title">@Localizer["Donor Management"]</h1>
            <p class="page-description">Manage funding partners and track their performance</p>
        </div>
    </div>
</div>

@await Html.PartialAsync("_ManagementNavigation")

<!-- Quick Add Section -->
<div class="chart-card mb-4">
    <div class="chart-title">
        <i class="fas fa-users"></i>
        @Localizer["Add New Donor"]
    </div>
    <form id="createDonorForm" class="row g-3">
        @Html.AntiForgeryToken()
        <div class="col-md-4">
            <label for="Partner" class="form-label fw-bold">
                <i class="fas fa-handshake me-2"></i>@Localizer["Partner Name"]
            </label>
            <input type="text" name="Partner" class="form-control form-control-lg" required
                   placeholder="@Localizer["Enter partner name"]" />
        </div>
        <div class="col-md-4">
            <label for="donorCategory" class="form-label fw-bold">
                <i class="fas fa-tags me-2"></i>@Localizer["Donor Category"]
            </label>
            <select name="donorCategory" class="form-control form-control-lg" required>
                <option value="">@Localizer["Select Category"]</option>
                <option value="1">@Localizer["UN Organizations"]</option>
                <option value="2">@Localizer["Countries"]</option>
                <option value="3">@Localizer["International NGOs"]</option>
                <option value="4">@Localizer["Local"]</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <div class="d-grid w-100">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus-circle me-2"></i>@Localizer["Create Donor"]
                </button>
            </div>
        </div>
    </form>
</div>

<!-- Donors Table -->
<div class="chart-card">
    <div class="chart-title">
        <i class="fas fa-users-cog"></i>
        @Localizer["Donors List"]
    </div>
    @if (Model.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover modern-table">
                <thead class="table-header">
                    <tr>
                        <th>
                            <i class="fas fa-handshake me-2"></i>
                            @Localizer["Partner Name"]
                        </th>
                        <th>
                            <i class="fas fa-tags me-2"></i>
                            @Localizer["Category"]
                        </th>
                        <th class="text-center">
                            <i class="fas fa-chart-line me-2"></i>
                            @Localizer["Indicators Performance"]
                        </th>
                        <th class="text-center">
                            <i class="fas fa-dollar-sign me-2"></i>
                            @Localizer["Disbursement Performance"]
                        </th>
                        <th class="text-center">
                            <i class="fas fa-cogs me-2"></i>
                            @Localizer["Actions"]
                        </th>
                    </tr>
                </thead>
                <tbody id="donorsTableBody">
                    @foreach (var item in Model)
                    {
                        string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                        string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                        double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                        <tr id="donor-row-@item.Code" class="table-row">
                            <td>
                                <span id="donor-partner-@item.Code" class="donor-partner-view fw-semibold">
                                    @item.Partner
                                </span>
                                <input type="text" id="donor-partner-input-@item.Code" class="form-control form-control-sm donor-partner-edit d-none" value="@item.Partner" />
                            </td>
                            <td>
                                <span id="donor-category-@item.Code" class="donor-category-view badge bg-primary">
                                    @item.donorCategory.ToString()
                                </span>
                                <select id="donor-category-select-@item.Code" class="form-control form-control-sm donor-category-edit d-none">
                                    @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.UNOrganizations)
                                    {
                                        <option value="1" selected>@Localizer["UN Organizations"]</option>
                                    }
                                    else
                                    {
                                        <option value="1">@Localizer["UN Organizations"]</option>
                                    }
                                    @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.Countries)
                                    {
                                        <option value="2" selected>@Localizer["Countries"]</option>
                                    }
                                    else
                                    {
                                        <option value="2">@Localizer["Countries"]</option>
                                    }
                                    @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.InternationalNonGovernmentalOrganizations)
                                    {
                                        <option value="3" selected>@Localizer["International NGOs"]</option>
                                    }
                                    else
                                    {
                                        <option value="3">@Localizer["International NGOs"]</option>
                                    }
                                    @if (item.donorCategory == MonitoringAndEvaluationPlatform.Enums.DonorCategory.Local)
                                    {
                                        <option value="4" selected>@Localizer["Local"]</option>
                                    }
                                    else
                                    {
                                        <option value="4">@Localizer["Local"]</option>
                                    }
                                </select>
                            </td>
                            <td class="text-center">
                                @await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))
                            </td>
                            <td class="text-center">
                                @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                            </td>
                            <td class="text-center">
                                <div class="btn-group action-buttons" role="group">
                                    <button class="btn btn-outline-primary btn-sm action-btn"
                                            id="edit-btn-@item.Code"
                                            onclick="toggleDonorEdit(@item.Code)" title="@Localizer["Edit"]">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm action-btn" title="@Localizer["Delete"]"
                                            onclick="deleteDonor(@item.Code)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="stat-icon warning mx-auto mb-3" style="width: 80px; height: 80px; font-size: 2rem;">
                <i class="fas fa-users"></i>
            </div>
            <h4 class="text-muted">@Localizer["No donors found"]</h4>
            <p class="text-muted">@Localizer["Create your first donor to get started"]</p>
        </div>
    }
</div>

@section Scripts {
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Modern Table Styles */
        .modern-table {
            background: transparent;
            border: none;
            border-radius: 15px;
            overflow: hidden;
        }

        .table-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
        }

        .table-header th {
            border: none;
            padding: 20px 15px;
            font-weight: 600;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-row {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: none;
            transition: all 0.3s ease;
        }

        .table-row:hover {
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .table-row td {
            border: none;
            padding: 20px 15px;
            vertical-align: middle;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .action-buttons {
            gap: 5px;
        }

        .action-btn {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            border-width: 1px;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .table-responsive {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        /* Form styling */
        .form-control-lg {
            border: 2px solid rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .form-control-lg:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem color-mix(in srgb, var(--primary-color) 25%, transparent);
        }

        .fw-semibold {
            font-weight: 600;
            color: #333;
        }

        .form-label {
            color: #374151;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .form-label i {
            color: var(--primary-color);
        }
    </style>

    <script>
        $(document).ready(function() {

        // Create Donor Form Submission
        $('#createDonorForm').on('submit', function(e) {
            e.preventDefault();
            console.log('Form submitted');

            const formData = {
                'Partner': $('input[name="Partner"]').val(),
                'donorCategory': $('select[name="donorCategory"]').val(),
                '__RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            };

            console.log('Form data:', formData);

            $.ajax({
                url: '@Url.Action("CreateInline")',
                type: 'POST',
                data: formData,
                success: function(response) {
                    if (response.success) {
                        // Add new row to table
                        const newRow = `
                            <tr id="donor-row-${response.donor.code}" class="table-row">
                                <td>
                                    <span id="donor-partner-${response.donor.code}" class="donor-partner-view fw-semibold">
                                        ${response.donor.partner}
                                    </span>
                                    <input type="text" id="donor-partner-input-${response.donor.code}" class="form-control form-control-sm donor-partner-edit d-none" value="${response.donor.partner}" />
                                </td>
                                <td>
                                    <span id="donor-category-${response.donor.code}" class="donor-category-view badge bg-primary">
                                        ${response.donor.donorCategory}
                                    </span>
                                    <select id="donor-category-select-${response.donor.code}" class="form-control form-control-sm donor-category-edit d-none">
                                        <option value="1">@Localizer["UN Organizations"]</option>
                                        <option value="2">@Localizer["Countries"]</option>
                                        <option value="3">@Localizer["International NGOs"]</option>
                                        <option value="4">@Localizer["Local"]</option>
                                    </select>
                                </td>
                                <td class="text-center">
                                    <div class="progress-container">
                                        <div class="progress modern-progress-bar">
                                            <div class="progress-bar bg-secondary progress-bar-striped" role="progressbar" style="width: 0%;">0%</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <div class="progress-container">
                                        <div class="progress modern-progress-bar">
                                            <div class="progress-bar bg-secondary progress-bar-striped" role="progressbar" style="width: 0%;">0%</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group action-buttons" role="group">
                                        <button class="btn btn-outline-primary btn-sm action-btn" id="edit-btn-${response.donor.code}" onclick="toggleDonorEdit(${response.donor.code})" title="@Localizer["Edit"]">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm action-btn" title="@Localizer["Delete"]" onclick="deleteDonor(${response.donor.code})">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>`;

                        $('#donorsTableBody').append(newRow);
                        $('#createDonorForm')[0].reset();

                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Success!"]',
                            text: '@Localizer["Donor created successfully"]',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        console.log('Error response:', response);
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', xhr, status, error);
                    Swal.fire('Error', '@Localizer["An error occurred while creating the donor"]', 'error');
                }
            });
        });

        // Fallback event handler
        $(document).on('click', 'button[type="submit"]', function(e) {
            if ($(this).closest('#createDonorForm').length > 0) {
                console.log('Fallback submit triggered');
                e.preventDefault();
                $('#createDonorForm').trigger('submit');
            }
        });

        // Inline Editing for text fields
        $(document).on('click', '.editable-field', function() {
            if ($(this).hasClass('editing')) return;

            const $this = $(this);
            const originalValue = $this.text().trim();
            const field = $this.data('field');
            const id = $this.data('id');

            $this.addClass('editing');
            $this.html(`<input type="text" class="edit-input" value="${originalValue}" data-original="${originalValue}">`);

            const $input = $this.find('.edit-input');
            $input.focus().select();

            // Save on Enter or blur
            $input.on('blur keypress', function(e) {
                if (e.type === 'keypress' && e.which !== 13) return;

                const newValue = $(this).val().trim();
                const originalValue = $(this).data('original');

                if (newValue === originalValue) {
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                if (newValue === '') {
                    Swal.fire('Error', '@Localizer["Value cannot be empty"]', 'error');
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                // Save changes
                $.ajax({
                    url: '@Url.Action("InlineEdit")',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            $this.removeClass('editing').text(newValue);
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Updated!"]',
                                text: '@Localizer["Field updated successfully"]',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            $this.removeClass('editing').text(originalValue);
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        $this.removeClass('editing').text(originalValue);
                        Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                    }
                });
            });

            // Cancel on Escape
            $input.on('keypress', function(e) {
                if (e.which === 27) { // Escape key
                    $this.removeClass('editing').text(originalValue);
                }
            });
        });

        // Inline Editing for select fields
        $(document).on('click', '.editable-field-select', function() {
            if ($(this).hasClass('editing')) return;

            const $this = $(this);
            const originalValue = $this.text().trim();
            const originalNumericValue = $this.data('value');
            const field = $this.data('field');
            const id = $this.data('id');

            const selectOptions = `
                <option value="1" ${originalNumericValue === 1 ? 'selected' : ''}>@Localizer["UN Organizations"]</option>
                <option value="2" ${originalNumericValue === 2 ? 'selected' : ''}>@Localizer["Countries"]</option>
                <option value="3" ${originalNumericValue === 3 ? 'selected' : ''}>@Localizer["International NGOs"]</option>
                <option value="4" ${originalNumericValue === 4 ? 'selected' : ''}>@Localizer["Local"]</option>
            `;

            $this.addClass('editing');
            $this.html(`<select class="edit-select" data-original-text="${originalValue}" data-original-value="${originalNumericValue}">${selectOptions}</select>`);

            const $select = $this.find('.edit-select');
            $select.focus();

            // Save on change or blur
            $select.on('blur change', function(e) {
                const newValue = $(this).val();
                const newText = $(this).find('option:selected').text();
                const originalValue = $(this).data('original-value');
                const originalText = $(this).data('original-text');

                if (newValue == originalValue) {
                    $this.removeClass('editing').text(originalText);
                    return;
                }

                // Save changes
                $.ajax({
                    url: '@Url.Action("InlineEdit")',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            $this.removeClass('editing').text(newText).data('value', parseInt(newValue));
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Updated!"]',
                                text: '@Localizer["Category updated successfully"]',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            $this.removeClass('editing').text(originalText);
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        $this.removeClass('editing').text(originalText);
                        Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                    }
                });
            });
        });

    }); // End document ready

    // Delete Donor - Global function
    function deleteDonor(id) {
        console.log('Delete donor called with id:', id);
        Swal.fire({
            title: '@Localizer["Are you sure?"]',
            text: "@Localizer["You won't be able to revert this!"]",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '@Localizer["Yes, delete it!"]',
            cancelButtonText: '@Localizer["Cancel"]'
        }).then((result) => {
            console.log('SweetAlert result:', result);
            if (result.isConfirmed) {
                console.log('Sending delete request for id:', id);
                $.ajax({
                    url: '@Url.Action("InlineDelete")',
                    type: 'POST',
                    data: { id: id },
                    success: function(response) {
                        console.log('Delete response:', response);
                        if (response.success) {
                            $(`#donor-row-${id}`).fadeOut(function() {
                                $(this).remove();
                            });
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Deleted!"]',
                                text: '@Localizer["Donor has been deleted."]',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire('Error', response.message || 'Unknown error', 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Delete error:', xhr, status, error);
                        Swal.fire('Error', '@Localizer["An error occurred while deleting"]', 'error');
                    }
                });
            }
        });
    }

    // Toggle Donor Inline Edit - Global function
    function toggleDonorEdit(code) {
        const partnerSpan = $(`#donor-partner-${code}`);
        const partnerInput = $(`#donor-partner-input-${code}`);
        const categorySpan = $(`#donor-category-${code}`);
        const categorySelect = $(`#donor-category-select-${code}`);
        const button = $(`#edit-btn-${code}`);

        const isEditing = partnerInput.hasClass('d-none') === false;

        if (isEditing) {
            // Save via AJAX
            const newPartner = partnerInput.val();
            const newCategory = categorySelect.val();
            const categoryText = categorySelect.find('option:selected').text();

            $.ajax({
                url: '@Url.Action("QuickUpdate")',
                type: 'POST',
                data: {
                    id: code,
                    partner: newPartner,
                    donorCategory: newCategory
                },
                success: function (response) {
                    if (response.success) {
                        partnerSpan.text(newPartner);
                        categorySpan.text(categoryText);
                        partnerInput.addClass('d-none');
                        categorySelect.addClass('d-none');
                        partnerSpan.removeClass('d-none');
                        categorySpan.removeClass('d-none');
                        button.html('<i class="fas fa-edit"></i>');
                        button.removeClass('btn-success').addClass('btn-outline-primary action-btn');
                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Donor updated successfully"]',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                }
            });
        } else {
            // Enter edit mode
            partnerInput.removeClass('d-none');
            categorySelect.removeClass('d-none');
            partnerSpan.addClass('d-none');
            categorySpan.addClass('d-none');
            button.html('<i class="fas fa-save"></i>');
            button.removeClass('btn-outline-primary action-btn').addClass('btn-success');
            partnerInput.focus();
        }
    }
    </script>
}