@model List<MonitoringAndEvaluationPlatform.ViewModel.ActivityPlanViewModel>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Project Action Plan";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    int projectTotalPlannedCost = Model.Sum(ag => ag.Activities.Sum(a => a.TotalEstimatedCost));
    int projectTotalRealisedCost = Model.Sum(ag => ag.Activities.Sum(a => a.TotalRealisedCost));
    int maxPlans = Model.Any() ? Model.Max(m => m.PlansCount) : 0;
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="page-title-section">
            <div class="page-breadcrumb">
                <a href="@Url.Action("Index", "Projects")" class="breadcrumb-link">
                    <i class="fas fa-project-diagram"></i>
                    @Localizer["Projects"]
                </a>
                <i class="fas fa-chevron-right breadcrumb-separator"></i>
                <span class="current-page">@Localizer["Action Plan"]</span>
            </div>
            <h1 class="page-title">@Localizer["Project Action Plan"]</h1>
            <p class="page-description">@Localizer["Detailed planning and execution tracking"]</p>
        </div>
        
        <div class="header-actions">
            <a href="@Url.Action("Details", "Projects", new { id = ViewBag.ProjectID })" class="action-btn secondary">
                <i class="fas fa-arrow-left"></i>
                @Localizer["Back to Project"]
            </a>
        </div>
    </div>
</div>

<!-- Project Navigation Section -->
<div class="project-nav-modern mb-4">
    <nav class="modern-navbar">
        <div class="navbar-container">
            <div class="navbar-collapse" id="projectNavbar">
                <ul class="modern-nav-list">
                    <li class="nav-item-modern">
                        <a asp-action="Details" asp-controller="Projects" asp-route-id="@ViewBag.ProjectID" class="nav-link-modern">
                            <i class="fas fa-project-diagram me-2"></i>@Localizer["Project"]
                        </a>
                    </li>
                    <li class="nav-item-modern">
                        @if (ViewBag.FirstIndicatorCode != null)
                        {
                            <a asp-action="Index" asp-controller="Measures" asp-route-indicatorId="@ViewBag.FirstIndicatorCode" class="nav-link-modern" title="@Localizer["View measures for indicator"]">
                                <i class="fas fa-ruler-combined me-2"></i>@Localizer["Measures"]
                            </a>
                        }
                        else
                        {
                            <a asp-action="Index" asp-controller="Measures" class="nav-link-modern" title="@Localizer["No indicators linked to this project yet"]">
                                <i class="fas fa-ruler-combined me-2"></i>@Localizer["Measures"]
                            </a>
                        }
                    </li>
                    <li class="nav-item-modern">
                        <a asp-controller="ActionPlans" asp-action="ActionPlan" asp-route-id="@ViewBag.ProjectID" class="nav-link-modern active" aria-current="page">
                            <i class="fas fa-tasks me-2"></i>@Localizer["Action Plans"]
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</div>

<!-- Totals Section -->
<div class="totals-section">
    <div class="total-metric-card">
        <div class="metric-header">
            <div class="metric-icon planned">
                <i class="fas fa-chart-line"></i>
            </div>
            <div>
                <div class="metric-title">@Localizer["Total Planned"]</div>
                <div class="metric-subtitle">@Localizer["Estimated Budget"]</div>
            </div>
        </div>
        <div class="metric-value">
            @projectTotalPlannedCost.ToString("C0")
        </div>
    </div>

    <div class="total-metric-card">
        <div class="metric-header">
            <div class="metric-icon realised">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div>
                <div class="metric-title">@Localizer["Total Realised"]</div>
                <div class="metric-subtitle">@Localizer["Actual Spending"]</div>
            </div>
        </div>
        <div class="metric-value">
            @projectTotalRealisedCost.ToString("C0")
        </div>
    </div>
</div>

<!-- Quick Update Realised Values Section -->
<div class="quick-update-section">
    <div class="quick-update-card">
        <div class="quick-update-header">
            <div class="quick-update-title">
                <i class="fas fa-pencil-alt"></i>
                @Localizer["Quick Update Realised Values"]
            </div>
            <button type="button" class="toggle-quick-update" id="toggleQuickUpdate">
                <i class="fas fa-chevron-down"></i>
            </button>
        </div>
        <div class="quick-update-body" id="quickUpdateBody" style="display: none;">
            <div class="quick-update-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="planSelect" class="form-label">
                            <i class="fas fa-calendar-alt me-1"></i>@Localizer["Select Plan/Month"]
                        </label>
                        <select class="form-select" id="planSelect">
                            <option value="">@Localizer["-- Select Plan --"]</option>
                            @{
                                var projectMonthsList = ViewBag.ProjectMonths as List<DateTime>;
                            }
                            @foreach (var activityGroup in Model)
                            {
                                @if (@activityGroup.ActivityType == "DisbursementPerformance")
                                {
                                    @foreach (var activity in activityGroup.Activities)
                                    {
                                        var activityName = activity.ActivityName;
                                        string displayName = activityName;

                                        if (activityName.Contains("-"))
                                        {
                                            var parts = activityName.Split(new[] { '-' }, 2);
                                            if (parts.Length == 2)
                                            {
                                                var prefix = parts[0];
                                                var keyToLocalize = parts[1];
                                                var localizedValue = @Localizer[keyToLocalize];
                                                displayName = $"{prefix}-{localizedValue.Value}";
                                            }
                                        }

                                        <optgroup label="@displayName">
                                            @for (int i = 0; i < activity.Plans.Count; i++)
                                            {
                                                var plan = activity.Plans[i];
                                                string planLabel = "";
                                                if (projectMonthsList != null && projectMonthsList.Count > i)
                                                {
                                                    planLabel = projectMonthsList[i].ToString("MMM yyyy");
                                                }
                                                else
                                                {
                                                    planLabel = $"{Localizer["Plan"]} {i + 1}";
                                                }
                                                <option value="@plan.PlanCode"
                                                        data-planned="@plan.PlannedValue"
                                                        data-realised="@plan.RealisedValue"
                                                        data-activity="@displayName">
                                                    @planLabel
                                                </option>
                                            }
                                        </optgroup>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="realisedValueInput" class="form-label">
                            <i class="fas fa-dollar-sign me-1"></i>@Localizer["Realised Value"]
                        </label>
                        <input type="number" class="form-control" id="realisedValueInput" placeholder="@Localizer["Enter realised value"]" disabled>
                    </div>

                    <div class="form-group">
                        <label class="form-label opacity-0">@Localizer["Action"]</label>
                        <button type="button" class="btn btn-primary w-100" id="quickUpdateBtn" disabled>
                            <i class="fas fa-save me-2"></i>@Localizer["Update"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Activity Plans Section -->
<div class="modern-activity-section">

@foreach (var activityGroup in Model)
{
    @if (@activityGroup.ActivityType == "DisbursementPerformance")
    {
        <div class="modern-activity-card">
            <div class="activity-header">
                <div class="activity-title">
                    <i class="fas fa-wallet"></i>
                    @Localizer[@activityGroup.ActivityType]
                </div>
                <div class="activity-badge">
                    @activityGroup.Activities.Count @Localizer["Activities"]
                </div>
            </div>
            
            <div class="modern-table-container">
                <table class="modern-action-table">
                    <thead>
                        <tr>
                            <th>@Localizer["Activity"]</th>
                            <th>@Localizer["Framework"]</th>
                            @{
                                var projectMonths = ViewBag.ProjectMonths as List<DateTime>;
                            }
                            @if (projectMonths != null && projectMonths.Any())
                            {
                                @foreach (var month in projectMonths)
                                {
                                    <th>@month.ToString("MMM yyyy")</th>
                                }
                            }
                            else
                            {
                                @for (int i = 1; i <= maxPlans; i++)
                                {
                                    <th>@Localizer["Plan"] @i</th>
                                }
                            }
                            <th>@Localizer["Total"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var activity in activityGroup.Activities)
                        {
                            <tr>
                                <td rowspan="3" class="activity-name-cell align-middle">
                                    @{
                                        var activityName = activity.ActivityName;
                                        string displayName = activityName;

                                        if (activityName.Contains("-"))
                                        {
                                            var parts = activityName.Split(new[] { '-' }, 2);
                                            if (parts.Length == 2)
                                            {
                                                var prefix = parts[0];
                                                var keyToLocalize = parts[1];
                                                var localizedValue = @Localizer[keyToLocalize];
                                                displayName = $"{prefix}-{localizedValue.Value}";
                                            }
                                        }
                                    }
                                    @displayName
                                </td>
                                <td class="framework-label-cell"></td>
                                @if (projectMonths != null && projectMonths.Any())
                                {
                                    @foreach (var month in projectMonths)
                                    {
                                        <td></td>
                                    }
                                }
                                else
                                {
                                    @foreach (var plan in activity.Plans)
                                    {
                                        <td></td>
                                    }
                                    @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                    {
                                        <td></td>
                                    }
                                }
                                <td class="total-cost-cell">-</td>
                            </tr>
                            <tr>
                                <td class="framework-label-cell">@Localizer["Planned"]</td>
                                @if (projectMonths != null && projectMonths.Any())
                                {
                                    @for (int i = 0; i < projectMonths.Count; i++)
                                    {
                                        @if (i < activity.Plans.Count)
                                        {
                                            var plan = activity.Plans[i];
                                            <td class="editable-plan-cell" contenteditable="true"
                                                data-plan-code="@plan.PlanCode"
                                                data-value-type="Planned">
                                                @plan.PlannedValue
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="empty-plan-cell"></td>
                                        }
                                    }
                                }
                                else
                                {
                                    @foreach (var plan in activity.Plans)
                                    {
                                        <td class="editable-plan-cell" contenteditable="true"
                                            data-plan-code="@plan.PlanCode"
                                            data-value-type="Planned">
                                            @plan.PlannedValue
                                        </td>
                                    }
                                    @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                    {
                                        <td></td>
                                    }
                                }
                                <td class="total-cost-cell">@activity.TotalEstimatedCost.ToString("N0")</td>
                            </tr>
                            <tr>
                                <td class="framework-label-cell">@Localizer["Realised"]</td>
                                @if (projectMonths != null && projectMonths.Any())
                                {
                                    @for (int i = 0; i < projectMonths.Count; i++)
                                    {
                                        @if (i < activity.Plans.Count)
                                        {
                                            var plan = activity.Plans[i];
                                            <td class="editable-plan-cell" contenteditable="true"
                                                data-plan-code="@plan.PlanCode"
                                                data-value-type="Realised">
                                                @plan.RealisedValue
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="empty-plan-cell"></td>
                                        }
                                    }
                                }
                                else
                                {
                                    @foreach (var plan in activity.Plans)
                                    {
                                        <td class="editable-plan-cell" contenteditable="true"
                                            data-plan-code="@plan.PlanCode"
                                            data-value-type="Realised">
                                            @plan.RealisedValue
                                        </td>
                                    }
                                    @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                    {
                                        <td></td>
                                    }
                                }
                                <td class="total-cost-cell">@activity.TotalRealisedCost.ToString("N0")</td>
                            </tr>
                        }
                    
                    <tfoot>
                        <tr class="subtotal-row">
                            <td colspan="2">@Localizer["Subtotal Planned"]</td>
                            @if (projectMonths != null && projectMonths.Any())
                            {
                                @for (int i = 0; i < projectMonths.Count; i++)
                                {
                                    <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].PlannedValue : 0)</td>
                                }
                            }
                            else
                            {
                                @for (int i = 0; i < maxPlans; i++)
                                {
                                    <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].PlannedValue : 0)</td>
                                }
                            }
                            <td>@activityGroup.Activities.Sum(a => a.TotalEstimatedCost).ToString("N0")</td>
                        </tr>
                        <tr class="subtotal-row">
                            <td colspan="2">@Localizer["Subtotal Realised"]</td>
                            @if (projectMonths != null && projectMonths.Any())
                            {
                                @for (int i = 0; i < projectMonths.Count; i++)
                                {
                                    <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].RealisedValue : 0)</td>
                                }
                            }
                            else
                            {
                                @for (int i = 0; i < maxPlans; i++)
                                {
                                    <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].RealisedValue : 0)</td>
                                }
                            }
                            <td>@activityGroup.Activities.Sum(a => a.TotalRealisedCost).ToString("N0")</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }
}

</div>

@if (!Model.Any())
{
    <div class="empty-state-card">
        <div class="empty-state-icon">
            <i class="fas fa-clipboard-list"></i>
        </div>
        <h3 class="empty-state-title">@Localizer["No Action Plans"]</h3>
        <p class="empty-state-text">
            @Localizer["No action plans have been created for this project yet. Start by creating your first action plan to track project activities."]
        </p>
    </div>
}

@section Scripts {
    <style>
        /* Modern Action Plan Styles */
        /* Modern Project Navigation */
        .project-nav-modern {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 1rem 1.5rem;
            margin-bottom: 2rem;
            border: none;
        }

        .modern-navbar {
            background: transparent !important;
            border: none;
            padding: 0;
        }

        .navbar-container {
            width: 100%;
        }

        .modern-nav-list {
            display: flex;
            list-style: none;
            margin: 0;
            padding: 0;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .nav-item-modern {
            margin: 0;
        }

        .nav-link-modern {
            color: #6c757d;
            text-decoration: none;
            font-weight: 500;
            padding: 12px 20px;
            border-radius: 12px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.7);
            border: 1px solid rgba(0, 0, 0, 0.1);
            white-space: nowrap;
        }

        .nav-link-modern:hover {
            background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            text-decoration: none;
        }

        .nav-link-modern.active {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        /* Modern Totals Card */
        .totals-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .total-metric-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .total-metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
            transition: left 0.5s;
        }

        .total-metric-card:hover::before {
            left: 100%;
        }

        .total-metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .metric-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .metric-icon {
            width: 50px;
            height: 50px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1.5rem;
        }

        .metric-icon.planned {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
        }

        .metric-icon.realised {
            background: linear-gradient(135deg, var(--accent-color) 0%, var(--warning-color) 100%);
            color: white;
        }

        .metric-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .metric-subtitle {
            color: #6c757d;
            font-size: 0.85rem;
        }

        /* Modern Activity Group Card */
        .modern-activity-section {
            margin: 2rem 0;
        }

        .modern-activity-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: none;
            margin-bottom: 2rem;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .modern-activity-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .activity-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            padding: 1.5rem 2rem;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .activity-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
        }

        .activity-title i {
            margin-right: 0.75rem;
            opacity: 0.9;
        }

        .activity-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        /* Modern Table Styling */
        .modern-table-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 0 0 15px 15px;
            overflow: hidden;
        }

        .modern-action-table {
            width: 100%;
            border-collapse: collapse;
            background: transparent;
        }

        .modern-action-table thead {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
        }

        .modern-action-table th {
            padding: 1.2rem;
            font-weight: 600;
            color: white;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            border: none;
            text-align: center;
        }

        .modern-action-table th:first-child {
            text-align: left;
        }

        .modern-action-table th:last-child {
            text-align: right;
        }

        .modern-action-table td {
            padding: 1rem 1.2rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            color: #333;
            transition: all 0.3s ease;
        }

        .modern-action-table tbody tr:hover {
            background: rgba(0, 0, 0, 0.05);
        }

        .activity-name-cell {
            font-weight: 600;
            font-size: 1rem;
            color: #333;
        }

        .framework-label-cell {
            font-weight: 500;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .editable-plan-cell {
            background: rgba(0, 0, 0, 0.05);
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 80px;
        }

        .editable-plan-cell:hover {
            background: rgba(0, 0, 0, 0.1);
            transform: scale(1.05);
        }

        .editable-plan-cell:focus {
            outline: 2px solid var(--primary-color);
            background: rgba(var(--primary-color-rgb), 0.2);
        }

        .empty-plan-cell {
            background: rgba(0, 0, 0, 0.02);
            border-radius: 8px;
            text-align: center;
            min-width: 80px;
            color: #6c757d;
            font-style: italic;
        }

        .empty-plan-cell::after {
            content: "-";
        }

        .total-cost-cell {
            font-weight: 700;
            color: #333;
            text-align: right;
        }

        .subtotal-row {
            background: rgba(0, 0, 0, 0.1);
            font-weight: 600;
        }

        .subtotal-row td {
            padding: 1.2rem;
            border-top: 2px solid rgba(0, 0, 0, 0.2);
        }

        /* Empty State Styling */
        .empty-state-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 3rem;
            text-align: center;
            border: none;
        }

        .empty-state-icon {
            font-size: 4rem;
            color: #6c757d;
            opacity: 0.5;
            margin-bottom: 1rem;
        }

        .empty-state-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #495057;
            margin-bottom: 1rem;
        }

        .empty-state-text {
            color: #6c757d;
            font-size: 1rem;
            max-width: 400px;
            margin: 0 auto;
        }

        /* Status Animations */
        .saving {
            background: rgba(255, 193, 7, 0.3) !important;
            animation: pulse 1.5s infinite;
        }

        .success {
            background: rgba(40, 167, 69, 0.3) !important;
            transition: background-color 1s ease-out;
        }

        .error {
            background: rgba(220, 53, 69, 0.3) !important;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .totals-section {
                grid-template-columns: 1fr;
            }

            .modern-action-table {
                font-size: 0.85rem;
            }

            .modern-action-table th,
            .modern-action-table td {
                padding: 0.75rem 0.5rem;
            }

            .metric-value {
                font-size: 2rem;
            }
        }

        /* Quick Update Section Styles */
        .quick-update-section {
            margin-bottom: 2rem;
        }

        .quick-update-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: none;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .quick-update-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            padding: 1.2rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .quick-update-header:hover {
            background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);
        }

        .quick-update-title {
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
        }

        .quick-update-title i {
            margin-right: 0.75rem;
        }

        .toggle-quick-update {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .toggle-quick-update:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .toggle-quick-update i {
            transition: transform 0.3s ease;
        }

        .toggle-quick-update.active i {
            transform: rotate(180deg);
        }

        .quick-update-body {
            padding: 2rem;
            background: white;
        }

        .quick-update-form {
            width: 100%;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
        }

        .form-select, .form-control {
            border-radius: 10px;
            border: 2px solid #e0e0e0;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }

        .form-select:focus, .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(var(--primary-color-rgb), 0.15);
            outline: none;
        }

        .form-select:disabled, .form-control:disabled {
            background-color: #f8f9fa;
            cursor: not-allowed;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .opacity-0 {
            opacity: 0;
        }

        @@media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            let originalValue;

            // Use event delegation for dynamically added content if needed in the future
            $('body').on('focus', '.editable-plan-cell', function () {
                originalValue = $(this).text().trim();
                // Select all text in the cell for easy editing
                //document.execCommand('selectAll', false, null);
            });

            $('body').on('blur', '.editable-plan-cell', function () {
                var cell = $(this);
                var newValue = cell.text().trim();

                // If value hasn't changed, do nothing
                if (newValue === originalValue) {
                    return;
                }

                // Basic validation: ensure the value is a number
                if (isNaN(newValue) || newValue === '') {
                    cell.addClass('error');
                    cell.text(originalValue); // Revert to original value
                    // Optionally show a more specific alert
                    // alert("Invalid input. Please enter a number.");
                    setTimeout(() => cell.removeClass('error'), 1500);
                    return;
                }

                var planCode = cell.data('plan-code');
                var valueType = cell.data('value-type');

                cell.removeClass('success error').addClass('saving');

                $.ajax({
                    url: '@Url.Action("UpdatePlanValue", "Plans")',
                    type: 'POST',
                    data: {
                        planCode: planCode,
                        valueType: valueType,
                        newValue: newValue
                    },
                    success: function (response) {
                        if (response.success) {
                            // On success, simply reload the page to ensure all calculations and totals are updated from the server.
                            // This is the most reliable way to reflect the change everywhere.
                            location.reload();
                        } else {
                            cell.removeClass('saving').addClass('error');
                            cell.text(originalValue); // Revert on failure
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        cell.removeClass('saving').addClass('error');
                        cell.text(originalValue); // Revert on AJAX error
                        alert('A server error occurred: ' + textStatus + ' - ' + errorThrown);
                    }
                });
            });

            // Allow Enter key to function like Tab (blur)
            $('body').on('keydown', '.editable-plan-cell', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    $(this).blur();
                }
            });

            // Quick Update Section - Toggle
            $('#toggleQuickUpdate, .quick-update-header').on('click', function() {
                var body = $('#quickUpdateBody');
                var toggle = $('#toggleQuickUpdate');

                if (body.is(':visible')) {
                    body.slideUp(300);
                    toggle.removeClass('active');
                } else {
                    body.slideDown(300);
                    toggle.addClass('active');
                }
            });

            // When plan is selected
            $('#planSelect').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var realisedValue = selectedOption.data('realised');

                if ($(this).val()) {
                    $('#realisedValueInput').val(realisedValue || '').prop('disabled', false).focus();
                    $('#quickUpdateBtn').prop('disabled', false);
                } else {
                    $('#realisedValueInput').val('').prop('disabled', true);
                    $('#quickUpdateBtn').prop('disabled', true);
                }
            });

            // Quick Update Button
            $('#quickUpdateBtn').on('click', function() {
                var planCode = $('#planSelect').val();
                var newValue = $('#realisedValueInput').val().trim();

                // Validate
                if (!planCode) {
                    alert('@Localizer["Please select a plan"]');
                    return;
                }

                if (newValue === '' || isNaN(newValue)) {
                    alert('@Localizer["Please enter a valid number"]');
                    return;
                }

                // Show loading
                var btn = $(this);
                var originalHtml = btn.html();
                btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>@Localizer["Updating..."]');

                // Send update
                $.ajax({
                    url: '@Url.Action("UpdatePlanValue", "Plans")',
                    type: 'POST',
                    data: {
                        planCode: planCode,
                        valueType: 'Realised',
                        newValue: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert('@Localizer["Error"]: ' + response.message);
                            btn.prop('disabled', false).html(originalHtml);
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert('@Localizer["A server error occurred"]: ' + textStatus);
                        btn.prop('disabled', false).html(originalHtml);
                    }
                });
            });

            // Allow Enter key in the input to trigger update
            $('#realisedValueInput').on('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    $('#quickUpdateBtn').click();
                }
            });
        });
    </script>
}