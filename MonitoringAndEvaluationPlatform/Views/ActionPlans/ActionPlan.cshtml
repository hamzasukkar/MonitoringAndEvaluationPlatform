@model List<MonitoringAndEvaluationPlatform.ViewModel.ActivityPlanViewModel>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Project Action Plan";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    int projectTotalPlannedCost = Model.Sum(ag => ag.Activities.Sum(a => a.TotalEstimatedCost));
    int projectTotalRealisedCost = Model.Sum(ag => ag.Activities.Sum(a => a.TotalRealisedCost));
    int maxPlans = Model.Any() ? Model.Max(m => m.PlansCount) : 0;
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="page-title-section">
            <div class="page-breadcrumb">
                <a href="@Url.Action("Index", "Projects")" class="breadcrumb-link">
                    <i class="fas fa-project-diagram"></i>
                    @Localizer["Projects"]
                </a>
                <i class="fas fa-chevron-right breadcrumb-separator"></i>
                <span class="current-page">@Localizer["Action Plan"]</span>
            </div>
            <h1 class="page-title">@Localizer["Project Action Plan"]</h1>
            <p class="page-description">Detailed planning and execution tracking</p>
        </div>
        
        <div class="header-actions">
            <a href="@Url.Action("Details", "Projects", new { id = ViewBag.ProjectID })" class="action-btn secondary">
                <i class="fas fa-arrow-left"></i>
                @Localizer["Back to Project"]
            </a>
        </div>
    </div>
</div>

<!-- Project Navigation Section -->
<div class="modern-nav-section">

<style>
/* Modern Action Plan Styles */
.modern-nav-section {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.project-nav .navbar {
    background: transparent !important;
    border: none;
    padding: 0;
}

.project-nav .nav-link {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
    padding: 12px 20px;
    border-radius: 12px;
    margin: 0 5px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    background: rgba(255, 255, 255, 0.05);
}

.project-nav .nav-link:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    transform: translateY(-2px);
}

.project-nav .nav-link.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #fff;
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

/* Modern Totals Card */
.totals-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.total-metric-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.total-metric-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.5s;
}

.total-metric-card:hover::before {
    left: 100%;
}

.total-metric-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.metric-header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
}

.metric-icon {
    width: 50px;
    height: 50px;
    border-radius: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-size: 1.5rem;
}

.metric-icon.planned {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.metric-icon.realised {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
}

.metric-title {
    font-size: 0.9rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.metric-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #fff;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
}

.metric-subtitle {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.85rem;
}

/* Modern Activity Group Card */
.modern-activity-section {
    margin: 2rem 0;
}

.modern-activity-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    margin-bottom: 2rem;
    overflow: hidden;
    transition: all 0.3s ease;
}

.modern-activity-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.activity-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1.5rem 2rem;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.activity-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
}

.activity-title i {
    margin-right: 0.75rem;
    opacity: 0.9;
}

.activity-badge {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
}

/* Modern Table Styling */
.modern-table-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0 0 20px 20px;
    overflow: hidden;
}

.modern-action-table {
    width: 100%;
    border-collapse: collapse;
    background: transparent;
}

.modern-action-table thead {
    background: rgba(255, 255, 255, 0.1);
}

.modern-action-table th {
    padding: 1.2rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.9);
    text-transform: uppercase;
    font-size: 0.85rem;
    letter-spacing: 0.5px;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    text-align: center;
}

.modern-action-table th:first-child {
    text-align: left;
}

.modern-action-table th:last-child {
    text-align: right;
}

.modern-action-table td {
    padding: 1rem 1.2rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
    transition: all 0.3s ease;
}

.modern-action-table tbody tr:hover {
    background: rgba(255, 255, 255, 0.05);
}

.activity-name-cell {
    font-weight: 600;
    font-size: 1rem;
    color: #fff;
}

.framework-label-cell {
    font-weight: 500;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
}

.editable-plan-cell {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    text-align: center;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 80px;
}

.editable-plan-cell:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
}

.editable-plan-cell:focus {
    outline: 2px solid #667eea;
    background: rgba(102, 126, 234, 0.2);
}

.total-cost-cell {
    font-weight: 700;
    color: #fff;
    text-align: right;
}

.subtotal-row {
    background: rgba(255, 255, 255, 0.1);
    font-weight: 600;
}

.subtotal-row td {
    padding: 1.2rem;
    border-top: 2px solid rgba(255, 255, 255, 0.2);
}

/* Empty State Styling */
.empty-state-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 3rem;
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.empty-state-icon {
    font-size: 4rem;
    color: rgba(255, 255, 255, 0.3);
    margin-bottom: 1rem;
}

.empty-state-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 1rem;
}

.empty-state-text {
    color: rgba(255, 255, 255, 0.6);
    font-size: 1rem;
    max-width: 400px;
    margin: 0 auto;
}

/* Status Animations */
.saving {
    background: rgba(255, 193, 7, 0.3) !important;
    animation: pulse 1.5s infinite;
}

.success {
    background: rgba(40, 167, 69, 0.3) !important;
    transition: background-color 1s ease-out;
}

.error {
    background: rgba(220, 53, 69, 0.3) !important;
}

@@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
}

/* Responsive Design */
@@media (max-width: 768px) {
    .totals-section {
        grid-template-columns: 1fr;
    }
    
    .modern-action-table {
        font-size: 0.85rem;
    }
    
    .modern-action-table th,
    .modern-action-table td {
        padding: 0.75rem 0.5rem;
    }
    
    .metric-value {
        font-size: 2rem;
    }
}

</style>

</div>

<!-- Totals Section -->
<div class="totals-section">
    <div class="total-metric-card">
        <div class="metric-header">
            <div class="metric-icon planned">
                <i class="fas fa-chart-line"></i>
            </div>
            <div>
                <div class="metric-title">@Localizer["Total Planned"]</div>
                <div class="metric-subtitle">@Localizer["Estimated Budget"]</div>
            </div>
        </div>
        <div class="metric-value">
            @projectTotalPlannedCost.ToString("C0")
        </div>
    </div>
    
    <div class="total-metric-card">
        <div class="metric-header">
            <div class="metric-icon realised">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div>
                <div class="metric-title">@Localizer["Total Realised"]</div>
                <div class="metric-subtitle">@Localizer["Actual Spending"]</div>
            </div>
        </div>
        <div class="metric-value">
            @projectTotalRealisedCost.ToString("C0")
        </div>
    </div>
</div>

<!-- Activity Plans Section -->
<div class="modern-activity-section">

@foreach (var activityGroup in Model)
{
    @if (@activityGroup.ActivityType == "DisbursementPerformance")
    {
        <div class="modern-activity-card">
            <div class="activity-header">
                <div class="activity-title">
                    <i class="fas fa-wallet"></i>
                    @Localizer[@activityGroup.ActivityType]
                </div>
                <div class="activity-badge">
                    @activityGroup.Activities.Count @Localizer["Activities"]
                </div>
            </div>
            
            <div class="modern-table-container">
                <table class="modern-action-table">
                    <thead>
                        <tr>
                            <th>@Localizer["Activity"]</th>
                            <th>@Localizer["Framework"]</th>
                            @for (int i = 1; i <= maxPlans; i++)
                            {
                                <th>@Localizer["Plan"] @i</th>
                            }
                            <th>@Localizer["Total"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var activity in activityGroup.Activities)
                        {
                            <tr>
                                <td rowspan="3" class="activity-name-cell align-middle">
                                    @{
                                        var activityName = activity.ActivityName;
                                        string displayName = activityName;

                                        if (activityName.Contains("-"))
                                        {
                                            var parts = activityName.Split(new[] { '-' }, 2);
                                            if (parts.Length == 2)
                                            {
                                                var prefix = parts[0];
                                                var keyToLocalize = parts[1];
                                                var localizedValue = @Localizer[keyToLocalize];
                                                displayName = $"{prefix}-{localizedValue.Value}";
                                            }
                                        }
                                    }
                                    @displayName
                                </td>
                                <td class="framework-label-cell"></td>
                                @foreach (var plan in activity.Plans)
                                {
                                    <td></td>
                                }
                                @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                {
                                    <td></td>
                                }
                                <td class="total-cost-cell">-</td>
                            </tr>
                            <tr>
                                <td class="framework-label-cell">@Localizer["Planned"]</td>
                                @foreach (var plan in activity.Plans)
                                {
                                    <td class="editable-plan-cell" contenteditable="true"
                                        data-plan-code="@plan.PlanCode"
                                        data-value-type="Planned">
                                        @plan.PlannedValue
                                    </td>
                                }
                                @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                {
                                    <td></td>
                                }
                                <td class="total-cost-cell">@activity.TotalEstimatedCost.ToString("N0")</td>
                            </tr>
                            <tr>
                                <td class="framework-label-cell">@Localizer["Realised"]</td>
                                @foreach (var plan in activity.Plans)
                                {
                                    <td class="editable-plan-cell" contenteditable="true"
                                        data-plan-code="@plan.PlanCode"
                                        data-value-type="Realised">
                                        @plan.RealisedValue
                                    </td>
                                }
                                @for (int i = activity.Plans.Count; i < maxPlans; i++)
                                {
                                    <td></td>
                                }
                                <td class="total-cost-cell">@activity.TotalRealisedCost.ToString("N0")</td>
                            </tr>
                        }
                    }
                    <tfoot>
                        <tr class="subtotal-row">
                            <td colspan="2">@Localizer["Subtotal Planned"]</td>
                            @for (int i = 0; i < maxPlans; i++)
                            {
                                <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].PlannedValue : 0)</td>
                            }
                            <td>@activityGroup.Activities.Sum(a => a.TotalEstimatedCost).ToString("N0")</td>
                        </tr>
                        <tr class="subtotal-row">
                            <td colspan="2">@Localizer["Subtotal Realised"]</td>
                            @for (int i = 0; i < maxPlans; i++)
                            {
                                <td>@activityGroup.Activities.Sum(a => a.Plans.Count > i ? a.Plans[i].RealisedValue : 0)</td>
                            }
                            <td>@activityGroup.Activities.Sum(a => a.TotalRealisedCost).ToString("N0")</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }
}

</div>

@if (!Model.Any())
{
    <div class="empty-state-card">
        <div class="empty-state-icon">
            <i class="fas fa-clipboard-list"></i>
        </div>
        <h3 class="empty-state-title">@Localizer["No Action Plans"]</h3>
        <p class="empty-state-text">
            @Localizer["No action plans have been created for this project yet. Start by creating your first action plan to track project activities."]
        </p>
    </div>
}

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            let originalValue;

            // Use event delegation for dynamically added content if needed in the future
            $('body').on('focus', '.editable-plan-cell', function () {
                originalValue = $(this).text().trim();
                // Select all text in the cell for easy editing
                //document.execCommand('selectAll', false, null);
            });

            $('body').on('blur', '.editable-plan-cell', function () {
                var cell = $(this);
                var newValue = cell.text().trim();

                // If value hasn't changed, do nothing
                if (newValue === originalValue) {
                    return;
                }

                // Basic validation: ensure the value is a number
                if (isNaN(newValue) || newValue === '') {
                    cell.addClass('error');
                    cell.text(originalValue); // Revert to original value
                    // Optionally show a more specific alert
                    // alert("Invalid input. Please enter a number.");
                    setTimeout(() => cell.removeClass('error'), 1500);
                    return;
                }

                var planCode = cell.data('plan-code');
                var valueType = cell.data('value-type');

                cell.removeClass('success error').addClass('saving');

                $.ajax({
                    url: '@Url.Action("UpdatePlanValue", "Plans")',
                    type: 'POST',
                    data: {
                        planCode: planCode,
                        valueType: valueType,
                        newValue: newValue
                    },
                    success: function (response) {
                        if (response.success) {
                            // On success, simply reload the page to ensure all calculations and totals are updated from the server.
                            // This is the most reliable way to reflect the change everywhere.
                            location.reload();
                        } else {
                            cell.removeClass('saving').addClass('error');
                            cell.text(originalValue); // Revert on failure
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        cell.removeClass('saving').addClass('error');
                        cell.text(originalValue); // Revert on AJAX error
                        alert('A server error occurred: ' + textStatus + ' - ' + errorThrown);
                    }
                });
            });

            // Allow Enter key to function like Tab (blur)
            $('body').on('keydown', '.editable-plan-cell', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    $(this).blur();
                }
            });
        });
    </script>