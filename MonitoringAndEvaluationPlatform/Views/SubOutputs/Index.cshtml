@model IEnumerable<MonitoringAndEvaluationPlatform.Models.SubOutput>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "SubOutputs";
    Layout = "~/Views/Shared/_ResultsFrameworkLayout.cshtml";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-0">@Localizer["SubOutputs Management"]</h4>
            <p class="text-muted mb-0">@Localizer["View and manage all suboutput performance metrics"]</p>
        </div>
        <div class="d-flex flex-wrap gap-2">
            @if (ViewBag.SelectedOutputCode != null)
            {
  
                <button class="btn btn-success me-2" type="button" id="toggleCreateForm">
                    <i class="fas fa-plus me-2"></i>@Localizer["Create New SubOutput"]
                </button>
                <a asp-action="AdjustWeights" asp-route-outputCode="@ViewBag.SelectedOutputCode" class="btn btn-warning">
                    <i class="fas fa-balance-scale me-2"></i>@Localizer["Adjust Weights"]
                </a>
            }
            else
            {
                <a asp-action="Create" asp-route-id="@ViewBag.SelectedOutputCode" class="btn btn-success">
                    <i class="fas fa-plus me-2"></i>Create New
                </a>
            }
           
        </div>
    </div>
    <!-- Collapsible Outcome Creation Form -->
    <div id="createSubOutcomeForm" class="card shadow-sm mb-4" style="display:none;">
        <div class="card-body">
            <form asp-action="Create" method="post">
                <input type="hidden" name="OutputCode" value="@ViewBag.SelectedOutputCode" />
                <div class="mb-3">
                    <label for="Name" class="form-label">Outcome Name</label>
                    <input type="text" class="form-control" id="Name" name="Name" required />
                </div>
                <!-- Add other fields as needed -->

                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-2"></i>@Localizer["Save SubOutput"]
                </button>
            </form>
        </div>
    </div>
   



    <!-- SubOutputs Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>@Localizer["SubOutput Name"]</th>
                            <th>@Localizer["Weight"]</th>
                            <th>@Localizer["Indicators Performance"]</th>
                            <th>@Localizer["Disbursement Performance"]</th>
                            @* <th>@Localizer["Field Monitoring"]</th> *@
                           @*  <th>@Localizer["Impact Assessment"]</th> *@
                            <th>@Localizer["Output"]</th>
                            <th class="text-end">@Localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                            string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                            string fieldMonitoringClass = ProgressBarHelper.GetProgressBarClass(item.FieldMonitoring);
                            string impactAssessmentClass = ProgressBarHelper.GetProgressBarClass(item.ImpactAssessment);
                            double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                            <tr id="subOutput-row-@item.Code">
                                <td>
                                    <span id="fw-name-@item.Code" class="fw-name-view">
                                        <a style="color:#fff" asp-controller="Indicators" asp-action="Index"
                                           asp-route-frameworkCode="@item.Output.Outcome.FrameworkCode"
                                           asp-route-subOutputCode="@item.Code"
                                           class="text-decoration-none">
                                            <strong>@item.Name</strong>                                  
                                        </a>
                                    </span>
                                    <input type="text" id="fw-name-input-@item.Code" class="form-control form-control-sm fw-name-edit d-none"
                                           value="@item.Name" />
                                </td>
                                <td>@item.Weight</td>
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))
                                </td>
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                                </td>
                                @*
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.FieldMonitoring, fieldMonitoringClass))
                                </td>
                              <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.ImpactAssessment, impactAssessmentClass))
                                </td> *@
                                <td>
                                    <a style="color:#fff" href="/Outputs/Index/@item.OutputCode" class="text-decoration-none">@item.Output.Name</a>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                      @*   <a asp-action="Details" asp-route-id="@item.Code" class="btn btn-sm btn-outline-primary" title="View">
                                            <i class="fas fa-eye"></i>
                                        </a> *@
                                        <button class="btn btn-sm btn-outline-warning"
                                                id="edit-btn-@item.Code"
                                                onclick="toggleSubOutputEdit(@item.Code,@item.Output.Outcome.FrameworkCode)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick="confirmSubOutputDelete(@item.Code)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                  @*       <a asp-action="Edit" asp-route-id="@item.Code" class="btn btn-sm btn-outline-warning" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Code" class="btn btn-sm btn-outline-danger" title="Delete">
                                            <i class="fas fa-trash-alt"></i>
                                        </a> *@
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript to toggle form -->
<script>
    document.getElementById('toggleCreateForm').addEventListener('click', function () {
             const form = document.getElementById('createSubOutcomeForm');
             form.style.display = form.style.display === 'none' ? 'block' : 'none';
         });

    function toggleSubOutputEdit(code,frameworkCode) {
        const viewSpan = $(`#fw-name-${code}`);
        const input = $(`#fw-name-input-${code}`);
        const button = $(`#edit-btn-${code}`);

        const isEditing = input.hasClass('d-none') === false;

        if (isEditing) {
            // Save via AJAX
            const newName = input.val();

            $.ajax({
                url: `/SubOutputs/UpdateName`,
                type: 'POST',
                data: { id: code, name: newName },
                success: function () {
                    viewSpan.html(`<a href="/Indicators?subOutputCode=${code}&frameworkCode=${frameworkCode}" class="text-decoration-none"><strong>${newName}</strong></a>`);
                    input.addClass('d-none');
                    viewSpan.removeClass('d-none');
                    button.html('<i class="fas fa-edit"></i>');
                    button.removeClass('btn-success').addClass('btn-outline-warning');
                    Swal.fire('Saved!', 'Output name updated.', 'success');
                },
                error: function () {
                    Swal.fire('Error', 'Could not update name.', 'error');
                }
            });
        } else {
            // Enter edit mode
            input.removeClass('d-none');
            viewSpan.addClass('d-none');
            button.html('<i class="fas fa-save"></i>');
            button.removeClass('btn-outline-warning').addClass('btn-success');
        }
    }
            function confirmSubOutputDelete(code) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'This will delete the suboutputs!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/SubOutputs/DeleteConfirmed/${code}`,
                        type: 'POST',
                        success: function () {
                            $(`#subOutput-row-${code}`).fadeOut();
                            Swal.fire('Deleted!', 'SubOutput has been deleted.', 'success');
                        },
                        error: function () {
                            Swal.fire('Error', 'Could not delete output.', 'error');
                        }
                    });
                }
            });
        }

</script>
<style>
    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }

    .progress {
        height: 24px;
        border-radius: 4px;
    }

    .progress-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .btn-group .btn {
        padding: 0.25rem 0.5rem;
    }

    .card-header {
        font-weight: 600;
    }

    .table-responsive {
        overflow-x: hidden;
    }
</style>
