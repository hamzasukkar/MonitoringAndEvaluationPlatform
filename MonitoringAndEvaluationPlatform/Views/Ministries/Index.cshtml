@model IEnumerable<MonitoringAndEvaluationPlatform.Models.Ministry>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
<head>
    <script src="~/lib/jquery/dist/jquery.js"></script>
</head>
@{
    ViewData["Title"] = "Ministries";
    Layout = "~/Views/Shared/_SetUpLayout.cshtml";
}

<div class="container-fluid">
    @await Html.PartialAsync("_ManagementNavigation")

    <!-- Inline Create Form -->
    <div class="card mb-4 border-primary">
        <div class="card-header bg-primary text-white">
            <strong>@Localizer["Add New Ministry"]</strong>
        </div>
        <div class="card-body">
            <form id="createMinistryForm" class="row g-3">
                @Html.AntiForgeryToken()

                <div class="col-md-5">
                    <label for="MinistryDisplayName" class="form-label">@Localizer["Ministry Display Name"]</label>
                    <input type="text" name="MinistryDisplayName" class="form-control" required />
                </div>

                <div class="col-md-4">
                    <label for="MinistryUserName" class="form-label">@Localizer["Ministry User Name"]</label>
                    <input type="text" name="MinistryUserName" class="form-control" />
                </div>

                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-success w-100">
                        <i class="fas fa-plus-circle me-1"></i> @Localizer["Add Ministry"]
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>@Localizer["Ministry Display Name"]</th>
                            <th>@Localizer["Ministry User Name"]</th>
                            <th>@Localizer["Indicators Performance"]</th>
                            <th>@Localizer["Disbursement Performance"]</th>
                            <th class="text-end">@Localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody id="ministriesTableBody">
                        @foreach (var item in Model)
                        {
                            string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                            string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                            double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                            <tr id="ministry-row-@item.Code">
                                <td>
                                    <span id="ministry-displayname-@item.Code" class="ministry-displayname-view">
                                        @item.MinistryDisplayName
                                    </span>
                                    <input type="text" id="ministry-displayname-input-@item.Code" class="form-control form-control-sm ministry-displayname-edit d-none" value="@item.MinistryDisplayName" />
                                </td>
                                <td>
                                    <span id="ministry-username-@item.Code" class="ministry-username-view">
                                        @item.MinistryUserName
                                    </span>
                                    <input type="text" id="ministry-username-input-@item.Code" class="form-control form-control-sm ministry-username-edit d-none" value="@item.MinistryUserName" />
                                </td>
                                <td title="@Localizer["Indicators Performance"]: @IndicatorsPerformance%">
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))
                                </td>
                                <td title="@Localizer["Disbursement Performance"]: @item.DisbursementPerformance%">
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-warning"
                                                id="edit-btn-@item.Code"
                                                onclick="toggleMinistryEdit(@item.Code)" title="@Localizer["Edit"]">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" title="@Localizer["Delete"]"
                                                onclick="deleteMinistry(@item.Code)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Styles -->
<style>
    .editable-field {
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
        min-width: 100px;
        display: inline-block;
    }

    .editable-field:hover {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }

    .editing .editable-field {
        background-color: #fff;
        border: 1px solid #007bff;
    }

    .edit-input {
        width: 100%;
        border: 1px solid #007bff;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 0.9rem;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }
</style>

<script>
$(document).ready(function() {

// Create Ministry Form Submission
$('#createMinistryForm').on('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    
    $.ajax({
        url: '@Url.Action("CreateInline")',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                // Add new row to table
                const newRow = `
                    <tr id="ministry-row-${response.ministry.code}">
                        <td>
                            <span id="ministry-displayname-${response.ministry.code}" class="ministry-displayname-view">
                                ${response.ministry.ministryDisplayName}
                            </span>
                            <input type="text" id="ministry-displayname-input-${response.ministry.code}" class="form-control form-control-sm ministry-displayname-edit d-none" value="${response.ministry.ministryDisplayName}" />
                        </td>
                        <td>
                            <span id="ministry-username-${response.ministry.code}" class="ministry-username-view">
                                ${response.ministry.ministryUserName}
                            </span>
                            <input type="text" id="ministry-username-input-${response.ministry.code}" class="form-control form-control-sm ministry-username-edit d-none" value="${response.ministry.ministryUserName}" />
                        </td>
                        <td title="Indicators Performance: 0%">
                            <div class="progress" style="height: 24px; border-radius: 4px;">
                                <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                            </div>
                        </td>
                        <td title="Disbursement Performance: 0%">
                            <div class="progress" style="height: 24px; border-radius: 4px;">
                                <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                            </div>
                        </td>
                        <td class="text-end">
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-warning" id="edit-btn-${response.ministry.code}" onclick="toggleMinistryEdit(${response.ministry.code})" title="@Localizer["Edit"]">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" title="@Localizer["Delete"]" onclick="deleteMinistry(${response.ministry.code})">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    </tr>`;
                
                $('#ministriesTableBody').append(newRow);
                $('#createMinistryForm')[0].reset();
                
                Swal.fire({
                    icon: 'success',
                    title: '@Localizer["Success!"]',
                    text: '@Localizer["Ministry created successfully"]',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                Swal.fire('Error', response.message, 'error');
            }
        },
        error: function() {
            Swal.fire('Error', '@Localizer["An error occurred while creating the ministry"]', 'error');
        }
    });
});

// Inline Editing
$(document).on('click', '.editable-field', function() {
    if ($(this).hasClass('editing')) return;
    
    const $this = $(this);
    const originalValue = $this.text().trim();
    const field = $this.data('field');
    const id = $this.data('id');
    
    $this.addClass('editing');
    $this.html(`<input type="text" class="edit-input" value="${originalValue}" data-original="${originalValue}">`);
    
    const $input = $this.find('.edit-input');
    $input.focus().select();
    
    // Save on Enter or blur
    $input.on('blur keypress', function(e) {
        if (e.type === 'keypress' && e.which !== 13) return;
        
        const newValue = $(this).val().trim();
        const originalValue = $(this).data('original');
        
        if (newValue === originalValue) {
            // No change
            $this.removeClass('editing').text(originalValue);
            return;
        }
        
        if (newValue === '') {
            Swal.fire('Error', '@Localizer["Value cannot be empty"]', 'error');
            $this.removeClass('editing').text(originalValue);
            return;
        }
        
        // Save changes
        $.ajax({
            url: '@Url.Action("InlineEdit")',
            type: 'POST',
            data: {
                id: id,
                field: field,
                value: newValue
            },
            success: function(response) {
                if (response.success) {
                    $this.removeClass('editing').text(newValue);
                    Swal.fire({
                        icon: 'success',
                        title: '@Localizer["Updated!"]',
                        text: '@Localizer["Field updated successfully"]',
                        timer: 1500,
                        showConfirmButton: false
                    });
                } else {
                    $this.removeClass('editing').text(originalValue);
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function() {
                $this.removeClass('editing').text(originalValue);
                Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
            }
        });
    });
    
    // Cancel on Escape
    $input.on('keypress', function(e) {
        if (e.which === 27) { // Escape key
            $this.removeClass('editing').text(originalValue);
        }
    });
});

// Delete Ministry
function deleteMinistry(id) {
    console.log('Delete ministry called with id:', id);
    Swal.fire({
        title: '@Localizer["Are you sure?"]',
        text: "@Localizer["You won't be able to revert this!"]",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: '@Localizer["Yes, delete it!"]',
        cancelButtonText: '@Localizer["Cancel"]'
    }).then((result) => {
        console.log('SweetAlert result:', result);
        if (result.isConfirmed) {
            console.log('Sending delete request for id:', id);
            $.ajax({
                url: '@Url.Action("InlineDelete")',
                type: 'POST',
                data: { id: id },
                success: function(response) {
                    console.log('Delete response:', response);
                    if (response.success) {
                        $(`#ministry-row-${id}`).fadeOut(function() {
                            $(this).remove();
                        });
                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Deleted!"]',
                            text: '@Localizer["Ministry has been deleted."]',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message || 'Unknown error', 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Delete error:', xhr, status, error);
                    Swal.fire('Error', '@Localizer["An error occurred while deleting"]', 'error');
                }
            });
        }
    });
}


// Auto-generate username from display name
$('input[name="MinistryDisplayName"]').on('input', function() {
    const displayName = $(this).val();
    const username = displayName.replace(/\s+/g, '').toLowerCase();
    $('input[name="MinistryUserName"]').val(username);
});

}); // End document ready

// Toggle Ministry Inline Edit - Global function
function toggleMinistryEdit(code) {
    const displayNameSpan = $(`#ministry-displayname-${code}`);
    const displayNameInput = $(`#ministry-displayname-input-${code}`);
    const userNameSpan = $(`#ministry-username-${code}`);
    const userNameInput = $(`#ministry-username-input-${code}`);
    const button = $(`#edit-btn-${code}`);

    const isEditing = displayNameInput.hasClass('d-none') === false;

    if (isEditing) {
        // Save via AJAX
        const newDisplayName = displayNameInput.val();
        const newUserName = userNameInput.val();

        $.ajax({
            url: '@Url.Action("QuickUpdate")',
            type: 'POST',
            data: { 
                id: code, 
                displayName: newDisplayName,
                userName: newUserName
            },
            success: function (response) {
                if (response.success) {
                    displayNameSpan.text(newDisplayName);
                    userNameSpan.text(newUserName);
                    displayNameInput.addClass('d-none');
                    userNameInput.addClass('d-none');
                    displayNameSpan.removeClass('d-none');
                    userNameSpan.removeClass('d-none');
                    button.html('<i class="fas fa-edit"></i>');
                    button.removeClass('btn-success').addClass('btn-outline-warning');
                    Swal.fire({
                        icon: 'success',
                        title: '@Localizer["Updated!"]',
                        text: '@Localizer["Ministry updated successfully"]',
                        timer: 1500,
                        showConfirmButton: false
                    });
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function() {
                Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
            }
        });
    } else {
        // Enter edit mode
        displayNameInput.removeClass('d-none');
        userNameInput.removeClass('d-none');
        displayNameSpan.addClass('d-none');
        userNameSpan.addClass('d-none');
        button.html('<i class="fas fa-save"></i>');
        button.removeClass('btn-outline-warning').addClass('btn-success');
        displayNameInput.focus();
    }
}
</script>


