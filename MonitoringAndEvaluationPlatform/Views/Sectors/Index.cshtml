@model IEnumerable<MonitoringAndEvaluationPlatform.Models.Sector>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    var requestCultureFeature = Context.Features.Get<IRequestCultureFeature>();
    var culture = requestCultureFeature.RequestCulture.Culture.Name;
}

@{
    ViewData["Title"] = "Sectors";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="page-title-section">
            <div class="page-breadcrumb">
                <a href="@Url.Action("Index", "Home")" class="breadcrumb-link">
                    <i class="fas fa-home"></i>
                    @Localizer["Home"]
                </a>
                <i class="fas fa-chevron-right breadcrumb-separator"></i>
                <span class="current-page">@Localizer["Sectors"]</span>
            </div>
            <h1 class="page-title">@Localizer["Sector Management"]</h1>
            <p class="page-description">Manage project sectors and track their performance</p>
        </div>
    </div>
</div>

@await Html.PartialAsync("_ManagementNavigation")

<!-- Quick Add Section -->
<div class="quick-add-section">
    <div class="quick-add-card">
        <div class="quick-add-header">
            <div class="quick-add-icon">
                <i class="fas fa-industry"></i>
            </div>
            <div>
                <h3 class="quick-add-title">@Localizer["Add New Sector"]</h3>
                <p class="quick-add-subtitle">Create a new project sector entry</p>
            </div>
        </div>
        <form id="createSectorForm" class="quick-add-form">
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="form-group">
                    <label for="EN_Name" class="form-label">
                        <i class="fas fa-globe me-1"></i>@Localizer["English Name"]
                    </label>
                    <input type="text" name="EN_Name" class="modern-input" required placeholder="Enter English name" />
                </div>
                <div class="form-group">
                    <label for="AR_Name" class="form-label">
                        <i class="fas fa-language me-1"></i>@Localizer["Arabic Name"]
                    </label>
                    <input type="text" name="AR_Name" class="modern-input" required placeholder="Enter Arabic name" dir="rtl" />
                </div>
                <div class="form-group action-group">
                    <button type="submit" class="modern-btn primary">
                        <i class="fas fa-plus-circle me-2"></i>@Localizer["Create Sector"]
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Sectors List Section -->
<div class="admin-list-section">
    <div class="admin-card">
        <div class="admin-header">
            <div class="header-title">
                <i class="fas fa-industry"></i>
                <span>@Localizer["Sectors List"]</span>
            </div>
            @if (Model.Any())
            {
                <div class="header-badge">
                    <span class="count-badge">@Model.Count()</span>
                </div>
            }
        </div>

        <div class="admin-content">
            @if (Model.Any())
            {
                <div class="admin-table-container">
                    <table class="modern-admin-table">
                        <thead>
                            <tr>
                                <th><i class="fas fa-globe me-1"></i>@Localizer["English Name"]</th>
                                <th><i class="fas fa-language me-1"></i>@Localizer["Arabic Name"]</th>
                                <th><i class="fas fa-chart-line me-1"></i>@Localizer["Indicators Performance"]</th>
                                <th><i class="fas fa-dollar-sign me-1"></i>@Localizer["Disbursement Performance"]</th>
                                <th><i class="fas fa-cogs me-1"></i>@Localizer["Actions"]</th>
                            </tr>
                        </thead>
                        <tbody id="sectorsTableBody">
                            @foreach (var item in Model)
                            {
                                string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                                string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                                double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                                <tr id="sector-row-@item.Code" class="admin-table-row">
                                    <td class="name-cell">
                                        <div class="cell-content">
                                            <div class="name-display">
                                                <span id="sector-enname-@item.Code" class="sector-enname-view name-text">
                                                    @item.EN_Name
                                                </span>
                                                <input type="text" id="sector-enname-input-@item.Code" class="modern-input-sm sector-enname-edit d-none" value="@item.EN_Name" />
                                            </div>
                                        </div>
                                    </td>
                                    <td class="name-cell">
                                        <div class="cell-content">
                                            <div class="name-display">
                                                <span id="sector-arname-@item.Code" class="sector-arname-view name-text arabic-text" dir="rtl">
                                                    @item.AR_Name
                                                </span>
                                                <input type="text" id="sector-arname-input-@item.Code" class="modern-input-sm sector-arname-edit d-none" value="@item.AR_Name" dir="rtl" />
                                            </div>
                                        </div>
                                    </td>
                                    <td class="performance-cell">
                                        <div class="modern-progress-bar">
                                            <div class="progress-track">
                                                <div class="progress-fill @indicatorsClass.ToLower()" style="width: @IndicatorsPerformance%"></div>
                                            </div>
                                            <span class="progress-text">@IndicatorsPerformance%</span>
                                        </div>
                                    </td>
                                    <td class="performance-cell">
                                        <div class="modern-progress-bar">
                                            <div class="progress-track">
                                                <div class="progress-fill @disbursementClass.ToLower()" style="width: @item.DisbursementPerformance%"></div>
                                            </div>
                                            <span class="progress-text">@Math.Round(item.DisbursementPerformance, 0)%</span>
                                        </div>
                                    </td>
                                    <td class="actions-cell">
                                        <div class="action-buttons">
                                            <button class="action-btn edit"
                                                    id="edit-btn-@item.Code"
                                                    onclick="toggleSectorEdit(@item.Code)" title="@Localizer["Edit"]">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="action-btn delete" title="@Localizer["Delete"]"
                                                    onclick="deleteSector(@item.Code)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-industry"></i>
                    </div>
                    <h3 class="empty-state-title">@Localizer["No Sectors Found"]</h3>
                    <p class="empty-state-text">
                        @Localizer["No sectors have been added yet. Use the form above to add your first sector."]
                    </p>
                </div>
            }
        </div>
    </div>
</div>

<style>
/* Modern Sectors Styling - Reusing administrative styles */

.arabic-text {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: right;
}

/* Additional sector-specific styling can be added here if needed */
</style>

<script>
    $(document).ready(function() {

        // Create Sector Form Submission
        $('#createSectorForm').on('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);

            $.ajax({
                url: '@Url.Action("CreateInline")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        // Add new row to table
                        const newRow = `
                            <tr id="sector-row-${response.sector.code}">
                                <td>
                                    <span id="sector-enname-${response.sector.code}" class="sector-enname-view">
                                ${response.sector.eN_Name}
                                    </span>
                            <input type="text" id="sector-enname-input-${response.sector.code}" class="form-control form-control-sm sector-enname-edit d-none" value="${response.sector.eN_Name}" />
                                </td>
                                <td>
                                    <span id="sector-arname-${response.sector.code}" class="sector-arname-view">
                                ${response.sector.aR_Name}
                                    </span>
                            <input type="text" id="sector-arname-input-${response.sector.code}" class="form-control form-control-sm sector-arname-edit d-none" value="${response.sector.aR_Name}" />
                                </td>
                                <td title="Indicators Performance: 0%">
                                    <div class="progress" style="height: 24px; border-radius: 4px;">
                                        <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                                    </div>
                                </td>
                                <td title="Disbursement Performance: 0%">
                                    <div class="progress" style="height: 24px; border-radius: 4px;">
                                        <div class="progress-bar bg-secondary" role="progressbar" style="width: 0%;">0%</div>
                                    </div>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-warning" id="edit-btn-${response.sector.code}" onclick="toggleSectorEdit(${response.sector.code})" title="@Localizer["Edit"]">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" title="@Localizer["Delete"]" onclick="deleteSector(${response.sector.code})">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>`;

                        $('#sectorsTableBody').append(newRow);
                        $('#createSectorForm')[0].reset();

                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Success!"]',
                            text: '@Localizer["Sector created successfully"]',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', '@Localizer["An error occurred while creating the sector"]', 'error');
                }
            });
        });

        // Inline Editing
        $(document).on('click', '.editable-field', function() {
            if ($(this).hasClass('editing')) return;

            const $this = $(this);
            const originalValue = $this.text().trim();
            const field = $this.data('field');
            const id = $this.data('id');

            $this.addClass('editing');
            $this.html(`<input type="text" class="edit-input" value="${originalValue}" data-original="${originalValue}">`);

            const $input = $this.find('.edit-input');
            $input.focus().select();

            // Save on Enter or blur
            $input.on('blur keypress', function(e) {
                if (e.type === 'keypress' && e.which !== 13) return;

                const newValue = $(this).val().trim();
                const originalValue = $(this).data('original');

                if (newValue === originalValue) {
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                if (newValue === '') {
                    Swal.fire('Error', '@Localizer["Value cannot be empty"]', 'error');
                    $this.removeClass('editing').text(originalValue);
                    return;
                }

                // Save changes
                $.ajax({
                    url: '@Url.Action("InlineEdit")',
                    type: 'POST',
                    data: {
                        id: id,
                        field: field,
                        value: newValue
                    },
                    success: function(response) {
                        if (response.success) {
                            $this.removeClass('editing').text(newValue);
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Updated!"]',
                                text: '@Localizer["Field updated successfully"]',
                                timer: 1500,
                                showConfirmButton: false
                            });
                        } else {
                            $this.removeClass('editing').text(originalValue);
                            Swal.fire('Error', response.message, 'error');
                        }
                    },
                    error: function() {
                        $this.removeClass('editing').text(originalValue);
                        Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                    }
                });
            });

            // Cancel on Escape
            $input.on('keypress', function(e) {
                if (e.which === 27) { // Escape key
                    $this.removeClass('editing').text(originalValue);
                }
            });
        });

    }); // End document ready

    // Delete Sector - Global function
    function deleteSector(id) {
        console.log('Delete sector called with id:', id);
        Swal.fire({
            title: '@Localizer["Are you sure?"]',
            text: "@Localizer["You won't be able to revert this!"]",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '@Localizer["Yes, delete it!"]',
            cancelButtonText: '@Localizer["Cancel"]'
        }).then((result) => {
            console.log('SweetAlert result:', result);
            if (result.isConfirmed) {
                console.log('Sending delete request for id:', id);
                $.ajax({
                    url: '@Url.Action("InlineDelete")',
                    type: 'POST',
                    data: { id: id },
                    success: function(response) {
                        console.log('Delete response:', response);
                        if (response.success) {
                            $(`#sector-row-${id}`).fadeOut(function() {
                                $(this).remove();
                            });
                            Swal.fire({
                                icon: 'success',
                                title: '@Localizer["Deleted!"]',
                                text: '@Localizer["Sector has been deleted."]',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire('Error', response.message || 'Unknown error', 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Delete error:', xhr, status, error);
                        Swal.fire('Error', '@Localizer["An error occurred while deleting"]', 'error');
                    }
                });
            }
        });
    }

    // Toggle Sector Inline Edit - Global function
    function toggleSectorEdit(code) {
        const enNameSpan = $(`#sector-enname-${code}`);
        const enNameInput = $(`#sector-enname-input-${code}`);
        const arNameSpan = $(`#sector-arname-${code}`);
        const arNameInput = $(`#sector-arname-input-${code}`);
        const button = $(`#edit-btn-${code}`);

        const isEditing = enNameInput.hasClass('d-none') === false;

        if (isEditing) {
            // Save via AJAX
            const newEnName = enNameInput.val();
            const newArName = arNameInput.val();

            $.ajax({
                url: '@Url.Action("QuickUpdate")',
                type: 'POST',
                data: {
                    id: code,
                    enName: newEnName,
                    arName: newArName
                },
                success: function (response) {
                    if (response.success) {
                        enNameSpan.text(newEnName);
                        arNameSpan.text(newArName);
                        enNameInput.addClass('d-none');
                        arNameInput.addClass('d-none');
                        enNameSpan.removeClass('d-none');
                        arNameSpan.removeClass('d-none');
                        button.html('<i class="fas fa-edit"></i>');
                        button.removeClass('btn-success').addClass('btn-outline-warning');
                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Sector updated successfully"]',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', '@Localizer["An error occurred while updating"]', 'error');
                }
            });
        } else {
            // Enter edit mode
            enNameInput.removeClass('d-none');
            arNameInput.removeClass('d-none');
            enNameSpan.addClass('d-none');
            arNameSpan.addClass('d-none');
            button.html('<i class="fas fa-save"></i>');
            button.removeClass('btn-outline-warning').addClass('btn-success');
            enNameInput.focus();
        }
    }
</script>