@model List<MonitoringAndEvaluationPlatform.Models.Output>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Outputs";
    Layout = "~/Views/Shared/_ResultsFrameworkLayout.cshtml";
    var selectedOutcomeCode = ViewData["SelectedOutcomeCode"] as int?;
}

<div class="container-fluid">
    <div class="mb-4">
        <h4>@Localizer["Outputs Management"]</h4>
        <p class="text-muted">@Localizer["Add new outputs and monitor performance"]</p>
    </div>

    @if (selectedOutcomeCode != null)
    {
        <div class="mb-3">
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#createOutputForm" aria-expanded="false" aria-controls="createOutputForm">
                <i class="fas fa-plus me-2"></i>@Localizer["New Output"]
            </button>
            <a asp-action="AdjustWeights" asp-route-outcomeCode="@ViewBag.SelectedOutcomeCode" class="btn btn-warning">
                <i class="fas fa-balance-scale me-2"></i>@Localizer["Adjust Weights"]
            </a>
        </div>
    }
    else
    {
        <a asp-action="Create" class="btn btn-success">@Localizer["Create New Output"]</a>
    }

    <div class="collapse" id="createOutputForm">
        <div class="card shadow-sm mb-4">
            <div class="card-header">
                <strong>@Localizer["Create New Output"]</strong>
            </div>
            <div class="card-body">
                <form asp-action="Create" method="post" class="row g-3">
                    <input type="hidden" name="OutcomeCode" value="@selectedOutcomeCode" />

                    <div class="col-md-6">
                        <label class="form-label">@Localizer["Output Name"]</label>
                        <input name="Name" class="form-control" required />
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="fas fa-save me-2"></i>@Localizer["Save Output"]
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Outputs Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>@Localizer["Output Name"]</th>
                            <th>@Localizer["Weight"]</th>
                            <th>@Localizer["Indicators Performance"]</th>
                            <th>@Localizer["Disbursement Performance"]</th>
                            @* <th>@Localizer["Field Monitoring"]</th> *@
                        @*     <th>@Localizer["Impact Assessment"]</th> *@
                            <th>@Localizer["Output Name"]</th>
                            <th class="text-end">@Localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                       @*  @foreach (var item in Model)
                        {
                            <tr id="output-row-@item.Code">
                                <td>
                                    <span id="fw-name-@item.Code" class="fw-name-view">
                                        <a asp-action="Index" asp-controller="SubOutputs" asp-route-outputCode="@item.Code" class="text-decoration-none"><strong>@item.Name</strong></a>
                                    </span>
                                    <input type="text" id="fw-name-input-@item.Code" class="form-control form-control-sm fw-name-edit d-none"
                                           value="@item.Name" />
                                </td>
                                <td>@item.Weight</td>
                                <td>@item.IndicatorsPerformance</td>
                                <td>@item.DisbursementPerformance</td>
                                <td>@item.FieldMonitoring</td>
                                <td>@item.ImpactAssessment</td>
                                <td class="text-end">
                                    <button class="btn btn-sm btn-outline-warning"
                                            id="edit-btn-@item.Code"
                                            onclick="toggleOutputEdit(@item.Code)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                            onclick="confirmOutputDelete(@item.Code)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        } *@
                        @foreach (var item in Model)
                        {
                            string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                            string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                            string fieldMonitoringClass = ProgressBarHelper.GetProgressBarClass(item.FieldMonitoring);
                            string impactAssessmentClass = ProgressBarHelper.GetProgressBarClass(item.ImpactAssessment);
                            double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                            <tr>
                                <td>
                                    <a style="color:#fff" asp-action="Index" asp-controller="SubOutputs" asp-route-outputCode="@item.Code" class="text-decoration-none">
                                        <strong>@item.Name</strong>
                                    </a>
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Weight)
                                </td>
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))
                                </td>
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                                </td>
                                @* 
                                <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.FieldMonitoring, fieldMonitoringClass))
                                </td>
                              <td>
                                    @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.ImpactAssessment, impactAssessmentClass))
                                </td> 
                                *@
                                <td>
                                    <a style="color:#fff"  href="/Outcomes/Index/@item.OutcomeCode" class="text-decoration-none">@item.Outcome.Name</a>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.Code" class="btn btn-sm btn-outline-primary" title="View">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.Code" class="btn btn-sm btn-outline-warning" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Code" class="btn btn-sm btn-outline-danger" title="Delete">
                                            <i class="fas fa-trash-alt"></i>
                                        </a>
                                        <a href="#" class="btn btn-sm btn-outline-success" title="Tree View">
                                            <i class="fas fa-project-diagram"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script>
    const outputToggleBtn = document.querySelector('[data-bs-target="#createOutputForm"]');
    const outputForm = document.getElementById('createOutputForm');

    outputForm.addEventListener('shown.bs.collapse', () => {
        const nameInput = outputForm.querySelector('input[name="Name"]');
        if (nameInput) nameInput.focus();
    });

    function toggleOutputEdit(code) {
        const viewSpan = $(`#fw-name-${code}`);
        const input = $(`#fw-name-input-${code}`);
        const button = $(`#edit-btn-${code}`);

        const isEditing = input.hasClass('d-none') === false;

        if (isEditing) {
            // Save via AJAX
            const newName = input.val();

            $.ajax({
                url: `/Outputs/UpdateName`,
                type: 'POST',
                data: { id: code, name: newName },
                success: function () {
                    viewSpan.html(`<a href="/SubOutputs?outputCode=${code}" class="text-decoration-none"><strong>${newName}</strong></a>`);
                    input.addClass('d-none');
                    viewSpan.removeClass('d-none');
                    button.html('<i class="fas fa-edit"></i>');
                    button.removeClass('btn-success').addClass('btn-outline-warning');
                    Swal.fire('Saved!', 'Output name updated.', 'success');
                },
                error: function () {
                    Swal.fire('Error', 'Could not update name.', 'error');
                }
            });
        } else {
            // Enter edit mode
            input.removeClass('d-none');
            viewSpan.addClass('d-none');
            button.html('<i class="fas fa-save"></i>');
            button.removeClass('btn-outline-warning').addClass('btn-success');
        }
    }
            function confirmOutputDelete(code) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'This will delete the outputs!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/Outputs/DeleteConfirmed/${code}`,
                        type: 'POST',
                        success: function () {
                            $(`#output-row-${code}`).fadeOut();
                            Swal.fire('Deleted!', 'Output has been deleted.', 'success');
                        },
                        error: function () {
                            Swal.fire('Error', 'Could not delete output.', 'error');
                        }
                    });
                }
            });
        }
    
</script>
<style>
    .table-responsive {
        overflow-x: hidden;
    }
</style>