@* @model MonitoringAndEvaluationPlatform.Models.Indicator *@

@model MonitoringAndEvaluationPlatform.ViewModel.LogicalFrameworkIndicatorDetailsViewModel
@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_ResultsFrameworkLayout.cshtml";
    //Layout = null;
}
<!-- Include jQuery -->
@* <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<!-- Include jsTree -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script> *@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

@* <ul>
    @foreach (var node in Model.Hierarchy)
    {
        <li>
            <a href="@Url.Action("Details", node.Type + "s", new { id = node.Code })">
                @node.Name (@node.Type)
            </a>
        </li>
    }
</ul> *@

<div>
    <h4>Indicator</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">Name</dt>
        <dd class="col-sm-4">@Model.LogicalFrameworkIndicator.Name</dd>

        <dt class="col-sm-1">Target</dt>
        <dd class="col-sm-1">@Model.LogicalFrameworkIndicator.Target</dd>

        @* 
        <dt class="col-sm-1">Trend</dt>
        <dd class="col-sm-1">@Model.Indicator.Trend</dd> *@
    </dl>
</div>
<p>
    <a asp-controller="LogicalMeasures" asp-action="Create" asp-route-indicatorCode="@Model.LogicalFrameworkIndicator.IndicatorCode">Create New Measure</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Value</th>
            <th>Value Type</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.logicalMeasures)
        {
            <tr>
                <td>
                    @item.Date.ToString("yyyy-MM-dd")
                </td>

                <td>
                    @item.Value
                </td>
                <td>
                    @item.ValueType
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="card shadow-sm p-4 mb-4">
    <h5 class="mb-3">Indicator Performance Over Time</h5>
    <canvas id="logicalMeasureChart" height="500"></canvas>
</div>

<div>
    <a asp-action="Edit" asp-route-id="@Model?.LogicalFrameworkIndicator.IndicatorCode">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
    <script>
        async function loadChart(indicatorCode) {
        const response = await fetch(`/LogicalFrameworkIndicators/GetLogicalMeasureChartData?indicatorCode=${indicatorCode}`);
            debugger;
            const data = await response.json();
            const real = Array.isArray(data.Real) ? data.Real : [];
            const target = Array.isArray(data.Target) ? data.Target : [];
            const historical = Array.isArray(data.Historical) ? data.Historical : [];

            const ctx = document.getElementById('logicalMeasureChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [...new Set([...data.real, ...data.target].map(p => p.date))],
                    datasets: [
                        {
                            label: 'Real',
                            data: data.real.map(p => ({ x: p.date, y: p.value })),
                            borderColor: 'blue',
                            backgroundColor: 'rgba(0, 0, 255, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Historical',
                            data: data.historical.map(p => ({ x: p.date, y: p.value })),
                            borderColor: 'skyblue',
                            backgroundColor: 'rgba(135,206,235,0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Target',
                            data: data.target.map(p => ({ x: p.date, y: p.value })),
                            borderColor: 'deeppink',
                            backgroundColor: 'rgba(255,20,147,0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                  scales: {
                    x: {
                      type: 'time',
                      time: {
                        unit: 'month',
                        tooltipFormat: 'MMM dd, yyyy'
                      },
                      title: {
                        display: true,
                        text: 'Date'
                      }
                    },
                    y: {
                      title: {
                        display: true,
                        text: 'Value'
                      }
                    }
                  }
                }
                    });
        }

        // Call this with the indicator code you want to chart
        loadChart(@Model.LogicalFrameworkIndicator.IndicatorCode); // Replace 1 with your desired indicator code dynamically if needed
    </script>



