@* @model IEnumerable<MonitoringAndEvaluationPlatform.Models.Framework>
 *@
 @model MonitoringAndEvaluationPlatform.ViewModel.FrameworkFilterViewModel

 @using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Results Frameworks";
    Layout = "~/Views/Shared/_ResultsFrameworkLayout.cshtml";
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.Name;
}


<div class="container-fluid px-4">
@* <div class="container-fluid"> *@
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-0">@Localizer["Results Frameworks"]</h4>
        </div>

        <div class="d-flex align-items-center gap-3">
            <!-- Theme Switcher Card -->
@*             <div class="card border-0 shadow-sm theme-switcher-card">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-palette text-primary"></i>
                            <small class="text-muted ms-2">Style:</small>
                        </div>
                        @await Html.PartialAsync("_ThemeSwitcher")
                    </div>
                </div>
            </div>
 *@
            @if (SignInManager.IsSignedIn(User))
            {
                var user = await UserManager.GetUserAsync(User);
                if (user != null)
                {
                    var roles = await UserManager.GetRolesAsync(user);
                    if (roles.Contains("Admin"))
                    {
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>@Localizer["Create New Framework"]
                        </a>
                    }
                }
            }
        </div>
    </div>

    <!-- Search Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3 align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" name="searchString" class="form-control"
                               placeholder="@Localizer["Search by framework name"]"
                               value="@ViewData["CurrentFilter"]" />
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">@Localizer["Filters"]</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Index" method="get">
                        <!-- Ministry Filter -->
                        @if (!Model.IsMinistryUser)
                        {
                            <div class="mb-4">
                                <h6 class="fw-bold border-bottom pb-2">@Localizer["Ministry"]</h6>
                                <div class="filter-options" style="max-height: 200px; overflow-y: auto;">
                                    @foreach (var ministry in Model.Ministries)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="SelectedMinistries"
                                                   value="@ministry.Code" id="ministry-@ministry.Code"
                                            @(Model.SelectedMinistries.Contains(ministry.Code) ? "checked" : "")>
                                            <label class="form-check-label" for="ministry-@ministry.Code">
                                                @ministry.MinistryDisplayName
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>

                        }


                        <!-- Donor Filter -->
                        <div class="mb-4">
                            <h6 class="fw-bold border-bottom pb-2">@Localizer["Donor"]</h6>
                            <div class="filter-options" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var donor in Model.Donors)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="SelectedDonors"
                                               value="@donor.Code" id="donor-@donor.Code"
                                        @(Model.SelectedDonors.Contains(donor.Code) ? "checked" : "")>
                                        <label class="form-check-label" for="donor-@donor.Code">
                                            @donor.Partner
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Sector Filter -->
                        <div class="mb-4">
                            <h6 class="fw-bold border-bottom pb-2">@Localizer["Sector"]</h6>
                            <div class="filter-options" style="max-height: 200px; overflow-y: auto;">
                                @foreach (var sector in Model.Sectors)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="SelectedSector"
                                               value="@sector.Code" id="donor-@sector.Code"
                                        @(Model.SelectedSector.Contains(sector.Code) ? "checked" : "")>
                                        <label class="form-check-label" for="donor-@sector.Code">
                                            @if (culture.StartsWith("ar"))
                                            {
                                                @sector.AR_Name
                                            }
                                            else
                                            {
                                                @sector.EN_Name
                                            }
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-filter me-2"></i>@Localizer["Apply Filters"]
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-sync-alt me-2"></i>@Localizer["Reset"]
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <a asp-action="Index"
                                           asp-route-sortOrder="@ViewData["NameSortParm"]"
                                           asp-route-searchString="@ViewData["CurrentFilter"]">
                                            @Localizer["Framework Name"]
                                            @if (ViewData["CurrentSort"]?.ToString() == "name_desc")
                                            {
                                                <i class="fas fa-arrow-down"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "")
                                            {
                                                <i class="fas fa-arrow-up"></i>
                                            }
                                        </a>
                                    </th>
                                    <th>
                                        <a asp-action="Index"
                                           asp-route-sortOrder="@ViewData["IndicatorsSortParm"]"
                                           asp-route-searchString="@ViewData["CurrentFilter"]">
                                            @Localizer["Indicators Performance"]
                                            @if (ViewData["CurrentSort"]?.ToString() == "indicators_desc")
                                            {
                                                <i class="fas fa-arrow-down"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "indicators")
                                            {
                                                <i class="fas fa-arrow-up"></i>
                                            }
                                        </a>
                                    </th>
                                    <th>
                                        <a asp-action="Index"
                                           asp-route-sortOrder="@ViewData["DisbursementSortParm"]"
                                           asp-route-searchString="@ViewData["CurrentFilter"]">
                                            @Localizer["Disbursement Performance"]
                                            @if (ViewData["CurrentSort"]?.ToString() == "disbursement_desc")
                                            {
                                                <i class="fas fa-arrow-down"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "disbursement")
                                            {
                                                <i class="fas fa-arrow-up"></i>
                                            }
                                        </a>
                                    </th>
                                    <th class="text-end">@Localizer["Actions"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Frameworks)
                                {
                                    string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                                    string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                                    double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 2);

                                    <tr id="framework-row-@item.Code">
                                        <td>
                                            <span id="fw-name-@item.Code" class="fw-name-view">
                                                <a style="color:#fff" asp-controller="Outcomes" asp-action="Index" asp-route-frameworkCode="@item.Code" class="text-decoration-none">
                                                    <strong>@item.Name</strong>
                                                </a>
                                            </span>
                                            <input type="text" id="fw-name-input-@item.Code" class="form-control form-control-sm fw-name-edit d-none" value="@item.Name" />
                                        </td>
                                        <td title="@Localizer["Indicators Performance"]: @IndicatorsPerformance%">
                                            @await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))
                                        </td>
                                        <td title="@Localizer["Disbursement Performance"]: @item.DisbursementPerformance%">
                                            @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                                        </td>
                                        <td class="text-end">
                                            <div class="btn-group" role="group">
                                                @* ... (باقي أزرار الإجراءات) ... *@
                                                @if (SignInManager.IsSignedIn(User))
                                                {
                                                    var user = await UserManager.GetUserAsync(User);
                                                    if (user != null)
                                                    {
                                                        var roles = await UserManager.GetRolesAsync(user);
                                                        if (roles.Contains("Admin"))
                                                        {
                                                            <form asp-controller="Tree" asp-action="Index" asp-route-id="@item.Code" method="post" style="display: inline;">
                                                                <button class="btn btn-sm btn-outline-success" title="Tree View">
                                                                    <i class="fas fa-project-diagram"></i>
                                                                </button>
                                                            </form>
                                                        }
                                                    }
                                                }
                                                @*       <a asp-action="Details" asp-route-id="@item.Code" class="btn btn-sm btn-outline-primary" title="View">
                                            <i class="fas fa-eye"></i>
                                        </a> *@
                                                <button class="btn btn-sm btn-outline-warning"
                                                        id="edit-btn-@item.Code"
                                                        onclick="toggleFrameworkEdit(@item.Code)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        onclick="confirmFrameworkDelete(@item.Code)">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
         </div>


    </div>

    <!-- Frameworks Table -->
@* </div> *@

</div>
    <script>
        function toggleFrameworkEdit(code) {
            const viewSpan = $(`#fw-name-${code}`);
            const input = $(`#fw-name-input-${code}`);
            const button = $(`#edit-btn-${code}`);

            const isEditing = input.hasClass('d-none') === false;

            if (isEditing) {
                // Save via AJAX
                const newName = input.val();

                $.ajax({
                    url: `/Frameworks/UpdateName`,
                    type: 'POST',
                    data: { id: code, name: newName },
                    success: function () {
                    viewSpan.html(`<a href="/Outcomes?frameworkCode=${code}" class="text-decoration-none"><strong>${newName}</strong></a>`);
                        input.addClass('d-none');
                        viewSpan.removeClass('d-none');
                        button.html('<i class="fas fa-edit"></i>');
                        button.removeClass('btn-success').addClass('btn-outline-warning');
                        Swal.fire('Saved!', 'Framework name updated.', 'success');
                    },
                    error: function () {
                        Swal.fire('Error', 'Could not update name.', 'error');
                    }
                });
            } else {
                // Enter edit mode
                input.removeClass('d-none');
                viewSpan.addClass('d-none');
                button.html('<i class="fas fa-save"></i>');
                button.removeClass('btn-outline-warning').addClass('btn-success');
            }
        }

        function confirmFrameworkDelete(code) {
            Swal.fire({
                title:'@Localizer["Are you sure?"]',
                text: '@Localizer["This will delete the framework!"]',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                cancelButtonText: '@Localizer["Cancel"]',
                confirmButtonText: '@Localizer["Yes, delete it!?"]'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/Frameworks/DeleteConfirmed/${code}`,
                        type: 'POST',
                        success: function () {
                            $(`#framework-row-${code}`).fadeOut();
                            Swal.fire('Deleted!', '@Localizer["Framework has been deleted."]', 'success');
                        },
                        error: function () {
                         Swal.fire('Error', '@Localizer["Could not delete framework."]', 'error');
                        }
                    });
                }
            });
        }
    </script>



    <style>
        .table-hover tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }

        .progress {
            height: 24px;
            border-radius: 4px;
        }

        .progress-bar {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .btn-group .btn {
            padding: 0.25rem 0.5rem;
        }

        .table-responsive {
            overflow-x: hidden;
        }

        /* Theme Switcher Card Styling */
        .theme-switcher-card {
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
            border-radius: 0.75rem;
            transition: all 0.3s ease;
        }

        .theme-switcher-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
        }

        .theme-switcher-card .dropdown-toggle {
            border: 1px solid #dee2e6;
            background-color: white;
            color: #495057;
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
            min-width: 140px;
        }

        .theme-switcher-card .dropdown-toggle:hover {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        /* Theme-specific adjustments */
        .theme-modern .theme-switcher-card {
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.95) 100%);
            backdrop-filter: blur(10px);
        }

        .theme-modern .theme-switcher-card .dropdown-toggle {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
            border: 1px solid rgba(102, 126, 234, 0.3);
        }

        @@media (max-width: 768px) {
            .d-flex.justify-content-between {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch !important;
            }
            
            .theme-switcher-card {
                order: -1;
            }
        }
    </style>
