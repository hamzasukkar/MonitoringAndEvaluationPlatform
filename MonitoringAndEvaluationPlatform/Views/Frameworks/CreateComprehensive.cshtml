@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Create Comprehensive Framework";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="dashboard-title">
                <i class="fas fa-magic me-3"></i>
                @Localizer["Create Comprehensive Framework"]
            </h1>
            <p class="dashboard-subtitle">
                @Localizer["Build your complete monitoring framework with all hierarchical levels in one comprehensive wizard"]
            </p>
        </div>
        <a asp-action="Index" class="btn btn-outline-secondary btn-lg">
            <i class="fas fa-arrow-left me-2"></i>@Localizer["Back to Frameworks"]
        </a>
    </div>
</div>

<!-- Wizard Progress -->
<div class="wizard-progress-container">
    <div class="wizard-steps">
        <div class="wizard-step active" data-step="1">
            <div class="step-icon">
                <i class="fas fa-sitemap"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Framework"]</div>
                <div class="step-description">@Localizer["Basic Information"]</div>
            </div>
        </div>
        <div class="wizard-connector"></div>
        <div class="wizard-step" data-step="2">
            <div class="step-icon">
                <i class="fas fa-target"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Outcomes"]</div>
                <div class="step-description">@Localizer["Strategic Goals"]</div>
            </div>
        </div>
        <div class="wizard-connector"></div>
        <div class="wizard-step" data-step="3">
            <div class="step-icon">
                <i class="fas fa-cubes"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Outputs"]</div>
                <div class="step-description">@Localizer["Deliverables"]</div>
            </div>
        </div>
        <div class="wizard-connector"></div>
        <div class="wizard-step" data-step="4">
            <div class="step-icon">
                <i class="fas fa-layer-group"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Sub-Outputs"]</div>
                <div class="step-description">@Localizer["Components"]</div>
            </div>
        </div>
        <div class="wizard-connector"></div>
        <div class="wizard-step" data-step="5">
            <div class="step-icon">
                <i class="fas fa-bullseye"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Indicators"]</div>
                <div class="step-description">@Localizer["Measurements"]</div>
            </div>
        </div>
        <div class="wizard-connector"></div>
        <div class="wizard-step" data-step="6">
            <div class="step-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="step-content">
                <div class="step-title">@Localizer["Review"]</div>
                <div class="step-description">@Localizer["Final Summary"]</div>
            </div>
        </div>
    </div>
</div>

<!-- Main Wizard Form -->
<form id="comprehensiveFrameworkForm" class="wizard-form">
    @Html.AntiForgeryToken()

    <!-- Step 1: Framework Basic Information -->
    <div class="wizard-panel active" data-panel="1">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-sitemap"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Framework Information"]</h3>
                    <p class="card-subtitle">@Localizer["Enter the basic details for your monitoring framework"]</p>
                </div>
            </div>

            <div class="wizard-card-content">
                <div class="row">
                    <div class="col-12">
                        <div class="form-floating mb-4">
                            <input type="text" class="form-control form-control-modern" id="frameworkName" name="FrameworkName" placeholder="@Localizer["Enter framework name"]" required>
                            <label for="frameworkName">
                                <i class="fas fa-sitemap me-2"></i>@Localizer["Framework Name"] *
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 2: Outcomes -->
    <div class="wizard-panel" data-panel="2">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-target"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Outcomes"]</h3>
                    <p class="card-subtitle">@Localizer["Define the strategic outcomes for your framework"]</p>
                </div>
                <button type="button" class="btn btn-primary btn-add" onclick="addOutcome()">
                    <i class="fas fa-plus me-2"></i>@Localizer["Add Outcome"]
                </button>
            </div>

            <div class="wizard-card-content">
                <div id="outcomesContainer" class="dynamic-container">
                    <!-- Outcomes will be added dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Step 3: Outputs -->
    <div class="wizard-panel" data-panel="3">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-cubes"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Outputs"]</h3>
                    <p class="card-subtitle">@Localizer["Define outputs for each outcome"]</p>
                </div>
            </div>

            <div class="wizard-card-content">
                <div id="outputsContainer" class="dynamic-container">
                    <!-- Outputs will be populated based on outcomes -->
                </div>
            </div>
        </div>
    </div>

    <!-- Step 4: Sub-Outputs -->
    <div class="wizard-panel" data-panel="4">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-layer-group"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Sub-Outputs"]</h3>
                    <p class="card-subtitle">@Localizer["Define sub-outputs for each output"]</p>
                </div>
            </div>

            <div class="wizard-card-content">
                <div id="subOutputsContainer" class="dynamic-container">
                    <!-- Sub-outputs will be populated based on outputs -->
                </div>
            </div>
        </div>
    </div>

    <!-- Step 5: Indicators -->
    <div class="wizard-panel" data-panel="5">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-bullseye"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Indicators"]</h3>
                    <p class="card-subtitle">@Localizer["Define measurement indicators for each sub-output"]</p>
                </div>
            </div>

            <div class="wizard-card-content">
                <div id="indicatorsContainer" class="dynamic-container">
                    <!-- Indicators will be populated based on sub-outputs -->
                </div>
            </div>
        </div>
    </div>

    <!-- Step 6: Review -->
    <div class="wizard-panel" data-panel="6">
        <div class="chart-card wizard-card">
            <div class="wizard-card-header">
                <div class="card-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="card-title-section">
                    <h3 class="card-title">@Localizer["Review & Submit"]</h3>
                    <p class="card-subtitle">@Localizer["Review your complete framework before submission"]</p>
                </div>
            </div>

            <div class="wizard-card-content">
                <div id="reviewContainer" class="review-container">
                    <!-- Review content will be populated dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Wizard Navigation -->
    <div class="wizard-navigation">
        <button type="button" id="prevBtn" class="btn btn-outline-secondary btn-nav" onclick="previousStep()" disabled>
            <i class="fas fa-chevron-left me-2"></i>@Localizer["Previous"]
        </button>

        <div class="nav-center">
            <span class="step-indicator">
                <span id="currentStepNum">1</span> / <span id="totalSteps">6</span>
            </span>
        </div>

        <button type="button" id="nextBtn" class="btn btn-primary btn-nav" onclick="nextStep()">
            @Localizer["Next"]<i class="fas fa-chevron-right ms-2"></i>
        </button>

        <button type="submit" id="submitBtn" class="btn btn-success btn-nav d-none">
            <i class="fas fa-check me-2"></i>@Localizer["Create Framework"]
            <div class="btn-spinner d-none">
                <i class="fas fa-spinner fa-spin"></i>
            </div>
        </button>
    </div>
</form>

@section Scripts {
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        let currentStep = 1;
        let totalSteps = 6;
        let outcomeCounter = 0;
        let outputCounter = 0;
        let subOutputCounter = 0;
        let indicatorCounter = 0;

        // Framework data structure
        let frameworkData = {
            name: '',
            outcomes: [],
            outputs: [],
            subOutputs: [],
            indicators: []
        };

        // Initialize wizard
        document.addEventListener('DOMContentLoaded', function() {
            updateStepDisplay();
            addOutcome(); // Add first outcome by default
        });

        // Navigation functions
        function nextStep() {
            if (validateCurrentStep()) {
                if (currentStep < totalSteps) {
                    currentStep++;
                    updateStepDisplay();

                    // Populate next step based on previous data
                    if (currentStep === 3) populateOutputs();
                    if (currentStep === 4) populateSubOutputs();
                    if (currentStep === 5) populateIndicators();
                    if (currentStep === 6) populateReview();
                }
            }
        }

        function previousStep() {
            if (currentStep > 1) {
                currentStep--;
                updateStepDisplay();
            }
        }

        function updateStepDisplay() {
            // Update panels
            document.querySelectorAll('.wizard-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            document.querySelector(`[data-panel="${currentStep}"]`).classList.add('active');

            // Update progress steps
            document.querySelectorAll('.wizard-step').forEach((step, index) => {
                step.classList.remove('active', 'completed');
                if (index + 1 < currentStep) {
                    step.classList.add('completed');
                } else if (index + 1 === currentStep) {
                    step.classList.add('active');
                }
            });

            // Update navigation buttons
            document.getElementById('prevBtn').disabled = currentStep === 1;
            document.getElementById('currentStepNum').textContent = currentStep;

            if (currentStep === totalSteps) {
                document.getElementById('nextBtn').classList.add('d-none');
                document.getElementById('submitBtn').classList.remove('d-none');
            } else {
                document.getElementById('nextBtn').classList.remove('d-none');
                document.getElementById('submitBtn').classList.add('d-none');
            }

            // Animate step transition
            document.querySelector('.wizard-panel.active').style.opacity = '0';
            setTimeout(() => {
                document.querySelector('.wizard-panel.active').style.opacity = '1';
            }, 100);
        }

        // Validation function
        function validateCurrentStep() {
            switch(currentStep) {
                case 1:
                    const frameworkName = document.getElementById('frameworkName').value.trim();
                    if (!frameworkName) {
                        showError('@Localizer["Please enter a framework name"]');
                        return false;
                    }
                    frameworkData.name = frameworkName;
                    return true;
                case 2:
                    return validateOutcomes();
                case 3:
                    return validateOutputs();
                case 4:
                    return validateSubOutputs();
                case 5:
                    return validateIndicators();
                default:
                    return true;
            }
        }

        // Add outcome function
        function addOutcome() {
            outcomeCounter++;
            const container = document.getElementById('outcomesContainer');
            const outcomeHtml = `
                <div class="dynamic-item outcome-item" data-id="${outcomeCounter}">
                    <div class="item-header">
                        <div class="item-icon">
                            <i class="fas fa-target"></i>
                        </div>
                        <div class="item-title">@Localizer["Outcome"] ${outcomeCounter}</div>
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="removeOutcome(${outcomeCounter})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="item-content">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="outcome_${outcomeCounter}" name="outcomes[${outcomeCounter-1}].name" placeholder="@Localizer["Enter outcome name"]" required>
                            <label for="outcome_${outcomeCounter}">@Localizer["Outcome Name"] *</label>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', outcomeHtml);

            // Animate new item
            const newItem = container.lastElementChild;
            newItem.style.opacity = '0';
            newItem.style.transform = 'translateY(20px)';
            setTimeout(() => {
                newItem.style.transition = 'all 0.4s ease';
                newItem.style.opacity = '1';
                newItem.style.transform = 'translateY(0)';
            }, 100);
        }

        function removeOutcome(id) {
            const item = document.querySelector(`[data-id="${id}"]`);
            item.style.transition = 'all 0.3s ease';
            item.style.opacity = '0';
            item.style.transform = 'translateX(-100%)';
            setTimeout(() => {
                item.remove();
            }, 300);
        }

        // Validation functions
        function validateOutcomes() {
            const outcomes = document.querySelectorAll('.outcome-item input');
            for (let outcome of outcomes) {
                if (!outcome.value.trim()) {
                    showError('@Localizer["Please fill in all outcome names"]');
                    outcome.focus();
                    return false;
                }
            }
            return true;
        }

        function validateOutputs() {
            const outputs = document.querySelectorAll('.output-item input');
            if (outputs.length === 0) {
                showError('@Localizer["Please add at least one output"]');
                return false;
            }
            for (let output of outputs) {
                if (!output.value.trim()) {
                    showError('@Localizer["Please fill in all output names"]');
                    output.focus();
                    return false;
                }
            }
            return true;
        }

        function validateSubOutputs() {
            const subOutputs = document.querySelectorAll('.suboutput-item input');
            if (subOutputs.length === 0) {
                showError('@Localizer["Please add at least one sub-output"]');
                return false;
            }
            for (let subOutput of subOutputs) {
                if (!subOutput.value.trim()) {
                    showError('@Localizer["Please fill in all sub-output names"]');
                    subOutput.focus();
                    return false;
                }
            }
            return true;
        }

        function validateIndicators() {
            const indicators = document.querySelectorAll('.indicator-item input[name*="name"]');
            if (indicators.length === 0) {
                showError('@Localizer["Please add at least one indicator"]');
                return false;
            }
            for (let indicator of indicators) {
                if (!indicator.value.trim()) {
                    showError('@Localizer["Please fill in all indicator names"]');
                    indicator.focus();
                    return false;
                }
            }
            return true;
        }

        // Populate functions for dependent steps
        function populateOutputs() {
            const outcomes = document.querySelectorAll('.outcome-item input');
            const container = document.getElementById('outputsContainer');
            container.innerHTML = '';

            outcomes.forEach((outcome, index) => {
                if (outcome.value.trim()) {
                    const outcomeSection = `
                        <div class="outcome-section">
                            <div class="section-header">
                                <h5 class="outcome-title">
                                    <i class="fas fa-target me-2"></i>${outcome.value}
                                </h5>
                                <button type="button" class="btn btn-primary btn-sm" onclick="addOutput(${index})">
                                    <i class="fas fa-plus me-1"></i>@Localizer["Add Output"]
                                </button>
                            </div>
                            <div id="outputs_${index}" class="outputs-group">
                                <!-- Outputs will be added here -->
                            </div>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', outcomeSection);
                    addOutput(index); // Add first output by default
                }
            });
        }

        function addOutput(outcomeIndex) {
            outputCounter++;
            const container = document.getElementById(`outputs_${outcomeIndex}`);
            const outputHtml = `
                <div class="dynamic-item output-item" data-id="${outputCounter}" data-outcome="${outcomeIndex}">
                    <div class="item-header">
                        <div class="item-icon">
                            <i class="fas fa-cubes"></i>
                        </div>
                        <div class="item-title">@Localizer["Output"] ${container.children.length + 1}</div>
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="removeOutput(${outputCounter})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="item-content">
                        <div class="form-floating">
                            <input type="text" class="form-control" name="outputs[${outputCounter-1}].name" placeholder="@Localizer["Enter output name"]" required>
                            <input type="hidden" name="outputs[${outputCounter-1}].outcomeIndex" value="${outcomeIndex}">
                            <label>@Localizer["Output Name"] *</label>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', outputHtml);
            animateNewItem(container.lastElementChild);
        }

        function removeOutput(id) {
            const item = document.querySelector(`[data-id="${id}"]`);
            animateRemoveItem(item);
        }

        function populateSubOutputs() {
            const outputs = document.querySelectorAll('.output-item input[name*="name"]');
            const container = document.getElementById('subOutputsContainer');
            container.innerHTML = '';

            outputs.forEach((output, index) => {
                if (output.value.trim()) {
                    const outputSection = `
                        <div class="output-section">
                            <div class="section-header">
                                <h5 class="output-title">
                                    <i class="fas fa-cubes me-2"></i>${output.value}
                                </h5>
                                <button type="button" class="btn btn-primary btn-sm" onclick="addSubOutput(${index})">
                                    <i class="fas fa-plus me-1"></i>@Localizer["Add Sub-Output"]
                                </button>
                            </div>
                            <div id="subOutputs_${index}" class="subOutputs-group">
                                <!-- Sub-outputs will be added here -->
                            </div>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', outputSection);
                    addSubOutput(index); // Add first sub-output by default
                }
            });
        }

        function addSubOutput(outputIndex) {
            subOutputCounter++;
            const container = document.getElementById(`subOutputs_${outputIndex}`);
            const subOutputHtml = `
                <div class="dynamic-item suboutput-item" data-id="${subOutputCounter}" data-output="${outputIndex}">
                    <div class="item-header">
                        <div class="item-icon">
                            <i class="fas fa-layer-group"></i>
                        </div>
                        <div class="item-title">@Localizer["Sub-Output"] ${container.children.length + 1}</div>
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="removeSubOutput(${subOutputCounter})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="item-content">
                        <div class="form-floating">
                            <input type="text" class="form-control" name="subOutputs[${subOutputCounter-1}].name" placeholder="@Localizer["Enter sub-output name"]" required>
                            <input type="hidden" name="subOutputs[${subOutputCounter-1}].outputIndex" value="${outputIndex}">
                            <label>@Localizer["Sub-Output Name"] *</label>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', subOutputHtml);
            animateNewItem(container.lastElementChild);
        }

        function removeSubOutput(id) {
            const item = document.querySelector(`[data-id="${id}"]`);
            animateRemoveItem(item);
        }

        function populateIndicators() {
            const subOutputs = document.querySelectorAll('.suboutput-item input[name*="name"]');
            const container = document.getElementById('indicatorsContainer');
            container.innerHTML = '';

            subOutputs.forEach((subOutput, index) => {
                if (subOutput.value.trim()) {
                    const subOutputSection = `
                        <div class="subOutput-section">
                            <div class="section-header">
                                <h5 class="subOutput-title">
                                    <i class="fas fa-layer-group me-2"></i>${subOutput.value}
                                </h5>
                                <button type="button" class="btn btn-primary btn-sm" onclick="addIndicator(${index})">
                                    <i class="fas fa-plus me-1"></i>@Localizer["Add Indicator"]
                                </button>
                            </div>
                            <div id="indicators_${index}" class="indicators-group">
                                <!-- Indicators will be added here -->
                            </div>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', subOutputSection);
                    addIndicator(index); // Add first indicator by default
                }
            });
        }

        function addIndicator(subOutputIndex) {
            indicatorCounter++;
            const container = document.getElementById(`indicators_${subOutputIndex}`);
            const indicatorHtml = `
                <div class="dynamic-item indicator-item" data-id="${indicatorCounter}" data-suboutput="${subOutputIndex}">
                    <div class="item-header">
                        <div class="item-icon">
                            <i class="fas fa-bullseye"></i>
                        </div>
                        <div class="item-title">@Localizer["Indicator"] ${container.children.length + 1}</div>
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="removeIndicator(${indicatorCounter})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="item-content">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="indicators[${indicatorCounter-1}].name" placeholder="@Localizer["Enter indicator name"]" required>
                                    <input type="hidden" name="indicators[${indicatorCounter-1}].subOutputIndex" value="${subOutputIndex}">
                                    <label>@Localizer["Indicator Name"] *</label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-floating mb-3">
                                    <input type="number" class="form-control" name="indicators[${indicatorCounter-1}].weight" step="0.01" min="0" max="1" value="1.0" placeholder="1.0">
                                    <label>@Localizer["Weight"]</label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-floating mb-3">
                                    <input type="number" class="form-control" name="indicators[${indicatorCounter-1}].target" min="0" placeholder="0">
                                    <label>@Localizer["Target"]</label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="indicators[${indicatorCounter-1}].source" placeholder="@Localizer["Enter data source"]">
                                    <label>@Localizer["Data Source"]</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', indicatorHtml);
            animateNewItem(container.lastElementChild);
        }

        function removeIndicator(id) {
            const item = document.querySelector(`[data-id="${id}"]`);
            animateRemoveItem(item);
        }

        // Animation helper functions
        function animateNewItem(item) {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            setTimeout(() => {
                item.style.transition = 'all 0.4s ease';
                item.style.opacity = '1';
                item.style.transform = 'translateY(0)';
            }, 100);
        }

        function animateRemoveItem(item) {
            item.style.transition = 'all 0.3s ease';
            item.style.opacity = '0';
            item.style.transform = 'translateX(-100%)';
            setTimeout(() => {
                item.remove();
            }, 300);
        }

        // Populate review
        function populateReview() {
            const container = document.getElementById('reviewContainer');
            let reviewHtml = `
                <div class="review-section">
                    <h4 class="review-title">
                        <i class="fas fa-sitemap me-2"></i>@Localizer["Framework"]: ${frameworkData.name}
                    </h4>
            `;

            // Add outcomes review
            const outcomes = document.querySelectorAll('.outcome-item input');
            outcomes.forEach((outcome, index) => {
                if (outcome.value.trim()) {
                    reviewHtml += `
                        <div class="review-level">
                            <h5 class="level-title">
                                <i class="fas fa-target me-2"></i>@Localizer["Outcome"] ${index + 1}: ${outcome.value}
                            </h5>
                            <div class="level-content">
                    `;

                    // Add outputs for this outcome
                    const outputs = document.querySelectorAll(`[data-outcome="${index}"] input[name*="name"]`);
                    outputs.forEach((output, outIndex) => {
                        if (output.value.trim()) {
                            reviewHtml += `
                                <div class="sublevel">
                                    <h6 class="sublevel-title">
                                        <i class="fas fa-cubes me-2"></i>@Localizer["Output"] ${outIndex + 1}: ${output.value}
                                    </h6>
                            `;

                            // Add sub-outputs and indicators...
                            reviewHtml += `</div>`;
                        }
                    });

                    reviewHtml += `</div></div>`;
                }
            });

            reviewHtml += `</div>`;
            container.innerHTML = reviewHtml;
        }

        // Form submission
        document.getElementById('comprehensiveFrameworkForm').addEventListener('submit', function(e) {
            e.preventDefault();

            // Temporarily show all panels to make all fields focusable for validation
            const allPanels = document.querySelectorAll('.wizard-panel');
            const originalDisplayStates = [];

            allPanels.forEach((panel, index) => {
                originalDisplayStates[index] = panel.style.display;
                panel.style.display = 'block';
                panel.style.visibility = 'hidden';
                panel.style.position = 'absolute';
                panel.style.left = '-9999px';
            });

            // Check HTML5 validation
            const form = this;
            let isValid = true;
            let firstInvalidField = null;

            // Validate all required fields
            const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
            requiredFields.forEach(field => {
                if (!field.checkValidity()) {
                    isValid = false;
                    if (!firstInvalidField) {
                        firstInvalidField = field;
                    }
                }
            });

            // Restore original panel states
            allPanels.forEach((panel, index) => {
                panel.style.display = originalDisplayStates[index] || '';
                panel.style.visibility = '';
                panel.style.position = '';
                panel.style.left = '';
            });

            // If validation failed, show error and navigate to the problematic field
            if (!isValid && firstInvalidField) {
                // Find which step the invalid field belongs to
                let targetStep = 1;
                const fieldPanel = firstInvalidField.closest('.wizard-panel');
                if (fieldPanel) {
                    targetStep = parseInt(fieldPanel.getAttribute('data-panel'));
                }

                // Navigate to the problematic step
                currentStep = targetStep;
                updateStepDisplay();

                // Focus the field and show error
                setTimeout(() => {
                    firstInvalidField.focus();
                    showError('@Localizer["Please fill in all required fields correctly."]');
                }, 100);

                return;
            }

            // Show loading state
            const submitBtn = document.getElementById('submitBtn');
            const spinner = submitBtn.querySelector('.btn-spinner');
            submitBtn.disabled = true;
            spinner.classList.remove('d-none');

            // Collect all form data
            const formData = new FormData(this);

            // Submit via AJAX
            $.ajax({
                url: '@Url.Action("CreateComprehensive", "Frameworks")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Success!"]',
                            text: '@Localizer["Framework created successfully!"]',
                            confirmButtonText: '@Localizer["Go to Frameworks"]'
                        }).then(() => {
                            window.location.href = '@Url.Action("Index", "Frameworks")';
                        });
                    } else {
                        throw new Error(response.message || 'Unknown error');
                    }
                },
                error: function(xhr) {
                    showError('@Localizer["An error occurred while creating the framework. Please try again."]');
                },
                complete: function() {
                    submitBtn.disabled = false;
                    spinner.classList.add('d-none');
                }
            });
        });

        // Helper functions
        function showError(message) {
            Swal.fire({
                icon: 'error',
                title: '@Localizer["Validation Error"]',
                text: message
            });
        }
    </script>

    <style>
        /* Wizard Progress Styles */
        .wizard-progress-container {
            background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .wizard-steps {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .wizard-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            min-width: 120px;
            opacity: 0.6;
            transition: all 0.3s ease;
            position: relative;
        }

        .wizard-step.active,
        .wizard-step.completed {
            opacity: 1;
        }

        .step-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            background: #e5e7eb;
            color: #6b7280;
        }

        .wizard-step.active .step-icon {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            box-shadow: 0 4px 15px rgba(var(--primary-color-rgb), 0.3);
        }

        .wizard-step.completed .step-icon {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .step-content {
            text-align: center;
        }

        .step-title {
            font-weight: 600;
            font-size: 0.9rem;
            color: #374151;
            margin-bottom: 0.25rem;
        }

        .step-description {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .wizard-connector {
            height: 2px;
            width: 60px;
            background: #e5e7eb;
            margin: 0 1rem;
            flex-shrink: 0;
        }

        /* Wizard Form Styles */
        .wizard-form {
            position: relative;
        }

        .wizard-panel {
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .wizard-panel.active {
            display: block;
            opacity: 1;
        }

        .wizard-card {
            margin-bottom: 2rem;
        }

        .wizard-card-header {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 2px solid rgba(0,0,0,0.05);
        }

        .card-icon {
            width: 60px;
            height: 60px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            font-size: 1.5rem;
            box-shadow: 0 4px 15px rgba(var(--primary-color-rgb), 0.3);
        }

        .card-title-section {
            flex: 1;
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .card-subtitle {
            color: #6b7280;
            font-size: 0.95rem;
            margin: 0;
        }

        .btn-add {
            border-radius: 12px;
            padding: 10px 20px;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(var(--primary-color-rgb), 0.3);
        }

        /* Dynamic Content Styles */
        .dynamic-container {
            max-height: 60vh;
            overflow-y: auto;
            padding-right: 10px;
        }

        .dynamic-item {
            background: rgba(255,255,255,0.8);
            border: 1px solid rgba(0,0,0,0.1);
            border-radius: 12px;
            margin-bottom: 1rem;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .dynamic-item:hover {
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }

        .item-header {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }

        .item-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            font-size: 1rem;
        }

        .item-title {
            flex: 1;
            font-weight: 600;
            color: #374151;
        }

        .btn-remove {
            border-radius: 8px;
            width: 32px;
            height: 32px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .item-content {
            padding: 1.5rem;
        }

        /* Section Styles */
        .outcome-section,
        .output-section,
        .subOutput-section {
            margin-bottom: 2rem;
            border: 2px solid rgba(0,0,0,0.05);
            border-radius: 15px;
            overflow: hidden;
        }

        .section-header {
            background: linear-gradient(135deg, rgba(var(--primary-color-rgb), 0.1), rgba(var(--primary-color-rgb), 0.05));
            padding: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }

        .outcome-title,
        .output-title,
        .subOutput-title {
            margin: 0;
            color: var(--primary-color);
            font-size: 1.1rem;
            font-weight: 600;
        }

        .outputs-group,
        .subOutputs-group,
        .indicators-group {
            padding: 1.5rem;
            background: rgba(255,255,255,0.5);
        }

        /* Review Styles */
        .review-container {
            max-height: 60vh;
            overflow-y: auto;
        }

        .review-section {
            background: rgba(255,255,255,0.8);
            border-radius: 15px;
            padding: 2rem;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .review-title {
            color: var(--primary-color);
            font-weight: 700;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid rgba(var(--primary-color-rgb), 0.2);
        }

        .review-level {
            margin-bottom: 2rem;
            background: rgba(255,255,255,0.6);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .level-title {
            color: #374151;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .sublevel {
            margin-left: 2rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background: rgba(255,255,255,0.8);
            border-radius: 8px;
            border-left: 3px solid var(--secondary-color);
        }

        .sublevel-title {
            color: #4b5563;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        /* Navigation Styles */
        .wizard-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
            backdrop-filter: blur(15px);
            border-radius: 15px;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .btn-nav {
            min-width: 120px;
            border-radius: 12px;
            padding: 12px 24px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-nav:hover {
            transform: translateY(-2px);
        }

        .nav-center {
            text-align: center;
        }

        .step-indicator {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .form-control-modern {
            border: 2px solid transparent;
            border-radius: 12px;
            padding: 15px 18px;
            background: rgba(255,255,255,0.8);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .form-control-modern:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(var(--primary-color-rgb), 0.1);
            background: rgba(255,255,255,0.95);
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .wizard-steps {
                flex-direction: column;
                gap: 1rem;
            }

            .wizard-connector {
                width: 2px;
                height: 30px;
                margin: 0.5rem 0;
            }

            .wizard-card-header {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .wizard-navigation {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-center {
                order: -1;
            }
        }
    </style>
}