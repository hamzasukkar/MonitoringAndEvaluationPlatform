@model MonitoringAndEvaluationPlatform.ViewModel.DashboardSummaryViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Text.Json
@inject IViewLocalizer Localizer
@{
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    ViewData["Title"] = "Dashboard";
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1 class="dashboard-title">
        <i class="fas fa-chart-line me-3"></i>
        @Localizer["HEADER_TITLE"]
    </h1>
    <p class="dashboard-subtitle">
        @Localizer["HEADER_SUBTITLE"]
    </p>
</div>

<!-- Statistics Cards -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon primary">
            <i class="fas fa-project-diagram"></i>
        </div>
        <div class="stat-number" id="projects-counter">@Model.TotalProjects</div>
        <div class="stat-label">@Localizer["STATS_ACTIVE_PROJECTS"]</div>
    </div>

    <div class="stat-card">
        <div class="stat-icon success">
            <i class="fas fa-building"></i>
        </div>
        <div class="stat-number" id="ministries-counter">@Model.TotlalMinistries</div>
        <div class="stat-label">@Localizer["STATS_PARTNER_MINISTRIES"]</div>
    </div>

    <div class="stat-card">
        <div class="stat-icon warning">
            <i class="fas fa-map-marked-alt"></i>
        </div>
        <div class="stat-number" id="locations-counter">@Model.TotalGovernorate</div>
        <div class="stat-label">@Localizer["STATS_GOVERNORATES"]</div>
    </div>

    <div class="stat-card">
        <div class="stat-icon info">
            <i class="fas fa-tasks"></i>
        </div>
        <div class="stat-number" id="frameworks-counter">@Model.TotalFrameworks</div>
        <div class="stat-label">@Localizer["STATS_FRAMEWORKS"]</div>
    </div>
</div>

<!-- Charts Section -->
<div class="charts-grid">
    <!-- Projects by Ministry Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-pie"></i>
            @Localizer["CHART_PROJECTS_BY_MINISTRY"]
        </h3>
        <div style="height: 300px;">
            <canvas id="projectsMinistryChart"></canvas>
        </div>
    </div>

    <!-- Performance Overview Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-bar"></i>
            @Localizer["CHART_FRAMEWORK_PERFORMANCE"]
        </h3>
        <div style="height: 300px;">
            <canvas id="performanceChart"></canvas>
        </div>
    </div>

    <!-- Project Status Distribution -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-donut"></i>
            @Localizer["CHART_PROJECT_DISTRIBUTION_LOCATION"]
        </h3>
        <div style="height: 300px;">
            <canvas id="locationChart"></canvas>
        </div>
    </div>

    <!-- Trend Analysis -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-line"></i>
            @Localizer["CHART_IMPLEMENTATION_PROGRESS_TREND"]
        </h3>
        <div style="height: 300px;">
            <canvas id="trendChart"></canvas>
        </div>
    </div>

    <!-- Projects by Donor Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-handshake"></i>
            Projects by Donor
        </h3>
        <div style="height: 300px;">
            <canvas id="projectsDonorChart"></canvas>
        </div>
    </div>

    <!-- Donor Performance Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-bar"></i>
            Donor Performance
        </h3>
        <div style="height: 300px;">
            <canvas id="donorPerformanceChart"></canvas>
        </div>
    </div>

    <!-- Projects by Sector Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-industry"></i>
            Projects by Sector
        </h3>
        <div style="height: 300px;">
            <canvas id="projectsSectorChart"></canvas>
        </div>
    </div>

    <!-- Sector Performance Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-bar"></i>
            Sector Performance
        </h3>
        <div style="height: 300px;">
            <canvas id="sectorPerformanceChart"></canvas>
        </div>
    </div>

    <!-- Top Projects Overall Performance Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-trophy"></i>
            Top 10 Projects - Overall Performance
        </h3>
        <div style="height: 300px;">
            <canvas id="projectsOverallPerformanceChart"></canvas>
        </div>
    </div>

    <!-- Projects Disbursement Performance Chart -->
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-dollar-sign"></i>
            Top 10 Projects - Disbursement Performance
        </h3>
        <div style="height: 300px;">
            <canvas id="projectsDisbursementChart"></canvas>
        </div>
    </div>
</div>

<!-- Progress Section -->
<div class="progress-section">
    <h3 class="chart-title">
        <i class="fas fa-tasks"></i>
        @Localizer["PROGRESS_OVERVIEW_TITLE"]
    </h3>

    @if (Model.FrameworksPerformance.Any())
    {
        @foreach (var framework in Model.FrameworksPerformance)
        {
            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">@framework.Name</span>
                    <span class="progress-percentage">@framework.OverallPerformance.ToString("F1")%</span>
                </div>
                <div class="progress-bar-custom">
                    <div class="progress-fill" style="width: @framework.OverallPerformance.ToString("F1")%"></div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="progress-item">
            <div class="progress-header">
                <span class="progress-label">@Localizer["PROGRESS_SDG_FRAMEWORK"]</span>
                <span class="progress-percentage">0%</span>
            </div>
            <div class="progress-bar-custom">
                <div class="progress-fill" style="width: 0%"></div>
            </div>
        </div>
    }
</div>

<!-- Recent Activity -->
<div class="recent-activity">
    <h3 class="chart-title">
        <i class="fas fa-clock"></i>
        @Localizer["ACTIVITY_RECENT_TITLE"]
    </h3>

    @if (Model.RecentActivities.Any())
    {
        @foreach (var activity in Model.RecentActivities)
        {
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas @activity.Icon"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">@activity.ActivityTitle</div>
                    <div class="activity-time">
                        @{
                            var timeSpan = DateTime.Now - activity.ActivityDate;
                            string timeAgo;
                            if (timeSpan.TotalDays >= 365)
                            {
                                timeAgo = $"{(int)(timeSpan.TotalDays / 365)} year(s) ago";
                            }
                            else if (timeSpan.TotalDays >= 30)
                            {
                                timeAgo = $"{(int)(timeSpan.TotalDays / 30)} month(s) ago";
                            }
                            else if (timeSpan.TotalDays >= 1)
                            {
                                timeAgo = $"{(int)timeSpan.TotalDays} day(s) ago";
                            }
                            else if (timeSpan.TotalHours >= 1)
                            {
                                timeAgo = $"{(int)timeSpan.TotalHours} hour(s) ago";
                            }
                            else if (timeSpan.TotalMinutes >= 1)
                            {
                                timeAgo = $"{(int)timeSpan.TotalMinutes} minute(s) ago";
                            }
                            else
                            {
                                timeAgo = "Just now";
                            }
                        }
                        @timeAgo
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>@Localizer["NO_RECENT_ACTIVITY"]</p>
    }
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Animate counters
    function animateCounter(elementId, targetNumber) {
        const element = document.getElementById(elementId);
        const increment = targetNumber / 50;
        let current = 0;
        
        const timer = setInterval(() => {
            current += increment;
            if (current >= targetNumber) {
                current = targetNumber;
                clearInterval(timer);
            }
            element.textContent = Math.floor(current);
        }, 40);
    }
    
    // Animate all counters
    animateCounter('projects-counter', @Model.TotalProjects);
    animateCounter('ministries-counter', @Model.TotlalMinistries);
    animateCounter('locations-counter', @Model.TotalGovernorate);
    animateCounter('frameworks-counter', @Model.TotalFrameworks);
    
    // Store chart instances for theme updates
    let chartInstances = {};
    
    // Get CSS variable values for theming
    function getCSSVariableValue(variableName) {
        return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
    }
    
    // Function to create all charts
    function createCharts() {
        // Destroy existing charts
        Object.values(chartInstances).forEach(chart => {
            if (chart) chart.destroy();
        });
        
        // Chart configurations with dynamic colors (recalculated each time)
        const chartColors = {
            primary: [getCSSVariableValue('--primary-color'), getCSSVariableValue('--primary-dark')],
            success: [getCSSVariableValue('--primary-light'), getCSSVariableValue('--secondary-color')],
            warning: [getCSSVariableValue('--accent-color'), getCSSVariableValue('--primary-dark')],
            info: [getCSSVariableValue('--accent-color'), getCSSVariableValue('--primary-dark')],
            background: [
                getCSSVariableValue('--primary-color') + 'CC', // 80% opacity
                getCSSVariableValue('--primary-dark') + 'CC',
                getCSSVariableValue('--primary-light') + 'CC',
                getCSSVariableValue('--secondary-color') + 'CC',
                getCSSVariableValue('--accent-color') + 'CC',
                getCSSVariableValue('--primary-color') + 'CC',
                getCSSVariableValue('--primary-light') + 'CC',
                getCSSVariableValue('--primary-dark') + 'CC'
            ]
        };
        
        // Projects by Ministry Chart (Pie Chart)
        const ministryCtx = document.getElementById('projectsMinistryChart').getContext('2d');
        chartInstances.ministry = new Chart(ministryCtx, {
        type: 'doughnut',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsByMinistry.Keys.ToList())),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.ProjectsByMinistry.Values.ToList())),
                backgroundColor: chartColors.background,
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                }
            }
        }
    });
    
        // Framework Performance Chart (Bar Chart)
        const performanceCtx = document.getElementById('performanceChart').getContext('2d');
        chartInstances.performance = new Chart(performanceCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.FrameworksPerformance.Select(f => f.Name).ToList())),
            datasets: [{
                label: '@Localizer["CHART_PERFORMANCE_PERCENTAGE"]',
                data: @Html.Raw(Json.Serialize(Model.FrameworksPerformance.Select(f => f.OverallPerformance).ToList())),
                backgroundColor: getCSSVariableValue('--primary-color') + 'CC',
                borderColor: getCSSVariableValue('--primary-color'),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });
    
        // Project Distribution by Location (Polar Chart)
        const locationCtx = document.getElementById('locationChart').getContext('2d');
        chartInstances.location = new Chart(locationCtx, {
        type: 'polarArea',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsByGovernorate.Keys.ToList())),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.ProjectsByGovernorate.Values.ToList())),
                backgroundColor: chartColors.background
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                }
            }
        }
    });
    
        // Implementation Progress Trend (Line Chart)
        const trendCtx = document.getElementById('trendChart').getContext('2d');
        chartInstances.trend = new Chart(trendCtx, {
        type: 'line',
        data: {
            labels: ['@Localizer["MONTH_JAN"]', '@Localizer["MONTH_FEB"]', '@Localizer["MONTH_MAR"]', '@Localizer["MONTH_APR"]', '@Localizer["MONTH_MAY"]', '@Localizer["MONTH_JUN"]', '@Localizer["MONTH_JUL"]', '@Localizer["MONTH_AUG"]', '@Localizer["MONTH_SEP"]', '@Localizer["MONTH_OCT"]', '@Localizer["MONTH_NOV"]', '@Localizer["MONTH_DEC"]'],
            datasets: [
                {
                    label: '@Localizer["CHART_PROJECT_IMPLEMENTATION"]',
                    data: @Html.Raw(Json.Serialize(Model.MonthlyPerformance.Select(m => m.ProjectImplementation).ToList())),
                    borderColor: getCSSVariableValue('--primary-color'),
                    backgroundColor: getCSSVariableValue('--primary-color') + '1A',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: '@Localizer["CHART_PERFORMANCE_INDICATORS"]',
                    data: @Html.Raw(Json.Serialize(Model.MonthlyPerformance.Select(m => m.PerformanceIndicators).ToList())),
                    borderColor: getCSSVariableValue('--primary-dark'),
                    backgroundColor: getCSSVariableValue('--primary-dark') + '1A',
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });

        // Projects by Donor Chart (Doughnut Chart)
        const donorCtx = document.getElementById('projectsDonorChart').getContext('2d');
        chartInstances.donor = new Chart(donorCtx, {
        type: 'doughnut',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsByDonor.Keys.ToList())),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.ProjectsByDonor.Values.ToList())),
                backgroundColor: chartColors.background,
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                }
            }
        }
    });

        // Donor Performance Chart (Bar Chart)
        const donorPerformanceCtx = document.getElementById('donorPerformanceChart').getContext('2d');
        chartInstances.donorPerformance = new Chart(donorPerformanceCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.DonorsPerformance.Select(d => d.Partner).ToList())),
            datasets: [{
                label: 'Performance %',
                data: @Html.Raw(Json.Serialize(Model.DonorsPerformance.Select(d => d.OverallPerformance).ToList())),
                backgroundColor: getCSSVariableValue('--secondary-color') + 'CC',
                borderColor: getCSSVariableValue('--secondary-color'),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });

        // Projects by Sector Chart (Doughnut Chart)
        const sectorCtx = document.getElementById('projectsSectorChart').getContext('2d');
        chartInstances.sector = new Chart(sectorCtx, {
        type: 'doughnut',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsBySector.Keys.ToList())),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.ProjectsBySector.Values.ToList())),
                backgroundColor: chartColors.background,
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                }
            }
        }
    });

        // Sector Performance Chart (Bar Chart)
        const sectorPerformanceCtx = document.getElementById('sectorPerformanceChart').getContext('2d');
        chartInstances.sectorPerformance = new Chart(sectorPerformanceCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.SectorsPerformance.Select(s => s.Name).ToList())),
            datasets: [{
                label: 'Performance %',
                data: @Html.Raw(Json.Serialize(Model.SectorsPerformance.Select(s => s.OverallPerformance).ToList())),
                backgroundColor: getCSSVariableValue('--accent-color') + 'CC',
                borderColor: getCSSVariableValue('--accent-color'),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });

        // Top Projects Overall Performance Chart (Horizontal Bar Chart)
        const projectsOverallCtx = document.getElementById('projectsOverallPerformanceChart').getContext('2d');
        chartInstances.projectsOverall = new Chart(projectsOverallCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsPerformance.Select(p => p.ProjectName).ToList())),
            datasets: [{
                label: 'Overall Performance %',
                data: @Html.Raw(Json.Serialize(Model.ProjectsPerformance.Select(p => p.Performance).ToList())),
                backgroundColor: getCSSVariableValue('--primary-color') + 'CC',
                borderColor: getCSSVariableValue('--primary-color'),
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });

        // Projects Disbursement Performance Chart (Horizontal Bar Chart)
        const projectsDisbursementCtx = document.getElementById('projectsDisbursementChart').getContext('2d');
        chartInstances.projectsDisbursement = new Chart(projectsDisbursementCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ProjectsPerformance.Select(p => p.ProjectName).ToList())),
            datasets: [{
                label: 'Disbursement Performance %',
                data: @Html.Raw(Json.Serialize(Model.ProjectsPerformance.Select(p => p.DisbursementPerformance).ToList())),
                backgroundColor: getCSSVariableValue('--secondary-color') + 'CC',
                borderColor: getCSSVariableValue('--secondary-color'),
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });
    }

    // Initial chart creation
    createCharts();
    
    // Add hover effects to stat cards
    const statCards = document.querySelectorAll('.stat-card');
    statCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(-5px) scale(1)';
        });
    });
    
    // Add loading animation to charts
    const chartCards = document.querySelectorAll('.chart-card');
    chartCards.forEach((card, index) => {
        setTimeout(() => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.6s ease';
            
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100);
        }, index * 200);
    });
    
    // Progress bar animation
    const progressFills = document.querySelectorAll('.progress-fill');
    progressFills.forEach((fill, index) => {
        setTimeout(() => {
            const width = fill.style.width;
            fill.style.width = '0%';
            setTimeout(() => {
                fill.style.width = width;
            }, 100);
        }, index * 150);
    });
    
    // Activity items stagger animation
    const activityItems = document.querySelectorAll('.activity-item');
    activityItems.forEach((item, index) => {
        item.style.opacity = '0';
        item.style.transform = 'translateX(-30px)';
        item.style.transition = 'all 0.5s ease';
        
        setTimeout(() => {
            item.style.opacity = '1';
            item.style.transform = 'translateX(0)';
        }, 1000 + (index * 100));
    });
});
</script>
}
