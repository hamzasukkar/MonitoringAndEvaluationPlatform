@model MonitoringAndEvaluationPlatform.Models.Project
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization

@{
    ViewData["Title"] = "Create New Project";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";

    var startDate = DateTime.Today.ToString("yyyy-MM-dd");
    var endDate = DateTime.Today.ToString("yyyy-MM-dd");

    var governorates = ViewBag.Governorates as List<Governorate>;
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="dashboard-title">
                <i class="fas fa-plus-circle me-3"></i>
                @Localizer["Create New Project"]
            </h1>
            <p class="dashboard-subtitle">
                @Localizer["Fill in the project details below to create a comprehensive project plan"]
            </p>
        </div>
        <a asp-action="Index" class="btn btn-outline-secondary btn-lg">
            <i class="fas fa-arrow-left me-2"></i>@Localizer["Back to Projects"]
        </a>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        @Localizer["Project Information"]
                    </h5>
                </div>
                <div id="main-form-body" class="card-body">
                    <!-- Include notification partial -->
                    <partial name="_Notifications" />

                    @using (Html.BeginForm("Create", "Projects", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        <!-- Improved validation summary with better styling -->
                        <div id="server-validation-summary" asp-validation-summary="ModelOnly" class="alert alert-danger alert-dismissible fade show" role="alert">
                            <strong><i class="fas fa-exclamation-triangle me-2"></i>Please correct the following errors:</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>

                        <div class="row">
                            <!-- Left Column -->
                            <div class="col-md-6">
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-info-circle me-2"></i>@Localizer["Basic Information"]
                                </h6>

                                <!-- Project Name -->
                                <div class="mb-4">
                                    <label asp-for="ProjectName" class="form-label fw-bold">
                                        <i class="fas fa-project-diagram me-2"></i>
                                        @Localizer["Project Name"] <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="ProjectName" class="form-control form-control-lg" placeholder="@Localizer["Enter a descriptive project name (3-200 characters)"]" />
                                    <div class="form-text">@Localizer["Choose a clear and meaningful name for your project"]</div>
                                    <span asp-validation-for="ProjectName" class="invalid-feedback d-block"></span>
                                </div>

                             @*    <!-- Plans Count calculated from project duration -->
                                <div class="mb-4">
                                    <label for="PlansCount" class="form-label fw-bold">
                                        <i class="fas fa-calendar-alt me-2"></i>
                                        @Localizer["Plans Count"] (Months)
                                    </label>
                                    <input type="number"
                                           id="PlansCount"
                                           name="PlansCount"
                                           class="form-control form-control-lg"
                                           value="1"
                                           min="1"
                                           readonly />
                                    <div class="form-text">@Localizer["Automatically calculated based on project duration"]</div>
                                </div> *@

                                <!-- Location Hierarchy -->
                                <div class="mb-4">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-map-marker-alt me-2"></i>@Localizer["Project Location"]
                                    </h6>
                                    <!-- Entire Country Checkbox -->
                                    <div class="mb-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="entireCountryCheckbox" name="IsEntireCountry" value="true">
                                            <label class="form-check-label fw-bold" for="entireCountryCheckbox">
                                                <i class="fas fa-flag me-2"></i>@Localizer["This project covers the entire country"]
                                            </label>
                                        </div>
                                        <div class="form-text">@Localizer["Check this if the project is nationwide and not limited to specific locations"]</div>
                                    </div>
                                    <div id="location-selector" class="row g-3 mb-3">
                                        <div class="col-md-6">
                                            <select id="governorate" class="form-select">
                                                <option value="">-- @Localizer["Select Governorate"] --</option>
                                                @if (governorates != null)
                                                {
                                                    @foreach (var gov in governorates)
                                                    {
                                                        var displayName = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName == "ar"
                                                        ? gov.AR_Name
                                                        : gov.EN_Name;
                                                        <option value="@gov.Code">@displayName</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-6">
                                            <select id="district" class="form-select">
                                                <option value="">
                                                    -- @Localizer["Select District"] --
                                                </option>
                                            </select>
                                        </div>
                                        <div class="col-md-6">
                                            <select id="subdistrict" class="form-select">
                                                <option value="">-- @Localizer["Select Subdistrict"] --</option>
                                            </select>
                                        </div>
                                        <div class="col-md-6">
                                            <select id="community" class="form-select">
                                                <option value="">-- @Localizer["Select Community"] --</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="d-flex gap-2 mb-3">
                                        <button type="button" id="add-location" class="btn btn-primary">
                                            <i class="fas fa-plus me-2"></i>@Localizer["Add Location"]
                                        </button>
                                        <button type="button" id="reset-dropdowns" class="btn btn-outline-secondary">
                                            <i class="fas fa-redo me-2"></i>@Localizer["Reset"]
                                        </button>
                                    </div>
                                    <ul id="selected-locations" class="list-group mb-3"></ul>
                                    <input type="hidden" id="location-data" name="selections" />
                                    <div id="location-validation-alert" style="display:none;" class="alert alert-warning"></div>
                                </div>
                                </div>






                                <!-- Timeline -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-clock me-2"></i>@Localizer["Project Timeline"]
                                </h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label asp-for="StartDate" class="form-label fw-bold">
                                            <i class="fas fa-play me-2"></i>
                                            @Localizer["Start Date"] <span class="text-danger">*</span>
                                        </label>
                                        <input type="date" asp-for="StartDate" value="@startDate" class="form-control form-control-lg" />
                                    <div class="form-text">@Localizer["Project implementation start date"] </div>
                                        <span asp-validation-for="StartDate" class="invalid-feedback d-block"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="EndDate" class="form-label fw-bold">
                                            <i class="fas fa-stop me-2"></i>
                                            @Localizer["End Date"] <span class="text-danger">*</span>
                                        </label>
                                        <input type="date" asp-for="EndDate" value="@endDate" class="form-control form-control-lg" />
                                        <div class="form-text">@Localizer["Project completion deadline"]</div>
                                        <span asp-validation-for="EndDate" class="invalid-feedback d-block"></span>
                                    </div>
                                </div>
                                </div>
    
                            <!-- Right Column -->
                            <div class="col-md-6">
                                <!-- Budget Information -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-dollar-sign me-2"></i>@Localizer["Budget Information"]
                                </h6>
                                <div class="mb-4">
                                    <label asp-for="EstimatedBudget" class="form-label fw-bold">
                                        <i class="fas fa-coins me-2"></i>
                                        @Localizer["Estimated Budget"] <span class="text-danger">*</span>
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input asp-for="EstimatedBudget" class="form-control form-control-lg" min="0.01" step="0.01" placeholder="0.00" />
                                    </div>
                                <div class="form-text">@Localizer["Enter the total estimated budget for this project (minimum $0.01)"]</div>
                                    <span asp-validation-for="EstimatedBudget" class="invalid-feedback d-block"></span>
                                </div>

                                <!-- Stakeholders -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-users me-2"></i>@Localizer["Stakeholders"]
                                </h6>
                                <div class="mb-4">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-industry me-2"></i>
                                        @Localizer["Sectors"] <span class="text-danger">*</span>
                                    </label>
                                    <select asp-for="Sectors" class="form-select" asp-items="ViewBag.SectorList" multiple size="4">
                                        <option disabled>@Localizer["Select one or more sectors"]</option>
                                    </select>
                                    <div class="form-text">@Localizer["Hold Ctrl/Cmd to select multiple sectors"]</div>
                                    <div id="sectors-validation-error" class="invalid-feedback d-block" style="display: none;"></div>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="ProjectManagerCode" class="form-label fw-bold">
                                        <i class="fas fa-user-tie me-2"></i>
                                        @Localizer["Project Manager"] <span class="text-danger">*</span>
                                    </label>
                                    <select asp-for="ProjectManagerCode" class="form-select form-select-lg" asp-items="ViewBag.ProjectManager">
                                        <option value="">-- Select Project Manager --</option>
                                    </select>
                                <div class="form-text">@Localizer["Choose the primary manager responsible for this project"]</div>
                                    <span asp-validation-for="ProjectManagerCode" class="invalid-feedback d-block"></span>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="SuperVisorCode" class="form-label fw-bold">
                                        <i class="fas fa-user-check me-2"></i>
                                        @Localizer["Supervisor"] <span class="text-danger">*</span>
                                    </label>
                                    <select asp-for="SuperVisorCode" class="form-select form-select-lg" asp-items="ViewBag.SuperVisor">
                                        <option value="">-- Select Supervisor --</option>
                                    </select>
                                <div class="form-text">@Localizer["Choose the supervisor who will oversee this project"]</div>
                                    <span asp-validation-for="SuperVisorCode" class="invalid-feedback d-block"></span>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="MinistryCode" class="form-label fw-bold">
                                        <i class="fas fa-building me-2"></i>
                                        @Localizer["Ministry"]
                                    </label>
                                    <select asp-for="MinistryCode" class="form-select form-select-lg" asp-items="ViewBag.MinistryList" id="ministrySelect">
                                        <option value="">@Localizer["Select Ministry"]</option>
                                    </select>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="GoalCode" class="form-label fw-bold">@Localizer["SDGs"]</label>
                                    <select asp-for="GoalCode" class="form-select form-select-lg" asp-items="ViewBag.Goals">
                                        <option value="">@Localizer["SDGs"]</option>
                                    </select>
                                </div>

                                <!-- Donor Selection -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">@Localizer["Available Donors"]</label>
                                    <div class="row g-3">
                                        <div class="col-md-8">
                                            <select class="form-select form-select-lg" id="availableDonorSelect">
                                                <option value="">@Localizer["Select a donor to add"]</option>
                                                @if (ViewBag.Donor != null)
                                                {
                                                    var donorSelectList = ViewBag.Donor as SelectList;
                                                    if (donorSelectList != null)
                                                    {
                                                        @foreach (var item in donorSelectList)
                                                        {
                                                            <option value="@item.Value">@item.Text</option>
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="button" id="addDonorBtn" class="btn btn-primary btn-lg w-100">
                                                <i class="fas fa-plus me-2"></i>@Localizer["Add Donor"]
                                            </button>
                                        </div>
                                    </div>
                                    <div class="form-text">@Localizer["Select donors one by one and specify their funding percentages"]</div>
                                </div>

                                <!-- Selected Donors List (Hidden input for form submission) -->
                                <select asp-for="Donors" multiple style="display: none;" id="selectedDonorsInput"></select>

                                <!-- Donor Funding Breakdown -->
                                <div id="donorFundingSection" style="display: none;">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-percentage me-2"></i>@Localizer["Donor Funding Breakdown"]
                                    </h6>
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        @Localizer["Use sliders to specify the funding percentage for each donor. Total cannot exceed 100%."]
                                    </div>

                                    <div id="donorContributionList" class="mb-4"></div>

                                    <div class="row g-3 mb-4">
                                        <div class="col-md-6">
                                            <div class="card bg-light">
                                                <div class="card-body">
                                                    <h6 class="card-title mb-2">
                                                        <i class="fas fa-calculator me-2"></i>@Localizer["Total Percentage"]
                                                    </h6>
                                                    <div class="d-flex align-items-center">
                                                        <span id="totalPercentage" class="h4 mb-0 me-2">0.00</span>
                                                        <span class="text-muted">%</span>
                                                    </div>
                                                    <small id="percentageStatus" class="text-muted">@Localizer["Cannot exceed 100%"]</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="card bg-light">
                                                <div class="card-body">
                                                    <h6 class="card-title mb-2">
                                                        <i class="fas fa-dollar-sign me-2"></i>@Localizer["Total Funding Amount"]
                                                    </h6>
                                                    <div class="d-flex align-items-center">
                                                        <span class="me-1">$</span>
                                                        <span id="totalFundingAmount" class="h4 mb-0">0.00</span>
                                                    </div>
                                                    <small class="text-muted">@Localizer["Based on estimated budget"]</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <input type="hidden" id="donorFundingData" name="DonorFundingBreakdown" />
                                </div>

                                    </div>

                                <!-- Indicators -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-bullseye me-2"></i>@Localizer["Project Indicators"]
                                </h6>
                                <div class="mb-4">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-chart-line me-2"></i>
                                        @Localizer["Select Indicator"] <span class="text-danger">*</span>
                                    </label>
                                    <select name="SelectedIndicators" class="form-select form-select-lg" id="indicatorSelect">
                                        <option value="">-- @Localizer["Select an indicator"] --</option>
                                        @if (ViewBag.Indicators != null)
                                        {
                                            @foreach (var indicator in ViewBag.Indicators as List<Indicator>)
                                            {
                                                <option value="@indicator.IndicatorCode" data-target="@indicator.Target">
                                                    [@indicator.IndicatorCode] @indicator.Name
                                                    @if (indicator.Target > 0)
                                                    {
                                                        <text> (Target: @indicator.Target.ToString("N2"))</text>
                                                    }
                                                </option>
                                            }
                                        }
                                    </select>
                            <div class="form-text">@Localizer["Choose the key performance indicator for measuring project success"]</div>
                                    <div id="indicator-validation-error" class="invalid-feedback d-block" style="display: none;"></div>
                                </div>

                                <!-- Files Upload -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-file-upload me-2"></i>@Localizer["Project Documents"]
                                </h6>
                                <div class="mb-4">
                                    <label class="form-label fw-bold">@Localizer["Upload Files"]</label>
                                    <input type="file" name="UploadedFiles" multiple class="form-control form-control-lg" />
                                    <div class="form-text">Maximum file size: 10MB. Allowed types: PDF, DOC, XLS, JPG, PNG</div>
                                </div>
                        <!-- Form Actions -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4 pt-4 border-top">
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-lg px-4">
                                <i class="fas fa-arrow-left me-2"></i>@Localizer["Cancel"]
                            </a>
                            <button type="submit" class="btn btn-primary btn-lg px-4">
                                <i class="fas fa-save me-2"></i>@Localizer["Create Project"]
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<partial name="_ValidationScriptsPartial" />

<!-- Standard Styles -->
<style>
    .card {
        border-radius: 0.5rem;
        border: none;
    }

    .form-control-lg, .form-select-lg {
        padding: 0.75rem 1rem;
        font-size: 1.05rem;
    }

    .form-control[readonly] {
        background-color: #f8f9fa;
        opacity: 1;
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .donor-funding-card {
        border: 1px solid #e3e6f0;
        transition: all 0.3s ease;
    }

    .donor-funding-card:hover {
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        border-color: #5a5c69;
    }

    .donor-amount {
        font-size: 1.1rem;
        color: #5a5c69;
    }

    #donorFundingSection .card.bg-light {
        border: 2px solid #e3e6f0;
    }

    #percentageStatus.text-success {
        font-weight: 600;
    }

    #percentageStatus.text-warning {
        font-weight: 600;
    }

    #percentageStatus.text-danger {
        font-weight: 600;
    }

    /* Enhanced slider styling */
    .donor-slider {
        cursor: pointer;
    }

    .donor-slider::-webkit-slider-thumb {
        background: #007bff;
        border: 2px solid #007bff;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        cursor: pointer;
        -webkit-appearance: none;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }

    .donor-slider::-webkit-slider-track {
        background: #e9ecef;
        height: 6px;
        border-radius: 3px;
    }

    .donor-slider::-moz-range-thumb {
        background: #007bff;
        border: 2px solid #007bff;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }

    .donor-slider::-moz-range-track {
        background: #e9ecef;
        height: 6px;
        border-radius: 3px;
    }

    .percentage-display {
        font-weight: 600;
        color: #007bff;
    }

    .remove-donor-btn {
        border-radius: 50%;
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .remove-donor-btn:hover {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }

    @@media (max-width: 768px) {
        .d-md-flex {
            flex-direction: column !important;
        }
        .justify-content-md-end {
            align-items: stretch !important;
        }
        .donor-funding-card .col-md-3,
        .donor-funding-card .col-md-6 {
            margin-bottom: 10px;
        }
    }





</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let selections = [];

    // Handle Entire Country checkbox
    $("#entireCountryCheckbox").change(function() {
        const isChecked = $(this).is(':checked');

        if (isChecked) {
            // Disable location selectors
            $("#location-selector select").prop('disabled', true).val('');
            $("#add-location, #reset-dropdowns").prop('disabled', true);

            // Clear any selected locations
            selections = [];
            $("#selected-locations").empty();
            $("#location-data").val('');

            // Show info message
            if ($("#entire-country-info").length === 0) {
                $("#location-selector").before(`
                    <div id="entire-country-info" class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>@Localizer["This project will cover all locations in the country. Specific location selection is disabled."]
                    </div>
                `);
            }
        } else {
            // Enable location selectors
            $("#location-selector select").prop('disabled', false);
            $("#add-location, #reset-dropdowns").prop('disabled', false);

            // Remove info message
            $("#entire-country-info").remove();
        }
    });

    // Cascading dropdowns
    $("#governorate").change(function () {
        const selectedValue = $(this).val();

        if (selectedValue) {
            $.get("/Projects/GetDistricts", { governorateCode: selectedValue }, function (data) {
                fillSelect("#district", data);
                resetSelect("#subdistrict");
                resetSelect("#community");
            });
        } else {
            resetSelect("#district");
            resetSelect("#subdistrict");
            resetSelect("#community");
        }
    });

    $("#district").change(function () {
        $.get("/Projects/GetSubDistricts", { districtCode: $(this).val() }, function (data) {
            fillSelect("#subdistrict", data);
            resetSelect("#community");
        });
    });

    $("#subdistrict").change(function () {
        $.get("/Projects/GetCommunities", { subDistrictCode: $(this).val() }, function (data) {
            fillSelect("#community", data);
        });
    });

    // Add location
    $("#add-location").click(function () {
        const govCode = $("#governorate").val();
        const govName = $("#governorate option:selected").text();

        const distCode = $("#district").val();
        const distName = $("#district option:selected").text();

        const subCode = $("#subdistrict").val();
        const subName = $("#subdistrict option:selected").text();

        const commCode = $("#community").val();
        const commName = $("#community option:selected").text();

        if (!govCode || !distCode || !subCode || !commCode) {
            showValidationMessage("Please select all location levels.");
            return;
        }

        // Check for duplicates
        const exists = selections.some(x =>
            x.GovernorateCode === govCode &&
            x.DistrictCode === distCode &&
            x.SubDistrictCode === subCode &&
            x.CommunityCode === commCode
        );

        if (exists) {
            showValidationMessage("This location has already been added.");
            return;
        }

        // Add location
        const item = {
            GovernorateCode: govCode,
            DistrictCode: distCode,
            SubDistrictCode: subCode,
            CommunityCode: commCode
        };

        selections.push(item);

        // Create list item with "Clear" button
        const $li = $(`
            <li class="list-group-item">
                <span>${govName} > ${distName} > ${subName} > ${commName}</span>
                <button type="button" class="btn btn-sm btn-outline-danger btn-clear">
                    <i class="fas fa-times"></i> Clear
                </button>
            </li>
        `);

        // Attach remove handler
        $li.find(".btn-clear").click(function () {
            // Remove from selections array
            selections = selections.filter(x =>
                !(x.GovernorateCode === govCode &&
                  x.DistrictCode === distCode &&
                  x.SubDistrictCode === subCode &&
                  x.CommunityCode === commCode)
            );
            // Remove from DOM
            $li.remove();
            // Update hidden input
            $("#location-data").val(JSON.stringify(selections));
        });

        $("#selected-locations").append($li);
        $("#location-data").val(JSON.stringify(selections));

        resetDropdowns();
    });

    // Reset handler
    $("#reset-dropdowns").click(resetDropdowns);

    // Utility functions
    function fillSelect(selector, data) {
        let select = $(selector);
        select.empty().append(`<option value="">-- Select --</option>`);
        data.forEach(x => select.append(`<option value="${x.code}">${x.name}</option>`));
    }

    function resetSelect(selector) {
        $(selector).empty().append(`<option value="">-- Select --</option>`);
    }

    function resetDropdowns() {
        $("#governorate").val("");
        resetSelect("#district");
        resetSelect("#subdistrict");
        resetSelect("#community");
    }

    // Validation message display
    function showValidationMessage(message, type = 'warning') {
        const alertBox = $("#location-validation-alert");
        let iconClass, alertClass;

        switch(type) {
            case 'success':
                iconClass = 'fa-check-circle';
                alertClass = 'alert-success';
                break;
            case 'info':
                iconClass = 'fa-info-circle';
                alertClass = 'alert-info';
                break;
            default:
                iconClass = 'fa-exclamation-triangle';
                alertClass = 'alert-warning';
        }

        if (alertBox.length === 0) {
            $("#location-selector").after(`
                <div id="location-validation-alert" class="alert ${alertClass} mt-3">
                    <i class="fas ${iconClass} me-2"></i>${message}
                </div>
            `);
        } else {
            alertBox.removeClass('alert-warning alert-success alert-info').addClass(alertClass);
            alertBox.html(`<i class="fas ${iconClass} me-2"></i>${message}`).show();
        }

        // Don't auto-hide info messages (processing messages)
        if (type !== 'info') {
            setTimeout(() => $("#location-validation-alert").fadeOut(), 3000);
        }
    }

    // Old validation message display (keeping for compatibility)
    function showValidationMessage_old(message) {
        const alertBox = $("#location-validation-alert");

        if (alertBox.length === 0) {
            $("#location-selector").after(`
                <div id="location-validation-alert" class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>${message}
                </div>
            `);
        } else {
            alertBox.html(`<i class="fas fa-exclamation-triangle me-2"></i>${message}`).show();
        }

        setTimeout(() => $("#location-validation-alert").fadeOut(), 3000);
    }


    // Handle indicator selection preview (single select)
    $("#indicatorSelect").change(function () {
        const selectedOption = $(this).find('option:selected');
        const previewDiv = $("#selectedIndicatorsPreview");
        const listDiv = $("#selectedIndicatorsList");
        
        if (selectedOption.val() && selectedOption.val() !== "") {
            const indicatorCode = selectedOption.val();
            const indicatorText = selectedOption.text();
            const target = selectedOption.data('target');
            
            const html = `
                <div class="d-flex justify-content-between align-items-center p-2 border rounded bg-white">
                    <div>
                        <span class="badge bg-success me-2">${indicatorCode}</span>
                        <span class="fw-medium">${indicatorText.split(']')[1]?.trim() || indicatorText}</span>
                    </div>
                    ${target > 0 ? `<small class="text-muted">Target: ${parseFloat(target).toFixed(2)}</small>` : ''}
                </div>
            `;
            
            listDiv.html(html);
            previewDiv.show();
        } else {
            previewDiv.hide();
        }
    });

    // Calculate plans count based on project duration
    function calculatePlansCount() {
        const startDate = new Date($('[name="StartDate"]').val());
        const endDate = new Date($('[name="EndDate"]').val());
        
        if (startDate && endDate && endDate > startDate) {
            // Calculate months between dates
            const months = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
                          (endDate.getMonth() - startDate.getMonth()) + 1;
            $('#PlansCount').val(Math.max(1, months));
        } else {
            $('#PlansCount').val(1);
        }
    }

    // Update plans count when dates change
    $('[name="StartDate"], [name="EndDate"]').on('change', calculatePlansCount);

    // Calculate initial plans count on page load
    $(document).ready(function() {
        calculatePlansCount();

        // Restore preserved form data after validation failure
        restoreFormData();

        // Disable ministry dropdown for ministry users
        var isMinistryUser = @Html.Raw(Json.Serialize(ViewBag.IsMinistryUser ?? false));
        if (isMinistryUser) {
            $('#ministrySelect').prop('disabled', true);
        }
    });

    let selectedDonors = [];
    let donorFundingData = {};

    // Add donor button click handler
    $('#addDonorBtn').click(function() {
        const donorValue = $('#availableDonorSelect').val();
        const donorText = $('#availableDonorSelect option:selected').text();

        if (!donorValue || donorValue === '') {
            alert('Please select a donor first.');
            return;
        }

        // Check if donor is already added
        if (selectedDonors.some(d => d.value === donorValue)) {
            alert('This donor has already been added.');
            return;
        }

        // Add donor to selected list
        selectedDonors.push({
            value: donorValue,
            text: donorText
        });

        // Initialize percentage
        donorFundingData[donorValue] = 0;

        // Update UI
        updateDonorFundingSection();
        updateSelectedDonorsInput();

        // Reset dropdown
        $('#availableDonorSelect').val('');
    });

    // Update the donor funding section
    function updateDonorFundingSection() {
        const donorFundingSection = $('#donorFundingSection');
        const donorContributionList = $('#donorContributionList');

        if (selectedDonors.length === 0) {
            donorFundingSection.hide();
            return;
        }

        donorFundingSection.show();
        donorContributionList.empty();

        // Create cards with sliders for each selected donor
        selectedDonors.forEach(donor => {
            const currentPercentage = donorFundingData[donor.value] || 0;

            const donorHtml = `
                <div class="card mb-3 donor-funding-card" data-donor="${donor.value}">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-4">
                                <h6 class="mb-1">
                                    <i class="fas fa-hand-holding-usd me-2"></i>${donor.text}
                                </h6>
                                <small class="text-muted">@Localizer["Funding Contribution"]</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label small mb-1">@Localizer["Percentage:"] <span class="percentage-display" data-donor="${donor.value}">${currentPercentage.toFixed(1)}%</span></label>
                                <input type="range"
                                       class="form-range donor-slider"
                                       data-donor="${donor.value}"
                                       min="0"
                                       max="100"
                                       step="0.1"
                                       value="${currentPercentage}">
                                <div class="d-flex justify-content-between small text-muted">
                                    <span>0%</span>
                                    <span>100%</span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-end">
                                    <strong class="donor-amount" data-donor="${donor.value}">$0.00</strong>
                                    <br>
                                    <small class="text-muted">@Localizer["Amount:"]</small>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-outline-danger btn-sm remove-donor-btn" data-donor="${donor.value}">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            donorContributionList.append(donorHtml);
        });

        calculateDonorTotals();
    }

    // Handle slider changes
    $(document).on('input', '.donor-slider', function() {
        const donorValue = $(this).data('donor');
        const percentage = parseFloat($(this).val()) || 0;

        donorFundingData[donorValue] = percentage;

        // Update percentage display
        $(`.percentage-display[data-donor="${donorValue}"]`).text(percentage.toFixed(1) + '%');

        calculateDonorTotals();
    });

    // Handle remove donor button
    $(document).on('click', '.remove-donor-btn', function() {
        const donorValue = $(this).data('donor');

        // Remove from selected donors array
        selectedDonors = selectedDonors.filter(d => d.value !== donorValue);

        // Remove from funding data
        delete donorFundingData[donorValue];

        // Update UI
        updateDonorFundingSection();
        updateSelectedDonorsInput();
    });

    // Update the hidden select input for form submission
    function updateSelectedDonorsInput() {
        const hiddenSelect = $('#selectedDonorsInput');
        hiddenSelect.empty();

        selectedDonors.forEach(donor => {
            hiddenSelect.append(`<option value="${donor.value}" selected>${donor.text}</option>`);
        });
    }

    // Calculate totals and update displays
    function calculateDonorTotals() {
        const budget = parseFloat($('[name="EstimatedBudget"]').val()) || 0;
        let totalPercentage = 0;
        let totalAmount = 0;

        // Update individual donor amounts and calculate totals
        selectedDonors.forEach(donor => {
            const percentage = donorFundingData[donor.value] || 0;
            const amount = (budget * percentage) / 100;

            totalPercentage += percentage;
            totalAmount += amount;

            // Update the display for this donor
            $(`.donor-amount[data-donor="${donor.value}"]`).text('$' + amount.toFixed(2));
        });

        // Update total displays
        $('#totalPercentage').text(totalPercentage.toFixed(1));
        $('#totalFundingAmount').text(totalAmount.toFixed(2));

        // Update status message
        const statusElement = $('#percentageStatus');
        if (totalPercentage > 100) {
            statusElement.text('Error: Exceeds 100%').removeClass('text-success text-muted text-warning').addClass('text-danger');
        } else if (totalPercentage === 100) {
            statusElement.text('@Localizer["Fully funded"] (100%)').removeClass('text-warning text-danger text-muted').addClass('text-success');
        } else if (totalPercentage > 0) {
            statusElement.text(`@Localizer["Partially funded"] (${totalPercentage.toFixed(1)}%)`).removeClass('text-success text-danger text-muted').addClass('text-warning');
        } else {
            statusElement.text('@Localizer["Cannot exceed 100%"]').removeClass('text-success text-warning text-danger').addClass('text-muted');
        }

        // Update hidden field with funding data
        $('#donorFundingData').val(JSON.stringify(donorFundingData));
    }

    // Update calculations when budget changes
    $('[name="EstimatedBudget"]').on('input change', function() {
        calculateDonorTotals();
    });

    // Enhanced form validation before submission
    $('form.needs-validation').on('submit', function (e) {
        let isValid = true;
        let errorMessages = [];

        // Check if locations are selected (unless "Entire Country" is checked)
        const isEntireCountry = $("#entireCountryCheckbox").is(':checked');
        if (!isEntireCountry && selections.length === 0) {
            errorMessages.push("At least one project location must be selected, or check 'Entire Country' option.");
            isValid = false;
        }

        // Check if sectors are selected
        const selectedSectors = $('select[name="Sectors"]').val();
        if (!selectedSectors || selectedSectors.length === 0) {
            errorMessages.push("At least one sector must be selected.");
            $('#sectors-validation-error').text("At least one sector must be selected.").show();
            isValid = false;
        } else {
            $('#sectors-validation-error').hide();
        }

        // Check if indicator is selected
        const selectedIndicator = $('#indicatorSelect').val();
        if (!selectedIndicator) {
            errorMessages.push("An indicator must be selected.");
            $('#indicator-validation-error').text("An indicator must be selected.").show();
            isValid = false;
        } else {
            $('#indicator-validation-error').hide();
            // Ensure the selected indicator is added to the form for submission
            if ($('input[name="SelectedIndicators"]').length === 0) {
                $('<input>').attr({
                    type: 'hidden',
                    name: 'SelectedIndicators',
                    value: selectedIndicator
                }).appendTo('form');
            } else {
                $('input[name="SelectedIndicators"]').val(selectedIndicator);
            }
        }

        // Check if project manager is selected
        const projectManager = $('select[name="ProjectManagerCode"]').val();
        if (!projectManager) {
            errorMessages.push("A project manager must be selected.");
            isValid = false;
        }

        // Check if supervisor is selected
        const supervisor = $('select[name="SuperVisorCode"]').val();
        if (!supervisor) {
            errorMessages.push("A supervisor must be selected.");
            isValid = false;
        }

        // Check date range
        const startDate = new Date($('input[name="StartDate"]').val());
        const endDate = new Date($('input[name="EndDate"]').val());
        if (startDate && endDate && endDate <= startDate) {
            errorMessages.push("End date must be after start date.");
            isValid = false;
        }

        // Check donor funding total if donors are selected (should not exceed 100%)
        if (selectedDonors.length > 0) {
            const totalPercentage = parseFloat($('#totalPercentage').text());
            if (totalPercentage > 100) {
                errorMessages.push("Total donor funding percentage cannot exceed 100%.");
                isValid = false;
            }
        }

        if (!isValid) {
            e.preventDefault();
            // Show all error messages
            const errorHtml = '<div id="form-validation-alert" class="alert alert-danger alert-dismissible fade show mt-3" role="alert">' +
                '<strong><i class="fas fa-exclamation-triangle me-2"></i>Please fix the following issues:</strong>' +
                '<ul class="mb-0 mt-2">' +
                errorMessages.map(msg => `<li>${msg}</li>`).join('') +
                '</ul>' +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                '</div>';

            // Remove existing form validation alert and add new one
            $('#form-validation-alert').remove();
            $('#main-form-body').prepend(errorHtml);

            // Scroll to top of form
            $('html, body').animate({
                scrollTop: $('#main-form-body').offset().top - 100
            }, 500);

            return false;
        }
    });

    // Function to restore form data after validation failure
    function restoreFormData() {
        // Get preserved data from ViewBag
        var selectedSectorCodes = @Html.Raw(Json.Serialize(ViewBag.SelectedSectorCodes ?? new List<string>()));
        var selectedDonorCodes = @Html.Raw(Json.Serialize(ViewBag.SelectedDonorCodes ?? new List<string>()));
        var selectedIndicators = @Html.Raw(Json.Serialize(ViewBag.SelectedIndicators ?? new List<int>()));
        var locationSelections = @Html.Raw(Json.Serialize(ViewBag.LocationSelections ?? ""));
        var donorFundingBreakdown = @Html.Raw(Json.Serialize(ViewBag.DonorFundingBreakdown ?? ""));

        // Restore selected sectors
        if (selectedSectorCodes && selectedSectorCodes.length > 0) {
            selectedSectorCodes.forEach(function(code) {
                $('select[name="Sectors"] option[value="' + code + '"]').prop('selected', true);
            });
        }

        // Restore selected indicators
        if (selectedIndicators && selectedIndicators.length > 0) {
            // Add hidden input to preserve the selected indicator for form submission
            $('<input>').attr({
                type: 'hidden',
                name: 'SelectedIndicators',
                value: selectedIndicators[0]
            }).appendTo('form');

            $('#indicatorSelect').val(selectedIndicators[0]).trigger('change');
        }

        // Restore location selections
        if (locationSelections && locationSelections !== '') {
            try {
                if (typeof locationSelections === 'string') {
                    selections = JSON.parse(locationSelections);
                } else {
                    selections = locationSelections;
                }
                restoreLocationSelections();
            } catch (e) {
                console.log('Error parsing location selections:', e);
            }
        }

        // Restore donor selections and funding data
        if (selectedDonorCodes && selectedDonorCodes.length > 0) {
            restoreDonorSelections(selectedDonorCodes, donorFundingBreakdown);
        }
    }

    // Function to restore location selections in the UI
    function restoreLocationSelections() {
        if (selections && selections.length > 0) {
            selections.forEach(function(item) {
                // Create list item display
                const $li = $(`
                    <li class="list-group-item">
                        <span>Governorate ${item.GovernorateCode} > District ${item.DistrictCode} > SubDistrict ${item.SubDistrictCode} > Community ${item.CommunityCode}</span>
                        <button type="button" class="btn btn-sm btn-outline-danger btn-clear">
                            <i class="fas fa-times"></i> Clear
                        </button>
                    </li>
                `);

                // Attach remove handler
                $li.find(".btn-clear").click(function () {
                    selections = selections.filter(x =>
                        !(x.GovernorateCode === item.GovernorateCode &&
                          x.DistrictCode === item.DistrictCode &&
                          x.SubDistrictCode === item.SubDistrictCode &&
                          x.CommunityCode === item.CommunityCode)
                    );
                    $li.remove();
                    $("#location-data").val(JSON.stringify(selections));
                });

                $("#selected-locations").append($li);
            });

            // Update hidden input
            $("#location-data").val(JSON.stringify(selections));
        }
    }

    // Function to restore donor selections
    function restoreDonorSelections(donorCodes, fundingBreakdown) {
        selectedDonors = [];
        donorFundingData = {};

        // Parse funding breakdown if available
        var fundingData = {};
        if (fundingBreakdown && fundingBreakdown !== '') {
            try {
                if (typeof fundingBreakdown === 'string') {
                    fundingData = JSON.parse(fundingBreakdown);
                } else {
                    fundingData = fundingBreakdown;
                }
            } catch (e) {
                console.log('Error parsing donor funding breakdown:', e);
            }
        }

        // Get donor text from select options
        donorCodes.forEach(function(code) {
            var donorText = $('#availableDonorSelect option[value="' + code + '"]').text();
            if (donorText) {
                selectedDonors.push({
                    value: code,
                    text: donorText
                });
                donorFundingData[code] = fundingData[code] || 0;
            }
        });

        // Update UI
        updateDonorFundingSection();
        updateSelectedDonorsInput();
    }


</script>
