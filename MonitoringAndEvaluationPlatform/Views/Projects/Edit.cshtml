@model MonitoringAndEvaluationPlatform.Models.Project
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@using System.Web

@{
    ViewData["Title"] = "Edit Project";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    var governorates = ViewBag.Governorates as List<Governorate>;
    var selectedLocationsJson = JsonConvert.SerializeObject(ViewBag.SelectedLocations);
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="dashboard-title">
                <i class="fas fa-edit me-3"></i>
                @Localizer["Edit Project"]
            </h1>
            <p class="dashboard-subtitle">
                @Localizer["Update the project information and settings"]
            </p>
        </div>
        <a asp-action="Index" class="btn btn-outline-secondary btn-lg">
            <i class="fas fa-arrow-left me-2"></i>@Localizer["Back to Projects"]
        </a>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-project-diagram me-2"></i>
                        @Localizer["Project Information"]
                    </h5>
                </div>

                <div class="card-body">
                    @using (Html.BeginForm("Edit", "Projects", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                        <input type="hidden" asp-for="ProjectID" />

                        <div class="row">
                            <!-- Left Column -->
                            <div class="col-md-6">
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-info-circle me-2"></i>@Localizer["Basic Information"]
                                </h6>

                                <!-- Project Name -->
                                <div class="mb-4">
                                    <label asp-for="ProjectName" class="form-label fw-bold">
                                        <i class="fas fa-project-diagram me-2"></i>
                                        @Localizer["Project Name"]
                                    </label>
                                    <input asp-for="ProjectName" class="form-control form-control-lg" placeholder="@Localizer["Enter project name"]" required />
                                    <span asp-validation-for="ProjectName" class="text-danger small"></span>
                                </div>

                                <!-- Timeline -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-clock me-2"></i>@Localizer["Project Timeline"]
                                </h6>
                                <div class="row g-3 mb-4">
                                    <div class="col-md-6">
                                        <label asp-for="StartDate" class="form-label fw-bold">
                                            <i class="fas fa-play me-2"></i>
                                            @Localizer["Start Date"]
                                        </label>
                                        <input asp-for="StartDate" type="date" class="form-control form-control-lg" required />
                                        <span asp-validation-for="StartDate" class="text-danger small"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="EndDate" class="form-label fw-bold">
                                            <i class="fas fa-stop me-2"></i>
                                            @Localizer["End Date"]
                                        </label>
                                        <input asp-for="EndDate" type="date" class="form-control form-control-lg" required />
                                        <span asp-validation-for="EndDate" class="text-danger small"></span>
                                    </div>
                                </div>

                                <!-- Budget Information -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-dollar-sign me-2"></i>@Localizer["Budget Information"]
                                </h6>
                                <div class="mb-4">
                                    <label asp-for="EstimatedBudget" class="form-label fw-bold">
                                        <i class="fas fa-coins me-2"></i>
                                        @Localizer["Estimated Budget"]
                                    </label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input asp-for="EstimatedBudget" class="form-control form-control-lg" min="0.01" step="0.01" required />
                                    </div>
                                    <span asp-validation-for="EstimatedBudget" class="text-danger small"></span>
                                </div>

                                <!-- Location Hierarchy -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-map-marker-alt me-2"></i>@Localizer["Project Location"]
                                </h6>
                                <!-- Entire Country Checkbox -->
                                <div class="mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="entireCountryCheckbox" name="IsEntireCountry" value="true" @(Model.IsEntireCountry ? "checked" : "")>
                                        <label class="form-check-label fw-bold" for="entireCountryCheckbox">
                                            <i class="fas fa-flag me-2"></i>@Localizer["This project covers the entire country"]
                                        </label>
                                    </div>
                                    <div class="form-text">@Localizer["Check this if the project is nationwide and not limited to specific locations"]</div>
                                </div>
                                <div id="location-selector" class="row g-3 mb-3">
                                    <div class="col-md-6">
                                        <select id="governorate" class="form-select">
                                            <option value="">-- @Localizer["Select Governorate"] --</option>
                                            @if (governorates != null)
                                            {
                                                @foreach (var gov in governorates)
                                                {
                                                    var displayName = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName == "ar"
                                                    ? gov.AR_Name
                                                    : gov.EN_Name;
                                                    <option value="@gov.Code">@displayName</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <select id="district" class="form-select">
                                            <option value="">-- @Localizer["Select District"] --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <select id="subdistrict" class="form-select">
                                            <option value="">-- @Localizer["Select Subdistrict"] --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <select id="community" class="form-select">
                                            <option value="">-- @Localizer["Select Community"] --</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="d-flex gap-2 mb-3">
                                    <button type="button" id="add-location" class="btn btn-primary">
                                        <i class="fas fa-plus me-2"></i>@Localizer["Add Location"]
                                    </button>
                                    <button type="button" id="reset-dropdowns" class="btn btn-outline-secondary">
                                        <i class="fas fa-redo me-2"></i>@Localizer["Reset"]
                                    </button>
                                </div>
                                <ul id="selected-locations" class="list-group mb-3"></ul>
                                <input type="hidden" id="location-data" name="selections" />
                                <div id="location-validation-alert" style="display:none;" class="alert alert-warning"></div>
                            </div>

                            <!-- Right Column -->
                            <div class="col-md-6">
                                <!-- Stakeholders -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-users me-2"></i>@Localizer["Stakeholders"]
                                </h6>        
                                <div class="mb-4">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-industry me-2"></i>
                                        @Localizer["Sectors"]
                                    </label>
                                    <select name="SelectedSectorCodes"
                                            class="form-select"
                                            asp-items="ViewBag.SectorList"
                                            multiple
                                            size="4">
                                        <option disabled>@Localizer["Select one or more sectors"]</option>
                                    </select>
                                    <div class="form-text">@Localizer["Hold Ctrl/Cmd to select multiple sectors"]</div>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="ProjectManagerCode" class="form-label fw-bold">
                                        <i class="fas fa-user-tie me-2"></i>
                                        @Localizer["Project Manager"]
                                    </label>
                                    <select asp-for="ProjectManagerCode"
                                            class="form-select form-select-lg"
                                            asp-items="ViewBag.ProjectManager">
                                        <option value="">@Localizer["Select Project Manager"]</option>
                                    </select>
                                </div>
                                <div class="mb-4">
                                    <label asp-for="SuperVisorCode" class="form-label fw-bold">
                                        <i class="fas fa-user-check me-2"></i>
                                        @Localizer["Supervisor"]
                                    </label>
                                    <select asp-for="SuperVisorCode"
                                            class="form-select form-select-lg"
                                            asp-items="ViewBag.SuperVisor">
                                        <option value="">@Localizer["Select Supervisor"]</option>
                                    </select>
                                </div>
                                <div class="mb-4">
                                    <label asp-for="MinistryCode" class="form-label fw-bold">
                                        <i class="fas fa-building me-2"></i>
                                        @Localizer["Ministry"]
                                    </label>
                                    <div class="dropdown ministry-dropdown">
                                        <button class="btn btn-outline-secondary dropdown-toggle form-control form-control-lg text-start d-flex align-items-center justify-content-between" type="button" id="ministryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                            <span id="selectedMinistryDisplay" class="text-muted">@Localizer["Select Ministry"]</span>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-lg w-100" aria-labelledby="ministryDropdown" style="max-height: 400px; overflow-y: auto;">
                                            @if (ViewBag.Ministries != null)
                                            {
                                                var isArabic = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName == "ar";
                                                var ministries = ViewBag.Ministries as List<Ministry>;
                                                @foreach (var ministry in ministries)
                                                {
                                                    var ministryName = isArabic ? ministry.MinistryDisplayName_AR : ministry.MinistryDisplayName_EN;
                                                    <li>
                                                        <a class="dropdown-item ministry-item d-flex align-items-center py-2" href="#" data-ministry-code="@ministry.Code" data-ministry-name="@ministryName" data-ministry-logo="@ministry.Logo">
                                                            @if (!string.IsNullOrEmpty(ministry.Logo))
                                                            {
                                                                <span class="ministry-logo me-2 d-flex align-items-center justify-content-center" style="width: 30px; height: 30px; font-size: 1.5rem;">@ministry.Logo</span>
                                                            }
                                                            else
                                                            {
                                                                <div class="ministry-logo-placeholder me-2 bg-light border rounded d-flex align-items-center justify-content-center" style="width: 30px; height: 30px;">
                                                                    <i class="fas fa-building text-muted" style="font-size: 0.8rem;"></i>
                                                                </div>
                                                            }
                                                            <span>@ministryName</span>
                                                        </a>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                    <input type="hidden" asp-for="MinistryCode" id="ministrySelect" />
                                </div>
                                <div class="mb-4">
                                    <label asp-for="GoalCode" class="form-label fw-bold">@Localizer["SDGs"]</label>
                                    <select asp-for="GoalCode" class="form-select form-select-lg" asp-items="ViewBag.Goals">
                                        <option value="">@Localizer["SDGs"]</option>
                                    </select>
                                </div>
                                <!-- Donor Selection -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">@Localizer["Available Donors"]</label>
                                    <div class="row g-3">
                                        <div class="col-md-8">
                                            <select class="form-select form-select-lg" id="availableDonorSelect">
                                                <option value="">@Localizer["Select a donor to add"]</option>
                                                @if (ViewBag.DonorList != null)
                                                {
                                                    var donorSelectList = ViewBag.DonorList as MultiSelectList;
                                                    if (donorSelectList != null)
                                                    {
                                                        @foreach (var item in donorSelectList)
                                                        {
                                                            <option value="@item.Value">@item.Text</option>
                                                        }
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="button" id="addDonorBtn" class="btn btn-primary btn-lg w-100">
                                                <i class="fas fa-plus me-2"></i>@Localizer["Add Donor"]
                                            </button>
                                        </div>
                                    </div>
                                    <div class="form-text">@Localizer["Select donors one by one and specify their funding percentages"]</div>
                                </div>

                                <!-- Selected Donors List (Hidden input for form submission) -->
                                <select name="SelectedDonorCodes" multiple style="display: none;" id="selectedDonorsInput"></select>

                                <!-- Donor Funding Breakdown -->
                                <div id="donorFundingSection" style="display: none;">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-percentage me-2"></i>@Localizer["Donor Funding Breakdown"]
                                    </h6>
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        @Localizer["Use sliders to specify the funding percentage for each donor. Total cannot exceed 100%."]
                                    </div>

                                    <div id="donorContributionList" class="mb-4"></div>

                                    <div class="row g-3 mb-4">
                                        <div class="col-md-6">
                                            <div class="card bg-light">
                                                <div class="card-body">
                                                    <h6 class="card-title mb-2">
                                                        <i class="fas fa-calculator me-2"></i>@Localizer["Total Percentage"]
                                                    </h6>
                                                    <div class="d-flex align-items-center">
                                                        <span id="totalPercentage" class="h4 mb-0 me-2">0.00</span>
                                                        <span class="text-muted">%</span>
                                                    </div>
                                                    <small id="percentageStatus" class="text-muted">@Localizer["Cannot exceed 100%"]</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="card bg-light">
                                                <div class="card-body">
                                                    <h6 class="card-title mb-2">
                                                        <i class="fas fa-dollar-sign me-2"></i>@Localizer["Total Funding Amount"]
                                                    </h6>
                                                    <div class="d-flex align-items-center">
                                                        <span class="me-1">$</span>
                                                        <span id="totalFundingAmount" class="h4 mb-0">0.00</span>
                                                    </div>
                                                    <small class="text-muted">@Localizer["Based on estimated budget"]</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <input type="hidden" id="donorFundingData" name="DonorFundingBreakdown" />
                                </div>

                                <!-- Files Upload -->
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-file-upload me-2"></i>@Localizer["Project Documents"]
                                </h6>
                                <div class="mb-4">
                                    <label class="form-label fw-bold">@Localizer["Upload Additional Files"]</label>
                                    <input type="file"
                                           name="UploadedFiles"
                                           multiple
                                           class="form-control form-control-lg" />
                                    <div class="form-text">@Localizer["Maximum file size: 10MB. Allowed types: PDF, DOC, XLS, JPG, PNG"]</div>
                                </div>
                            </div>
                        </div>

                            <div class="card-header bg-light">
                                <h6 class="mb-0">@Localizer["Upload Additional Documents"]</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <input type="file"
                                           name="UploadedFiles"
                                           multiple
                                           class="form-control" />
                                    <small class="text-muted">
                                    @Localizer["You can add more files here. Max size: 10 MB."]
                                    </small>
                                </div>
                            </div>

                        <!-- Form Actions -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4 pt-4 border-top">
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-lg px-4">
                                <i class="fas fa-arrow-left me-2"></i>@Localizer["Cancel"]
                            </a>
                            <button type="submit" class="btn btn-primary btn-lg px-4">
                                <i class="fas fa-save me-2"></i>@Localizer["Save Changes"]
                            </button>
                        </div>
                    }
        </div>
    </div>
</div>


@await Html.PartialAsync("_ValidationScriptsPartial")

<!-- Standard Styles -->
<style>
    .card {
        border-radius: 0.5rem;
        border: none;
    }

    .form-control-lg, .form-select-lg {
        padding: 0.75rem 1rem;
        font-size: 1.05rem;
    }

    .form-control[readonly] {
        background-color: #f8f9fa;
        opacity: 1;
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .donor-funding-card {
        border: 1px solid #e3e6f0;
        transition: all 0.3s ease;
    }

    .donor-funding-card:hover {
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        border-color: #5a5c69;
    }

    .donor-amount {
        font-size: 1.1rem;
        color: #5a5c69;
    }

    #donorFundingSection .card.bg-light {
        border: 2px solid #e3e6f0;
    }

    #percentageStatus.text-success {
        font-weight: 600;
    }

    #percentageStatus.text-warning {
        font-weight: 600;
    }

    #percentageStatus.text-danger {
        font-weight: 600;
    }

    /* Enhanced slider styling */
    .donor-slider {
        cursor: pointer;
    }

    .donor-slider::-webkit-slider-thumb {
        background: #007bff;
        border: 2px solid #007bff;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        cursor: pointer;
        -webkit-appearance: none;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }

    .donor-slider::-webkit-slider-track {
        background: #e9ecef;
        height: 6px;
        border-radius: 3px;
    }

    .donor-slider::-moz-range-thumb {
        background: #007bff;
        border: 2px solid #007bff;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
    }

    .donor-slider::-moz-range-track {
        background: #e9ecef;
        height: 6px;
        border-radius: 3px;
    }

    .percentage-display {
        font-weight: 600;
        color: #007bff;
    }

    .remove-donor-btn {
        border-radius: 50%;
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .remove-donor-btn:hover {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }

    @@media (max-width: 768px) {
        .d-md-flex {
            flex-direction: column !important;
        }
        .justify-content-md-end {
            align-items: stretch !important;
        }
        .donor-funding-card .col-md-3,
        .donor-funding-card .col-md-6 {
            margin-bottom: 10px;
        }
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    let selections = [];

    // Handle Entire Country checkbox
    $("#entireCountryCheckbox").change(function() {
        const isChecked = $(this).is(':checked');

        if (isChecked) {
            // Disable location selectors
            $("#location-selector select").prop('disabled', true).val('');
            $("#add-location, #reset-dropdowns").prop('disabled', true);

            // Clear any selected locations
            selections = [];
            $("#selected-locations").empty();
            $("#location-data").val('');

            // Show info message
            if ($("#entire-country-info").length === 0) {
                $("#location-selector").before(`
                    <div id="entire-country-info" class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>@Localizer["This project will cover all locations in the country. Specific location selection is disabled."]
                    </div>
                `);
            }
        } else {
            // Enable location selectors
            $("#location-selector select").prop('disabled', false);
            $("#add-location, #reset-dropdowns").prop('disabled', false);

            // Remove info message
            $("#entire-country-info").remove();
        }
    });

    // Cascading dropdowns
    $("#governorate").change(function () {
        $.get("/Projects/GetDistricts", { governorateCode: $(this).val() }, function (data) {
            fillSelect("#district", data);
            resetSelect("#subdistrict");
            resetSelect("#community");
        });
    });

    $("#district").change(function () {
        $.get("/Projects/GetSubDistricts", { districtCode: $(this).val() }, function (data) {
            fillSelect("#subdistrict", data);
            resetSelect("#community");
        });
    });

    $("#subdistrict").change(function () {
        $.get("/Projects/GetCommunities", { subDistrictCode: $(this).val() }, function (data) {
            fillSelect("#community", data);
        });
    });

    // Add location
    $("#add-location").click(function () {
        const govCode = $("#governorate").val();
        const govName = $("#governorate option:selected").text();

        const distCode = $("#district").val();
        const distName = $("#district option:selected").text();

        const subCode = $("#subdistrict").val();
        const subName = $("#subdistrict option:selected").text();

        const commCode = $("#community").val();
        const commName = $("#community option:selected").text();

        if (!govCode || !distCode || !subCode || !commCode) {
            showValidationMessage("Please select all location levels.");
            return;
        }

        // Check for duplicates
        const exists = selections.some(x =>
            x.GovernorateCode === govCode &&
            x.DistrictCode === distCode &&
            x.SubDistrictCode === subCode &&
            x.CommunityCode === commCode
        );

        if (exists) {
            showValidationMessage("This location has already been added.");
            return;
        }

        // Add location
        const item = {
            GovernorateCode: govCode,
            DistrictCode: distCode,
            SubDistrictCode: subCode,
            CommunityCode: commCode
        };

        selections.push(item);

        // Create list item with "Clear" button
        const $li = $(`
            <li class="list-group-item">
                <span>${govName} > ${distName} > ${subName} > ${commName}</span>
                <button type="button" class="btn btn-sm btn-outline-danger btn-clear">
                    <i class="fas fa-times"></i> Clear
                </button>
            </li>
        `);

        // Attach remove handler
        $li.find(".btn-clear").click(function () {
            // Remove from selections array
            selections = selections.filter(x =>
                !(x.GovernorateCode === govCode &&
                  x.DistrictCode === distCode &&
                  x.SubDistrictCode === subCode &&
                  x.CommunityCode === commCode)
            );
            // Remove from DOM
            $li.remove();
            // Update hidden input
            $("#location-data").val(JSON.stringify(selections));
        });

        $("#selected-locations").append($li);
        $("#location-data").val(JSON.stringify(selections));

        resetDropdowns();
    });

    // Reset handler
    $("#reset-dropdowns").click(resetDropdowns);

    // Utility functions
    function fillSelect(selector, data) {
        let select = $(selector);
        select.empty().append(`<option value="">-- Select --</option>`);
        data.forEach(x => select.append(`<option value="${x.code}">${x.name}</option>`));
    }

    function resetSelect(selector) {
        $(selector).empty().append(`<option value="">-- Select --</option>`);
    }

    function resetDropdowns() {
        $("#governorate").val("");
        resetSelect("#district");
        resetSelect("#subdistrict");
        resetSelect("#community");
    }

    // Validation message display
    function showValidationMessage(message) {
        const alertBox = $("#location-validation-alert");

        if (alertBox.length === 0) {
            $("#location-selector").after(`
                <div id="location-validation-alert" class="alert alert-warning mt-3">${message}</div>
            `);
        } else {
            alertBox.text(message).fadeIn();
        }

        setTimeout(() => $("#location-validation-alert").fadeOut(), 3000);
    }

    // Prevent submitting if no locations have been added (unless entire country is checked)
    $('form.needs-validation').on('submit', function (e) {
        const isEntireCountry = $("#entireCountryCheckbox").is(':checked');
        if (!isEntireCountry && selections.length === 0) {
            e.preventDefault();
            showValidationMessage("You must add at least one location or check 'Entire Country' before saving the project.");
            return false;
        }
    });

    // =================
    // DONOR MANAGEMENT
    // =================

    let selectedDonors = [];
    let donorFundingData = {};

    // Initialize donor management on page load
    $(document).ready(function() {
        initializeSelectedDonors();

        // Trigger the entire country checkbox change event if it's already checked
        if ($("#entireCountryCheckbox").is(':checked')) {
            $("#entireCountryCheckbox").trigger('change');
        }

        // Handle ministry dropdown selection
        $('.ministry-item').click(function(e) {
            e.preventDefault();
            const ministryCode = $(this).data('ministry-code');
            const ministryName = $(this).data('ministry-name');
            const ministryLogo = $(this).data('ministry-logo');

            // Update hidden input
            $('#ministrySelect').val(ministryCode);

            // Update display button
            $('#selectedMinistryDisplay').html('').removeClass('text-muted');
            if (ministryLogo && ministryLogo.trim() !== '') {
                $('#selectedMinistryDisplay').append('<span class="me-2" style="font-size: 1.5rem;">' + ministryLogo + '</span>');
            } else {
                $('#selectedMinistryDisplay').append('<span class="me-2 bg-light border rounded d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; display: inline-flex;"><i class="fas fa-building text-muted" style="font-size: 0.7rem;"></i></span>');
            }
            $('#selectedMinistryDisplay').append('<span>' + ministryName + '</span>');

            // Close dropdown
            $('#ministryDropdown').dropdown('hide');
        });

        // Set initial ministry display if already selected
        var selectedMinistryCode = $('#ministrySelect').val();
        if (selectedMinistryCode) {
            var selectedItem = $('.ministry-item[data-ministry-code="' + selectedMinistryCode + '"]');
            if (selectedItem.length > 0) {
                const ministryName = selectedItem.data('ministry-name');
                const ministryLogo = selectedItem.data('ministry-logo');
                $('#selectedMinistryDisplay').html('').removeClass('text-muted');
                if (ministryLogo && ministryLogo.trim() !== '') {
                    $('#selectedMinistryDisplay').append('<span class="me-2" style="font-size: 1.5rem;">' + ministryLogo + '</span>');
                } else {
                    $('#selectedMinistryDisplay').append('<span class="me-2 bg-light border rounded d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; display: inline-flex;"><i class="fas fa-building text-muted" style="font-size: 0.7rem;"></i></span>');
                }
                $('#selectedMinistryDisplay').append('<span>' + ministryName + '</span>');
            }
        }

        // Disable ministry dropdown for ministry users
        var isMinistryUser = @Html.Raw(Json.Serialize(ViewBag.IsMinistryUser ?? false));
        if (isMinistryUser) {
            $('#ministryDropdown').prop('disabled', true);
            $('#ministryDropdown').css({
                'background-color': '#e9ecef',
                'cursor': 'not-allowed',
                'pointer-events': 'none'
            });
        }
    });

    // Initialize donors from the existing project data
    function initializeSelectedDonors() {
        // Get selected donor codes from the MultiSelectList
        @if (ViewBag.DonorList != null)
        {
            var donorList = ViewBag.DonorList as MultiSelectList;
            if (donorList != null && donorList.Count() > 0)
            {
                <text>
                var initialDonors = [
                    @foreach (var item in donorList)
                    {
                        if (item.Selected)
                        {
                            <text>{ value: '@item.Value', text: '@Html.Raw(HttpUtility.JavaScriptStringEncode(item.Text))' },</text>
                        }
                    }
                ];

                // Get existing funding percentages from the controller
                var existingFundingData = {};
                @if (ViewBag.DonorFundingData != null)
                {
                    <text>
                    try {
                        existingFundingData = JSON.parse('@Html.Raw(ViewBag.DonorFundingData)');
                    } catch (e) {
                        console.error('Error parsing donor funding data:', e);
                        existingFundingData = {};
                    }
                    </text>
                }

                // Add existing donors to the management system
                initialDonors.forEach(function(donor) {
                    if (donor.value && donor.text) {
                        selectedDonors.push(donor);
                        // Use existing funding percentage or default to 0
                        donorFundingData[donor.value] = existingFundingData[donor.value] || 0;
                    }
                });

                updateDonorFundingSection();
                updateSelectedDonorsInput();
                </text>
            }
        }
    }

    // Add donor button click handler
    $('#addDonorBtn').click(function() {
        const donorValue = $('#availableDonorSelect').val();
        const donorText = $('#availableDonorSelect option:selected').text();

        if (!donorValue || donorValue === '') {
            alert('Please select a donor first.');
            return;
        }

        // Check if donor is already added
        if (selectedDonors.some(d => d.value === donorValue)) {
            alert('This donor has already been added.');
            return;
        }

        // Add donor to selected list
        selectedDonors.push({
            value: donorValue,
            text: donorText
        });

        // Initialize percentage
        donorFundingData[donorValue] = 0;

        // Update UI
        updateDonorFundingSection();
        updateSelectedDonorsInput();

        // Reset dropdown
        $('#availableDonorSelect').val('');
    });

    // Update the donor funding section
    function updateDonorFundingSection() {
        const donorFundingSection = $('#donorFundingSection');
        const donorContributionList = $('#donorContributionList');

        if (selectedDonors.length === 0) {
            donorFundingSection.hide();
            return;
        }

        donorFundingSection.show();
        donorContributionList.empty();

        // Create cards with sliders for each selected donor
        selectedDonors.forEach(donor => {
            const currentPercentage = donorFundingData[donor.value] || 0;

            const donorHtml = `
                <div class="card mb-3 donor-funding-card" data-donor="${donor.value}">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-4">
                                <h6 class="mb-1">
                                    <i class="fas fa-hand-holding-usd me-2"></i>${donor.text}
                                </h6>
                                        <small class="text-muted">@Localizer["Funding Contribution"]</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label small mb-1">Percentage: <span class="percentage-display" data-donor="${donor.value}">${currentPercentage.toFixed(1)}%</span></label>
                                <input type="range"
                                       class="form-range donor-slider"
                                       data-donor="${donor.value}"
                                       min="0"
                                       max="100"
                                       step="0.1"
                                       value="${currentPercentage}">
                                <div class="d-flex justify-content-between small text-muted">
                                    <span>0%</span>
                                    <span>100%</span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-end">
                                    <strong class="donor-amount" data-donor="${donor.value}">$0.00</strong>
                                    <br>
                                    <small class="text-muted">Amount</small>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="btn btn-outline-danger btn-sm remove-donor-btn" data-donor="${donor.value}">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            donorContributionList.append(donorHtml);
        });

        calculateDonorTotals();
    }

    // Handle slider changes
    $(document).on('input', '.donor-slider', function() {
        const donorValue = $(this).data('donor');
        const percentage = parseFloat($(this).val()) || 0;

        donorFundingData[donorValue] = percentage;

        // Update percentage display
        $(`.percentage-display[data-donor="${donorValue}"]`).text(percentage.toFixed(1) + '%');

        calculateDonorTotals();
    });

    // Handle remove donor button
    $(document).on('click', '.remove-donor-btn', function() {
        const donorValue = $(this).data('donor');

        // Remove from selected donors array
        selectedDonors = selectedDonors.filter(d => d.value !== donorValue);

        // Remove from funding data
        delete donorFundingData[donorValue];

        // Update UI
        updateDonorFundingSection();
        updateSelectedDonorsInput();
    });

    // Update the hidden select input for form submission
    function updateSelectedDonorsInput() {
        const hiddenSelect = $('#selectedDonorsInput');
        hiddenSelect.empty();

        selectedDonors.forEach(donor => {
            hiddenSelect.append(`<option value="${donor.value}" selected>${donor.text}</option>`);
        });
    }

    // Calculate totals and update displays
    function calculateDonorTotals() {
        const budget = parseFloat($('[name="EstimatedBudget"]').val()) || 0;
        let totalPercentage = 0;
        let totalAmount = 0;

        // Update individual donor amounts and calculate totals
        selectedDonors.forEach(donor => {
            const percentage = donorFundingData[donor.value] || 0;
            const amount = (budget * percentage) / 100;

            totalPercentage += percentage;
            totalAmount += amount;

            // Update the display for this donor
            $(`.donor-amount[data-donor="${donor.value}"]`).text('$' + amount.toFixed(2));
        });

        // Update total displays
        $('#totalPercentage').text(totalPercentage.toFixed(1));
        $('#totalFundingAmount').text(totalAmount.toFixed(2));

        // Update status message
        const statusElement = $('#percentageStatus');
        if (totalPercentage > 100) {
            statusElement.text('@Localizer["Error: Exceeds 100%"]').removeClass('text-success text-muted text-warning').addClass('text-danger');
        } else if (totalPercentage === 100) {
                            statusElement.text('@Localizer["Fully funded"] (100%)').removeClass('text-warning text-danger text-muted').addClass('text-success');
        } else if (totalPercentage > 0) {
                    statusElement.text(`@Localizer["Partially funded"] (${totalPercentage.toFixed(1)}%)`).removeClass('text-success text-danger text-muted').addClass('text-warning');
        } else {
                            statusElement.text('@Localizer["Cannot exceed 100%"]').removeClass('text-success text-warning text-danger').addClass('text-muted');
        }

        // Update hidden field with funding data
        $('#donorFundingData').val(JSON.stringify(donorFundingData));
    }

    // Update calculations when budget changes
    $('[name="EstimatedBudget"]').on('input change', function() {
        calculateDonorTotals();
    });
</script>
@* In the Razor view (Edit.cshtml) *@
<script type="text/javascript">
    // Inject the pre-selected locations into JavaScript
    var initialSelections = @Html.Raw(selectedLocationsJson);    // Pre-fill the selections array with their code values
    var selections2 = initialSelections.map(function(loc) {
        return [loc.GovernorateCode, loc.DistrictCode, loc.SubDistrictCode, loc.CommunityCode];
    });
</script>

@* <script>
    $(function() {
        // For each pre-selected location, add a list item
        initialSelections.forEach(function(loc) {
            var itemText = loc.GovernorateName + ' > ' +
                           loc.DistrictName + ' > ' +
                           loc.SubDistrictName + ' > ' +
                           loc.CommunityName;
            var $li = $('<li class="list-group-item d-flex justify-content-between align-items-center"></li>');
            $li.text(itemText);
            // Store the codes (optional) for reference when removing
            $li.data('codes', [loc.GovernorateCode, loc.DistrictCode, loc.SubDistrictCode, loc.CommunityCode]);

            // Create the Clear button
            var $btn = $('<button type="button" class="btn btn-sm btn-outline-danger clear-selection">Clear</button>');
            $li.append($btn);

            // Append to the list
            $('#selected-locations').append($li);
        });
         // Update the hidden input after loading all initial values
    });

    // Delegate the click event for any Clear button (so it works for dynamic items)
    $('#selected-locations').on('click', '.clear-selection', function() {
        var $li = $(this).closest('li');
        // Remove the corresponding code tuple from the selections array
        var codes = $li.data('codes');
        var idx = selections.findIndex(function(arr) {
            return arr.join(',') === codes.join(',');
        });
        if (idx > -1) selections.splice(idx, 1);
        // Remove the list item from the DOM
        $li.remove();
    });
      function updateHiddenInput() {
        $('#location-data').val(JSON.stringify(selections));
    }
</script> *@

<script>
   // var selections = [];

    $(function () {
        // For each pre-selected location from the backend
        initialSelections.forEach(function (loc) {
            var itemText = loc.GovernorateName + ' > ' +
                loc.DistrictName + ' > ' +
                loc.SubDistrictName + ' > ' +
                loc.CommunityName;

            var locationObj = {
                GovernorateCode: loc.GovernorateCode,
                DistrictCode: loc.DistrictCode,
                SubDistrictCode: loc.SubDistrictCode,
                CommunityCode: loc.CommunityCode
            };

            var $li = $('<li class="list-group-item d-flex justify-content-between align-items-center"></li>');
            $li.text(itemText);
            $li.data('location', locationObj);

            var $btn = $('<button type="button" class="btn btn-sm btn-outline-danger clear-selection">Clear</button>');
            $li.append($btn);

            $('#selected-locations').append($li);

            // Push full object
            selections.push(locationObj);
        });

        updateHiddenInput();
    });

    // Remove location
    $('#selected-locations').on('click', '.clear-selection', function () {
        var $li = $(this).closest('li');
        var targetLoc = $li.data('location');

        // Remove from selections using a match by all codes
        selections = selections.filter(function (loc) {
            return !(loc.GovernorateCode === targetLoc.GovernorateCode &&
                     loc.DistrictCode === targetLoc.DistrictCode &&
                     loc.SubDistrictCode === targetLoc.SubDistrictCode &&
                     loc.CommunityCode === targetLoc.CommunityCode);
        });

        $li.remove();
        updateHiddenInput();
    });

    function updateHiddenInput() {
        $('#location-data').val(JSON.stringify(selections));
    }
</script>

