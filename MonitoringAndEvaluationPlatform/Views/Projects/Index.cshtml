@model MonitoringAndEvaluationPlatform.ViewModel.ProgramFilterViewModel
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Projects Dashboard";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.Name;
}
<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1 class="dashboard-title">
        <i class="fas fa-project-diagram me-3"></i>
        @Localizer["Projects Dashboard"]
    </h1>
    <p class="dashboard-subtitle">
        @Localizer["Filter and analyze project performance with comprehensive insights"]
    </p>
    <div class="dashboard-actions">
        <a asp-action="Create" class="btn btn-gradient-primary">
            <i class="fas fa-plus me-2"></i>@Localizer["Create New Project"]
        </a>
    </div>
</div>

<div class="container-fluid">

    <div class="row">
        <!-- Filter Sidebar -->
        <div class="col-md-3">
            <div class="chart-card mb-4">
                <h3 class="chart-title">
                    <i class="fas fa-filter"></i>
                    @Localizer["Filters"]
                </h3>
                <div class="chart-content">
                    <form asp-action="Index" method="get">
                        <!-- Ministry Filter -->
                        @if (!Model.IsMinistryUser)
                        {
                            <div class="mb-4">
                                <h6 class="filter-section-title">@Localizer["Ministry"]</h6>
                                <div class="filter-options-modern" >
                                    @foreach (var ministry in Model.Ministries)
                                    {
                                        <div class="modern-checkbox">
                                            <input class="modern-checkbox-input" type="checkbox" name="SelectedMinistries"
                                                   value="@ministry.Code" id="ministry-@ministry.Code"
                                            @(Model.SelectedMinistries.Contains(ministry.Code) ? "checked" : "")>
                                            <label class="modern-checkbox-label" for="ministry-@ministry.Code">
                                                <span class="checkbox-custom"></span>
                                                <span class="checkbox-text">
                                                    @if (!string.IsNullOrEmpty(ministry.Logo))
                                                    {
                                                        <span class="ministry-logo me-1">@ministry.Logo</span>
                                                    }
                                                    @(System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == "ar" ? ministry.MinistryDisplayName_AR : ministry.MinistryDisplayName_EN)
                                                </span>
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>

                        }


                        <!-- Donor Filter -->
                        <div class="mb-4">
                            <h6 class="filter-section-title">@Localizer["Donor"]</h6>
                            <div class="filter-options-modern" >
                                @foreach (var donor in Model.Donors)
                                {
                                    <div class="modern-checkbox">
                                        <input class="modern-checkbox-input" type="checkbox" name="SelectedDonors"
                                               value="@donor.Code" id="donor-@donor.Code"
                                        @(Model.SelectedDonors.Contains(donor.Code) ? "checked" : "")>
                                        <label class="modern-checkbox-label" for="donor-@donor.Code">
                                            <span class="checkbox-custom"></span>
                                            <span class="checkbox-text">@donor.Partner</span>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Sector Filter -->
                        <div class="mb-4">
                            <h6 class="filter-section-title">@Localizer["Sector"]</h6>
                            <div class="filter-options-modern">
                                @foreach (var sector in Model.Sectors)
                                {
                                    <div class="modern-checkbox">
                                        <input class="modern-checkbox-input" type="checkbox" name="SelectedSectors"
                                               value="@sector.Code" id="sector-@sector.Code"
                                        @(Model.SelectedSectors.Contains(sector.Code) ? "checked" : "")>
                                        <label class="modern-checkbox-label" for="sector-@sector.Code">
                                            <span class="checkbox-custom"></span>
                                            @if (culture.StartsWith("ar"))
                                            {
                                                @sector.AR_Name
                                            }
                                            else
                                            {
                                                @sector.EN_Name
                                            }
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="filter-actions">
                            <button type="submit" class="btn btn-gradient-primary">
                                <i class="fas fa-filter me-2"></i>@Localizer["Apply Filters"]
                            </button>
                            <a asp-action="Index" class="btn btn-modern-secondary">
                                <i class="fas fa-sync-alt me-2"></i>@Localizer["Reset"]
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Projects Table -->
        <div class="col-md-9">
            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-list"></i>
                    @Localizer["Projects Overview"]
                </h3>
                <div class="chart-content">
                    <div class="modern-table-container">
                        <table class="modern-table">
                            <thead class="table-header">
                                <tr>
                                    <th>
                                        <i class="fas fa-project-diagram me-2"></i>@Localizer["Project Name"]
                                    </th>
                                    <th class="text-center sortable-header" onclick="sortProjectsTable('performance')" style="cursor: pointer;">
                                        <i class="fas fa-chart-line me-2"></i>@Localizer["Performance"]
                                        <i class="fas fa-sort ms-2" id="performance-sort-icon"></i>
                                    </th>
                                    <th class="text-center sortable-header" onclick="sortProjectsTable('disbursement')" style="cursor: pointer;">
                                        <i class="fas fa-dollar-sign me-2"></i>@Localizer["Disbursement"]
                                        <i class="fas fa-sort ms-2" id="disbursement-sort-icon"></i>
                                    </th>
                                    <th class="text-center">
                                        <i class="fas fa-cogs me-2"></i>@Localizer["Actions"]
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="projectsTableBody">
                                @foreach (var item in Model.Projects)
                                {
                                    double performance = Math.Round(@item.performance, 2);
                                    double disbursement = Math.Round(item.DisbursementPerformance, 2);
                                    string performanceClass = ProgressBarHelper.GetProgressBarClass(performance);
                                    string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                                    var rowId = "row_" + item.ProjectID;
                                    <tr id="row_@item.ProjectID" class="table-row" data-performance="@performance" data-disbursement="@disbursement">
                                        <td class="project-name-cell">
                                            <div class="d-flex align-items-center">
                                                <div class="project-icon me-3">
                                                    <i class="fas fa-project-diagram"></i>
                                                </div>
                                                <div>
                                                    <a href="@Url.Action("Details", "Projects", new { id = item.ProjectID })" class="project-name fw-semibold">@item.ProjectName</a>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-center" title="@Localizer["Performance"]: @performance%">
                                            @await Html.PartialAsync("_ProgressBar", Tuple.Create(performance, performanceClass))
                                        </td>
                                        <td class="text-center" title="@Localizer["Disbursement"]: @Math.Round(item.DisbursementPerformance, 2)%">
                                            @await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group action-buttons" role="group">
                                                <a asp-action="Details" asp-route-id="@item.ProjectID" class="btn btn-outline-info btn-sm action-btn" title="@Localizer["View Details"]">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <button type="button" class="btn btn-outline-primary btn-sm action-btn"
                                                        onclick="editProjectName(@item.ProjectID, '@item.ProjectName.Replace("'", "\\'")')" title="@Localizer["Edit Project"]">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm action-btn"
                                                        onclick="deleteProject(@item.ProjectID)" title="@Localizer["Delete Project"]">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @Html.AntiForgeryToken() <!-- Required for AJAX security -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Modern Table Styles */
        .modern-table {
            width:100%;
            background: transparent;
            border: none;
            border-radius: 15px;
            overflow: hidden;
        }

        .table-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
        }

        .table-header th {
            border: none;
            padding: 20px 15px;
            font-weight: 600;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-row {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: none;
            transition: all 0.3s ease;
        }

        .table-row:hover {
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .table-row td {
            border: none;
            padding: 20px 15px;
            vertical-align: middle;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .project-name-cell {
            min-width: 250px;
        }

        .project-icon {
            width: 45px;
            height: 45px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
        }

        .project-name {
            color: #333;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .project-name:hover {
            color: var(--primary-color);
            text-decoration: none;
            transform: translateX(5px);
        }

        .action-buttons {
            gap: 5px;
        }

        .action-btn {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            border-width: 1px;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .modern-table-container {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .filter-section-title {
        font-size: 0.95rem;
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
    }

    .filter-section-title::before {
        content: '';
        width: 4px;
        height: 20px;
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-radius: 2px;
        margin-right: 0.75rem;
    }

    .filter-options-modern {
        max-height: 200px;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .modern-checkbox {
        margin-bottom: 0.75rem;
        position: relative;
    }

    .modern-checkbox-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
    }

    .modern-checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        color: var(--text-color);
        font-weight: 500;
    }

    .modern-checkbox-label:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateX(5px);
    }

    .checkbox-custom {
        width: 18px;
        height: 18px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        margin-right: 0.75rem;
        position: relative;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .modern-checkbox-input:checked + .modern-checkbox-label .checkbox-custom {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-color: var(--primary-color);
        transform: scale(1.1);
    }

    .modern-checkbox-input:checked + .modern-checkbox-label .checkbox-custom::after {
        content: '✓';
        position: absolute;
        color: white;
        font-size: 12px;
        font-weight: bold;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .checkbox-text {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .filter-actions {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 2rem;
    }

    .project-name-cell {
        min-width: 250px;
    }

    .project-name-container {
        display: flex;
        align-items: center;
        padding: 0.5rem 0;
    }

    .project-icon {
        color: var(--primary-color);
        opacity: 0.7;
    }

    .project-name {
        font-weight: 600;
        color: var(--text-color);
        font-size: 0.95rem;
    }

    .action-buttons-group {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .btn-action-primary,
    .btn-action-warning,
    .btn-action-danger {
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        border: none;
        transition: all 0.3s ease;
        font-size: 0.85rem;
        position: relative;
        overflow: hidden;
    }

    .btn-action-primary {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        color: white;
    }

    .btn-action-warning {
        background: linear-gradient(45deg, var(--warning-color), var(--accent-color));
        color: white;
    }

    .btn-action-danger {
        background: linear-gradient(45deg, var(--danger-color), #e74c3c);
        color: white;
    }

    .btn-action-primary:hover,
    .btn-action-warning:hover,
    .btn-action-danger:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .table-row-success {
        background: linear-gradient(90deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)) !important;
        animation: successPulse 2s ease;
    }

    @@keyframes successPulse {
        0%, 100% { background: linear-gradient(90deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)); }
        50% { background: linear-gradient(90deg, rgba(40, 167, 69, 0.2), rgba(40, 167, 69, 0.1)); }
    }

    /* Custom scrollbar for filter options */
    .filter-options-modern::-webkit-scrollbar {
        width: 6px;
    }

    .filter-options-modern::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .filter-options-modern::-webkit-scrollbar-thumb {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-radius: 3px;
    }

    .filter-options-modern::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(45deg, var(--primary-dark), var(--primary-color));
    }

    /* Sortable header styling */
    .sortable-header {
        user-select: none;
        transition: all 0.3s ease;
    }

    .sortable-header:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .sortable-header i.fa-sort,
    .sortable-header i.fa-sort-up,
    .sortable-header i.fa-sort-down {
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

    .sortable-header:hover i.fa-sort,
    .sortable-header:hover i.fa-sort-up,
    .sortable-header:hover i.fa-sort-down {
        opacity: 1;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .action-buttons-group {
            flex-direction: column;
            align-items: center;
        }

        .btn-action-primary,
        .btn-action-warning,
        .btn-action-danger {
            width: 40px;
            height: 40px;
        }

        .project-name-container {
            flex-direction: column;
            align-items: flex-start;
        }

        .project-icon {
            margin-bottom: 0.25rem;
        }
    }
</style>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    const token = $('input[name="__RequestVerificationToken"]').val();

    function editProjectName(projectId, currentName) {
        Swal.fire({
            title: '@Localizer["Edit Project Name"]',
            input: 'text',
            inputLabel: '@Localizer["Project Name"]',
            inputValue: currentName,
            showCancelButton: true,
            confirmButtonText: '@Localizer["Save"]',
            cancelButtonText: '@Localizer["Cancel"]',
            confirmButtonColor: 'var(--primary-color)',
            cancelButtonColor: 'var(--secondary-color)',
            preConfirm: (newName) => {
                if (!newName.trim()) {
                    Swal.showValidationMessage('@Localizer["Project name cannot be empty"]');
                }
                return newName.trim();
            },
            customClass: {
                popup: 'modern-swal-popup',
                title: 'modern-swal-title',
                input: 'modern-swal-input'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Projects/UpdateProjectName',
                    type: 'POST',
                    data: {
                        projectId: projectId,
                        projectName: result.value,
                        __RequestVerificationToken: token
                    },
                    success: function () {
                        $(`#row_${projectId} .project-name`).text(result.value);
                        Swal.fire({
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Project name has been updated."]',
                            icon: 'success',
                            confirmButtonColor: 'var(--primary-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                        $(`#row_${projectId}`).addClass('table-row-success');
                        setTimeout(() => {
                            $(`#row_${projectId}`).removeClass('table-row-success');
                        }, 2000);
                    },
                    error: function () {
                        Swal.fire({
                            title: '@Localizer["Error"]',
                            text: '@Localizer["Failed to update project name."]',
                            icon: 'error',
                            confirmButtonColor: 'var(--danger-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    }
                });
            }
        });
    }

    function deleteProject(projectId) {
        Swal.fire({
            title:'@Localizer["Are you sure?"]',
            text: '@Localizer["This will delete the project!"]',
            icon: 'warning',
            showCancelButton: true,
            cancelButtonText: '@Localizer["Cancel"]',
            confirmButtonText: '@Localizer["Yes, delete it!"]',
            reverseButtons: true,
            confirmButtonColor: 'var(--danger-color)',
            cancelButtonColor: 'var(--secondary-color)',
            customClass: {
                popup: 'modern-swal-popup',
                title: 'modern-swal-title'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Projects/DeleteConfirmed',
                    type: 'POST',
                    data: {
                        id: projectId,
                        __RequestVerificationToken: token
                    },
                    success: function () {
                        // Animate row removal
                        $(`#row_${projectId}`).fadeOut(500, function() {
                            $(this).remove();
                        });
                        Swal.fire({
                            title: '@Localizer["Deleted!"]',
                            text: '@Localizer["Project has been deleted."]',
                            icon: 'success',
                            confirmButtonColor: 'var(--primary-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    },
                    error: function () {
                        Swal.fire({
                            title: '@Localizer["Error"]',
                            text: '@Localizer["Failed to delete project."]',
                            icon: 'error',
                            confirmButtonColor: 'var(--danger-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    }
                });
            }
        });
    }

    // Add loading animation on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Animate table rows
        const tableRows = document.querySelectorAll('.table-row-hover');
        tableRows.forEach((row, index) => {
            row.style.opacity = '0';
            row.style.transform = 'translateY(20px)';
            row.style.transition = 'all 0.6s ease';

            setTimeout(() => {
                row.style.opacity = '1';
                row.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Animate progress bars
        const progressBars = document.querySelectorAll('.progress-fill-modern');
        progressBars.forEach(bar => {
            const width = bar.style.width;
            bar.style.width = '0%';
            setTimeout(() => {
                bar.style.width = width;
            }, 500);
        });

        // Auto-sort by Performance (highest to lowest) on page load
        if ($('#projectsTableBody tr').length > 0) {
            sortProjectsTable('performance');
        }
    });

    // Sorting functionality for Projects
    let currentProjectSort = {
        column: null,
        direction: 'desc' // Start with descending (highest to lowest)
    };

    function sortProjectsTable(column) {
        const tbody = document.getElementById('projectsTableBody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        // Determine sort direction
        if (currentProjectSort.column === column) {
            // Toggle direction if clicking the same column
            currentProjectSort.direction = currentProjectSort.direction === 'desc' ? 'asc' : 'desc';
        } else {
            // Default to descending (highest to lowest) for new column
            currentProjectSort.direction = 'desc';
            currentProjectSort.column = column;
        }

        // Sort rows
        rows.sort((a, b) => {
            const aValue = parseFloat(a.getAttribute(`data-${column}`)) || 0;
            const bValue = parseFloat(b.getAttribute(`data-${column}`)) || 0;

            if (currentProjectSort.direction === 'desc') {
                return bValue - aValue; // Highest to lowest
            } else {
                return aValue - bValue; // Lowest to highest
            }
        });

        // Clear tbody and append sorted rows
        tbody.innerHTML = '';
        rows.forEach(row => tbody.appendChild(row));

        // Update sort icons
        updateProjectSortIcons(column);
    }

    function updateProjectSortIcons(activeColumn) {
        // Reset all icons
        document.getElementById('performance-sort-icon').className = 'fas fa-sort ms-2';
        document.getElementById('disbursement-sort-icon').className = 'fas fa-sort ms-2';

        // Set active icon
        const iconId = `${activeColumn}-sort-icon`;
        const icon = document.getElementById(iconId);
        if (currentProjectSort.direction === 'desc') {
            icon.className = 'fas fa-sort-down ms-2';
        } else {
            icon.className = 'fas fa-sort-up ms-2';
        }
    }
</script>
}
