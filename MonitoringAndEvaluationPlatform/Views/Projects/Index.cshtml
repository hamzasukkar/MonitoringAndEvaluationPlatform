@model MonitoringAndEvaluationPlatform.ViewModel.ProgramFilterViewModel
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@{
    ViewData["Title"] = "Projects Dashboard";
    Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}
<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1 class="dashboard-title">
        <i class="fas fa-project-diagram me-3"></i>
        @Localizer["Projects Dashboard"]
    </h1>
    <p class="dashboard-subtitle">
        @Localizer["Filter and analyze project performance with comprehensive insights"]
    </p>
    <div class="dashboard-actions">
        <a asp-action="Create" class="btn btn-gradient-primary">
            <i class="fas fa-plus me-2"></i>@Localizer["Create New Project"]
        </a>
    </div>
</div>

<div class="container-fluid">

    <div class="row">
        <!-- Filter Sidebar -->
        <div class="col-md-3">
            <div class="chart-card mb-4">
                <h3 class="chart-title">
                    <i class="fas fa-filter"></i>
                    @Localizer["Filters"]
                </h3>
                <div class="chart-content">
                    <form asp-action="Index" method="get">
                        <!-- Ministry Filter -->
                        @if (!Model.IsMinistryUser)
                        {
                            <div class="mb-4">
                                <h6 class="filter-section-title">@Localizer["Ministry"]</h6>
                                <div class="filter-options-modern" >
                                    @foreach (var ministry in Model.Ministries)
                                    {
                                        <div class="modern-checkbox">
                                            <input class="modern-checkbox-input" type="checkbox" name="SelectedMinistries"
                                                   value="@ministry.Code" id="ministry-@ministry.Code"
                                            @(Model.SelectedMinistries.Contains(ministry.Code) ? "checked" : "")>
                                            <label class="modern-checkbox-label" for="ministry-@ministry.Code">
                                                <span class="checkbox-custom"></span>
                                                <span class="checkbox-text">@ministry.MinistryDisplayName</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>

                        }


                        <!-- Donor Filter -->
                        <div class="mb-4">
                            <h6 class="filter-section-title">@Localizer["Donor"]</h6>
                            <div class="filter-options-modern" >
                                @foreach (var donor in Model.Donors)
                                {
                                    <div class="modern-checkbox">
                                        <input class="modern-checkbox-input" type="checkbox" name="SelectedDonors"
                                               value="@donor.Code" id="donor-@donor.Code"
                                        @(Model.SelectedDonors.Contains(donor.Code) ? "checked" : "")>
                                        <label class="modern-checkbox-label" for="donor-@donor.Code">
                                            <span class="checkbox-custom"></span>
                                            <span class="checkbox-text">@donor.Partner</span>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="filter-actions">
                            <button type="submit" class="btn btn-gradient-primary">
                                <i class="fas fa-filter me-2"></i>@Localizer["Apply Filters"]
                            </button>
                            <a asp-action="Index" class="btn btn-modern-secondary">
                                <i class="fas fa-sync-alt me-2"></i>@Localizer["Reset"]
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Projects Table -->
        <div class="col-md-9">
            <div class="chart-card">
                <h3 class="chart-title">
                    <i class="fas fa-list"></i>
                    @Localizer["Projects Overview"]
                </h3>
                <div class="chart-content">
                    <div class="modern-table-container">
                        <table class="modern-table">
                            <thead class="table-header">
                                <tr>
                                    <th><i class="fas fa-project-diagram me-2"></i>@Localizer["Project Name"]</th>
                                    <th><i class="fas fa-chart-line me-2"></i>@Localizer["Performance"]</th>
                                    <th><i class="fas fa-dollar-sign me-2"></i>@Localizer["Disbursement"]</th>
                                    <th class="text-end"><i class="fas fa-cogs me-2"></i>@Localizer["Actions"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Projects)
                                {
                                    double performance = Math.Round(@item.performance, 0);
                                    string performanceClass = ProgressBarHelper.GetProgressBarClass(performance);
                                    string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                                    var rowId = "row_" + item.ProjectID;
                                    <tr id="row_@item.ProjectID" class="table-row-hover">
                                        <td class="project-name-cell">
                                            <div class="project-name-container">
                                                <i class="fas fa-project-diagram me-2 project-icon"></i>
                                                <span class="project-name">@item.ProjectName</span>
                                            </div>
                                        </td>
                                        <td title="@Localizer["Performance"]: @performance%">
                                            <div class="progress-bar-modern">
                                                <div class="progress-fill-modern shimmer" style="width: @performance%; background: linear-gradient(90deg, @(performance > 75 ? "var(--success-color)" : performance > 50 ? "var(--warning-color)" : "var(--danger-color)"), var(--primary-dark));"></div>
                                                <span class="progress-text">@performance%</span>
                                            </div>
                                        </td>
                                        <td title="@Localizer["Disbursement"]: @Math.Round(item.DisbursementPerformance, 2)%">
                                            <div class="progress-bar-modern">
                                                <div class="progress-fill-modern shimmer" style="width: @Math.Round(item.DisbursementPerformance, 2)%; background: linear-gradient(90deg, @(item.DisbursementPerformance > 75 ? "var(--success-color)" : item.DisbursementPerformance > 50 ? "var(--warning-color)" : "var(--danger-color)"), var(--primary-dark));"></div>
                                                <span class="progress-text">@Math.Round(item.DisbursementPerformance, 2)%</span>
                                            </div>
                                        </td>
                                        <td class="text-end">
                                            <div class="action-buttons-group">
                                                <a asp-action="Details" asp-route-id="@item.ProjectID" class="btn btn-action-primary" title="@Localizer["View Details"]">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <button type="button" class="btn btn-action-warning"
                                                        onclick="editProjectName(@item.ProjectID, '@item.ProjectName.Replace("'", "\\'")')" title="@Localizer["Edit Project"]">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-action-danger"
                                                        onclick="deleteProject(@item.ProjectID)" title="@Localizer["Delete Project"]">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @Html.AntiForgeryToken() <!-- Required for AJAX security -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modern Styles -->
<style>
    .filter-section-title {
        font-size: 0.95rem;
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
    }

    .filter-section-title::before {
        content: '';
        width: 4px;
        height: 20px;
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-radius: 2px;
        margin-right: 0.75rem;
    }

    .filter-options-modern {
        max-height: 200px;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .modern-checkbox {
        margin-bottom: 0.75rem;
        position: relative;
    }

    .modern-checkbox-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
    }

    .modern-checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        color: var(--text-color);
        font-weight: 500;
    }

    .modern-checkbox-label:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateX(5px);
    }

    .checkbox-custom {
        width: 18px;
        height: 18px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        margin-right: 0.75rem;
        position: relative;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .modern-checkbox-input:checked + .modern-checkbox-label .checkbox-custom {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-color: var(--primary-color);
        transform: scale(1.1);
    }

    .modern-checkbox-input:checked + .modern-checkbox-label .checkbox-custom::after {
        content: '✓';
        position: absolute;
        color: white;
        font-size: 12px;
        font-weight: bold;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .checkbox-text {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .filter-actions {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 2rem;
    }

    .project-name-cell {
        min-width: 250px;
    }

    .project-name-container {
        display: flex;
        align-items: center;
        padding: 0.5rem 0;
    }

    .project-icon {
        color: var(--primary-color);
        opacity: 0.7;
    }

    .project-name {
        font-weight: 600;
        color: var(--text-color);
        font-size: 0.95rem;
    }

    .action-buttons-group {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .btn-action-primary,
    .btn-action-warning,
    .btn-action-danger {
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        border: none;
        transition: all 0.3s ease;
        font-size: 0.85rem;
        position: relative;
        overflow: hidden;
    }

    .btn-action-primary {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        color: white;
    }

    .btn-action-warning {
        background: linear-gradient(45deg, var(--warning-color), var(--accent-color));
        color: white;
    }

    .btn-action-danger {
        background: linear-gradient(45deg, var(--danger-color), #e74c3c);
        color: white;
    }

    .btn-action-primary:hover,
    .btn-action-warning:hover,
    .btn-action-danger:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .table-row-success {
        background: linear-gradient(90deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)) !important;
        animation: successPulse 2s ease;
    }

    @@keyframes successPulse {
        0%, 100% { background: linear-gradient(90deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05)); }
        50% { background: linear-gradient(90deg, rgba(40, 167, 69, 0.2), rgba(40, 167, 69, 0.1)); }
    }

    /* Custom scrollbar for filter options */
    .filter-options-modern::-webkit-scrollbar {
        width: 6px;
    }

    .filter-options-modern::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .filter-options-modern::-webkit-scrollbar-thumb {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-light));
        border-radius: 3px;
    }

    .filter-options-modern::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(45deg, var(--primary-dark), var(--primary-color));
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .action-buttons-group {
            flex-direction: column;
            align-items: center;
        }

        .btn-action-primary,
        .btn-action-warning,
        .btn-action-danger {
            width: 40px;
            height: 40px;
        }

        .project-name-container {
            flex-direction: column;
            align-items: flex-start;
        }

        .project-icon {
            margin-bottom: 0.25rem;
        }
    }
</style>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    const token = $('input[name="__RequestVerificationToken"]').val();

    function editProjectName(projectId, currentName) {
        Swal.fire({
            title: '@Localizer["Edit Project Name"]',
            input: 'text',
            inputLabel: '@Localizer["Project Name"]',
            inputValue: currentName,
            showCancelButton: true,
            confirmButtonText: '@Localizer["Save"]',
            cancelButtonText: '@Localizer["Cancel"]',
            confirmButtonColor: 'var(--primary-color)',
            cancelButtonColor: 'var(--secondary-color)',
            preConfirm: (newName) => {
                if (!newName.trim()) {
                    Swal.showValidationMessage('@Localizer["Project name cannot be empty"]');
                }
                return newName.trim();
            },
            customClass: {
                popup: 'modern-swal-popup',
                title: 'modern-swal-title',
                input: 'modern-swal-input'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Projects/UpdateProjectName',
                    type: 'POST',
                    data: {
                        projectId: projectId,
                        projectName: result.value,
                        __RequestVerificationToken: token
                    },
                    success: function () {
                        $(`#row_${projectId} .project-name`).text(result.value);
                        Swal.fire({
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Project name has been updated."]',
                            icon: 'success',
                            confirmButtonColor: 'var(--primary-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                        $(`#row_${projectId}`).addClass('table-row-success');
                        setTimeout(() => {
                            $(`#row_${projectId}`).removeClass('table-row-success');
                        }, 2000);
                    },
                    error: function () {
                        Swal.fire({
                            title: '@Localizer["Error"]',
                            text: '@Localizer["Failed to update project name."]',
                            icon: 'error',
                            confirmButtonColor: 'var(--danger-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    }
                });
            }
        });
    }

    function deleteProject(projectId) {
        Swal.fire({
            title:'@Localizer["Are you sure?"]',
            text: '@Localizer["This will delete the project!"]',
            icon: 'warning',
            showCancelButton: true,
            cancelButtonText: '@Localizer["Cancel"]',
            confirmButtonText: '@Localizer["Yes, delete it!"]',
            reverseButtons: true,
            confirmButtonColor: 'var(--danger-color)',
            cancelButtonColor: 'var(--secondary-color)',
            customClass: {
                popup: 'modern-swal-popup',
                title: 'modern-swal-title'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Projects/DeleteConfirmed',
                    type: 'POST',
                    data: {
                        id: projectId,
                        __RequestVerificationToken: token
                    },
                    success: function () {
                        // Animate row removal
                        $(`#row_${projectId}`).fadeOut(500, function() {
                            $(this).remove();
                        });
                        Swal.fire({
                            title: '@Localizer["Deleted!"]',
                            text: '@Localizer["Project has been deleted."]',
                            icon: 'success',
                            confirmButtonColor: 'var(--primary-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    },
                    error: function () {
                        Swal.fire({
                            title: '@Localizer["Error"]',
                            text: '@Localizer["Failed to delete project."]',
                            icon: 'error',
                            confirmButtonColor: 'var(--danger-color)',
                            customClass: {
                                popup: 'modern-swal-popup'
                            }
                        });
                    }
                });
            }
        });
    }

    // Add loading animation on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Animate table rows
        const tableRows = document.querySelectorAll('.table-row-hover');
        tableRows.forEach((row, index) => {
            row.style.opacity = '0';
            row.style.transform = 'translateY(20px)';
            row.style.transition = 'all 0.6s ease';
            
            setTimeout(() => {
                row.style.opacity = '1';
                row.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Animate progress bars
        const progressBars = document.querySelectorAll('.progress-fill-modern');
        progressBars.forEach(bar => {
            const width = bar.style.width;
            bar.style.width = '0%';
            setTimeout(() => {
                bar.style.width = width;
            }, 500);
        });
    });
</script>
