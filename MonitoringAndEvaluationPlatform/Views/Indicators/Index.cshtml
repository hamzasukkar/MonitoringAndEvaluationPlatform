@model IEnumerable<MonitoringAndEvaluationPlatform.Models.Indicator>
@using MonitoringAndEvaluationPlatform.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization

@{
    ViewData["Title"] = "Indicators";
    Layout = "~/Views/Shared/_ResultsFrameworkLayout.cshtml";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-0">@Localizer["Indicators Management"]</h4>
            <p class="text-muted mb-0">@Localizer["View and manage all indicator performance metrics"]</p>
        </div>
        <div>
          @*   <a asp-action="Create" asp-route-id="@ViewData["subOutputCode"]" class="btn btn-success me-2">
                <i class="fas fa-plus me-2"></i>@Localizer["Create New Indicator"]
            </a> *@
            @if (@ViewData["subOutputCode"] != null)
            {
                <a asp-action="AdjustWeights" asp-route-frameworkCode="@ViewData["frameworkCode"]"
                asp-route-subOutputCode="@ViewData["subOutputCode"]" class="btn btn-warning">
                    <i class="fas fa-balance-scale me-2"></i>@Localizer["Adjust Weights"]
                </a>
            }
        </div>
    </div>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    @if (@ViewData["subOutputCode"] != null)
    {
        <!-- Inline Create Form -->
        <div class="card mb-4 border-primary">
            <div class="card-header bg-primary text-white">
                <strong>@Localizer["Add New Indicator"]</strong>
            </div>
            <div class="card-body">
                <!-- The main form action is removed from here -->
                <form method="post" class="row g-3">
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="SubOutputCode" value="@ViewData["subOutputCode"]" />

                    <div class="col-md-6">
                        <label for="Name" class="form-label">@Localizer["Name"]</label>
                        <input type="text" name="Name" class="form-control" required />
                    </div>

                    <div class="col-md-4">
                        <label for="Target" class="form-label">@Localizer["Target"]</label>
                        <!-- Note: The input type is number, but the C# action expects an int.
                             This will work, but for decimals, you'd change the C# type to double or decimal. -->
                        <input type="number" step="1" name="Target" class="form-control" required />
                    </div>

                    <!-- BUTTON 1: Submits to the 'CreateInline' action -->
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-success w-100" asp-action="CreateInline">
                            <i class="fas fa-plus-circle me-1"></i> @Localizer["Add"]
                        </button>
                    </div>

                    <!-- BUTTON 2: Submits to the new 'CreateAndRedirectToProject' action -->
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100" asp-action="CreateAndRedirectToProject">
                            <i class="fas fa-arrow-circle-right me-1"></i>@Localizer["Add & Create Project"]
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }
  

    <!-- Search Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <div class="col-md-8">
                    <div class="input-group">
                        <input type="text" name="searchString" class="form-control"
                               placeholder="@Localizer["Search by indicator name or suboutput..."]"
                               value="@ViewData["CurrentFilter"]">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-1"></i> @Localizer["Search"]
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Indicators Table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>@Localizer["Indicator Name"]</th>
                            <th>@Localizer["Weight"]</th>
                            <th>@Localizer["Indicators Performance"]</th>
                            <th>@Localizer["Disbursement Performance"]</th>
                            @* <th>@Localizer["Field Monitoring"]</th> *@
                            @* <th>@Localizer["Impact Assessment"]</th> *@
                            <th>@Localizer["SubOutput"]</th>
                            <th class="text-end">@Localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            string indicatorsClass = ProgressBarHelper.GetProgressBarClass(item.IndicatorsPerformance);
                            string disbursementClass = ProgressBarHelper.GetProgressBarClass(item.DisbursementPerformance);
                            string fieldMonitoringClass = ProgressBarHelper.GetProgressBarClass(item.FieldMonitoring);
                            string impactAssessmentClass = ProgressBarHelper.GetProgressBarClass(item.ImpactAssessment);
                            double IndicatorsPerformance = Math.Round(item.IndicatorsPerformance, 0);

                            <tr id="indicator-row-@item.IndicatorCode">
                                <td>
                                    <span id="name-display-@item.IndicatorCode">@item.Name</span>
                                    <input type="text" class="form-control d-none" id="name-input-@item.IndicatorCode" value="@item.Name" />
                                </td>
                                <td>@item.Weight</td>
                                <td title="@Localizer["Indicators Performance"]: @IndicatorsPerformance%">@await Html.PartialAsync("_ProgressBar", Tuple.Create(IndicatorsPerformance, indicatorsClass))</td>
                                <td title="@Localizer["Disbursement Performance"]: @item.DisbursementPerformance%">@await Html.PartialAsync("_ProgressBar", Tuple.Create(item.DisbursementPerformance, disbursementClass))</td>
                                @*
                                <td>@await Html.PartialAsync("_ProgressBar", Tuple.Create(item.FieldMonitoring, fieldMonitoringClass))</td>
                                <td>@await Html.PartialAsync("_ProgressBar", Tuple.Create(item.ImpactAssessment, impactAssessmentClass))</td> 
                                *@
                                <td>
                                    <a class="nav-theme-link text-decoration-none" asp-action="Index" asp-controller="SubOutputs" asp-route-outputCode="@item.SubOutput.OutputCode">@item.SubOutput?.Name</a>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.IndicatorCode" class="btn btn-sm btn-outline-primary" title="View">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-warning" title="Edit"
                                                onclick="toggleEdit('@item.IndicatorCode')"
                                                id="edit-btn-@item.IndicatorCode">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <a href="javascript:void(0);"
                                           class="btn btn-sm btn-outline-danger"
                                           title="Delete"
                                           onclick="confirmDelete(@item.IndicatorCode)">
                                            <i class="fas fa-trash-alt"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Styles -->
<style>
    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }

    .progress {
        height: 24px;
        border-radius: 4px;
    }

    .progress-bar {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .btn-group .btn {
        padding: 0.25rem 0.5rem;
    }

    .card-header {
        font-weight: 600;
    }

    .input-group {
        max-width: 500px;
    }

    .table-responsive {
        overflow-x: hidden;
    }
</style>
    <script>
        function toggleEdit(id) {
            const nameDisplay = document.getElementById(`name-display-${id}`);
            const nameInput = document.getElementById(`name-input-${id}`);
            const editBtn = document.getElementById(`edit-btn-${id}`);

            if (editBtn.innerHTML.includes("fa-save")) {
                // Save action
                const newName = nameInput.value;

                fetch(`/Indicators/InlineEditName/${id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // if using AntiForgery
                    },
                    body: JSON.stringify({ name: newName })
                })
                .then(response => {
                    if (response.ok) {
                        nameDisplay.textContent = newName;
                        nameDisplay.classList.remove("d-none");
                        nameInput.classList.add("d-none");
                        editBtn.innerHTML = `<i class="fas fa-edit"></i>`;

                        Swal.fire({
                            icon: 'success',
                            title: '@Localizer["Updated!"]',
                            text: '@Localizer["Indicator name updated successfully"]',
                            timer: 1200,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire('Error', '@Localizer["Could not save changes"]', 'error');
                    }
                });
            } else {
                // Edit mode
                nameDisplay.classList.add("d-none");
                nameInput.classList.remove("d-none");
                editBtn.innerHTML = `<i class="fas fa-save"></i>`;
            }
        }
        function confirmDelete(indicatorCode) {
        Swal.fire({
            title: '@Localizer["Are you sure?"]',
            text: "@Localizer["You won't be able to revert this!"]",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: '@Localizer["Yes, delete it!"]'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/Indicators/DeleteConfirmed/${indicatorCode}`,
                    type: 'POST',
                    success: function () {
                        $(`#indicator-row-${indicatorCode}`).fadeOut();
                      //  Swal.fire('Deleted!', 'Indicator has been deleted.', 'success');
                            Swal.fire({
                            title: '"@Localizer["Deleted!"]"',
                            text: '"@Localizer["Indicator has been deleted."]"',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                          setTimeout(function(){
                            window.location.reload();
                        }, 2000);
                    },
                    error: function () {
                        Swal.fire('Error', '"@Localizer["Failed to delete the indicator."]"', 'error');
                    }
                });
            }
        });
    }
    </script>


