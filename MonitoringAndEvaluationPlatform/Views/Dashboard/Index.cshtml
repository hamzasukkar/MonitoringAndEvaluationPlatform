@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@model MonitoringAndEvaluationPlatform.ViewModel.DashboardSummaryViewModel
@{
	ViewData["Title"] = "Summary";
	Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}
<div class="row text-center g-4 mb-4" style="padding-top: 10px;">
	<!-- Frameworks -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-primary text-white">
			<div class="card-body">
				<i class="bi bi-diagram-3-fill display-5 mb-2"></i>
				<h5 class="card-title">@Localizer["Total Frameworks"]</h5>
				<h2 class="fw-bold" id="totalFrameworks">@Model.TotalFrameworks</h2>
				<select id="frameworkFilter" class="form-select mt-3 text-dark">
					<option disabled selected value="">-- @Localizer["Select Framework"] --</option>
					@foreach (var fw in Model.Frameworks)
					{
						<option value="@fw.Code">@fw.Name</option>
					}
				</select>
			</div>
		</div>
	</div>

	<!-- Projects -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-warning text-dark">
			<div class="card-body">
				<i class="bi bi-building display-5 mb-2"></i>
				<h5 class="card-title">@Localizer["Total Projects"]</h5>
				<h2 id="totalProjects" class="fw-bold">@Model.TotalProjects</h2>
				<select id="projectFilter" class="form-select mt-3">
					<option disabled selected>-- @Localizer["Select Project"] --</option>
					@foreach (var proj in Model.Projects)
					{
						<option value="@proj.ProjectID">@proj.ProjectName</option>
					}
				</select>
			</div>
		</div>
	</div>

	<!-- Ministries -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-success text-white">
			<div class="card-body">
				<i class="bi bi-bar-chart-fill display-5 mb-2"></i>
				<h5 class="card-title">@Localizer["Total Ministries"]</h5>
				<h2 id="totalMinistries" class="fw-bold">@Model.TotlalMinistries</h2>
				<select id="ministryFilter" class="form-select mt-3 text-dark">
					<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>
					@foreach (var min in Model.Ministries)
					{
						<option value="@min.Code">@min.MinistryDisplayName</option>
					}
				</select>
			</div>
		</div>
	</div>


	<!-- Governorates -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-danger text-white">
			<div class="card-body">
				<i class="bi bi-geo-alt-fill display-5 mb-2"></i>
				<h5 class="card-title">@Localizer["Total Governorates"]</h5>
				<h2 class="fw-bold">@Model.TotalGovernorate</h2>
				<select id="governorateFilter" class="form-select mt-3 text-dark" multiple>
					<option disabled selected value="">-- @Localizer["Select Governorate"] --</option>
					@foreach (var gov in Model.Governorates)
					{
						<option value="@gov.Code">@gov.AR_Name</option>
					}
				</select>
			</div>
		</div>
	</div>
	<!-- District -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-info text-white">
			<div class="card-body">
				<h5 class="card-title">@Localizer["District"]</h5>
				<h2 id="districtCount" class="fw-bold">@Localizer["Total Districts"]: 0</h2>
				<select id="districtFilter" class="form-select mt-3 text-dark" disabled multiple>
					<option disabled selected value="">-- @Localizer["Select District"] --</option>
				</select>
			</div>
		</div>
	</div>

	<!-- Sub-District -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-secondary text-white">
			<div class="card-body">
				<h5 class="card-title">@Localizer["Sub-District"]</h5>
				<h2 id="subDistrictCount" class="fw-bold">@Localizer["Total SubDistrict"]:0</h2>
				<select id="subDistrictFilter" class="form-select mt-3 text-dark" disabled multiple>
					<option disabled selected value="">-- Select @Localizer["Sub-District"] --</option>
				</select>
			</div>
		</div>
	</div>

	<!-- Sub-District → Community Card -->
	<div class="col-md-3">
		<div class="card shadow-lg border-0 bg-dark text-white">
			<div class="card-body">
				<h5 class="card-title">@Localizer["Community"]</h5>
				<h2 id="communityCount" class="fw-bold">@Localizer["Total Communities"]: 0</h2>
				<select id="communityFilter" class="form-select mt-3 text-dark" disabled multiple>
					<option disabled selected value="">-- @Localizer["Select Community"] --</option>
				</select>
			</div>
		</div>
	</div>


</div>





<div class="text-end mb-3">
	<button id="clearFiltersBtn" class="btn btn-outline-secondary">
		<i class="bi bi-x-circle"></i> @Localizer["Clear Filters"]
	</button>
</div>


<!-- Container for Gauge Charts -->
<div id="gaugesContainer" class="row"></div>


<script>
	async function loadGauges(frameworkCode = '', ministryCode = '', projectCode = '',governorateCode='',districtCode='',subDistrictCode='',communityCode='') {
		const urlParams = new URLSearchParams();
		if (frameworkCode) urlParams.append('frameworkCode', frameworkCode);
		if (ministryCode) urlParams.append('ministryCode', ministryCode);
		if (projectCode) urlParams.append('projectCode', projectCode);
		if (governorateCode) urlParams.append('governorateCode', governorateCode);
		// Corrected typos in the following parameter checks
		if (districtCode) urlParams.append('districtCode', districtCode);
		if (subDistrictCode) urlParams.append('subDistrictCode', subDistrictCode);
		if (communityCode) urlParams.append('communityCode', communityCode);

		const response = await fetch(`/Dashboard/FrameworksGauge?${urlParams.toString()}`);
		const frameworks = await response.json();

		const container = document.getElementById('gaugesContainer');
		container.innerHTML = '';

		frameworks.forEach(framework => {
			const chartId = `gaugeChart_${framework.code}`;
			const barColor = framework.indicatorsPerformance >= 80 ? 'bg-success'
							: framework.indicatorsPerformance >= 50 ? 'bg-warning'
							: 'bg-danger';

			const card = document.createElement('div');
			card.className = 'col-md-6 mb-4';
			card.innerHTML = `
				<div class="card shadow-sm p-4 rounded-lg">
					<h5 class="mb-3 font-weight-bold">${framework.name}</h5>
					<div class="row align-items-center">
						<div class="col-md-6 text-center">
							<canvas id="${chartId}" height="160"></canvas>
							<div class="fw-bold mt-2" style="font-size: 1.1rem; color:#00c853;">
								${framework.indicatorsPerformance}% @Localizer["Achieved"]
							</div>
						</div>
						<div class="col-md-6">
							<div class="mb-2 fw-bold text-muted">@Localizer["Overall Progress"]</div>
							<div class="progress mb-3" style="height: 25px; border-radius: 0.5rem;">
								<div class="progress-bar ${barColor}" role="progressbar"
									 style="width: ${framework.indicatorsPerformance}%"
									 aria-valuenow="${framework.indicatorsPerformance}" aria-valuemin="0" aria-valuemax="100">
									${framework.indicatorsPerformance}%
								</div>
							</div>
							<div class="text-muted" style="font-size: 0.9rem;">
								@Localizer["Indicators"]: ${framework.indicatorCount}<br/>
							</div>
							<div class="mt-3">
								<strong class="text-muted">@Localizer["Projects"]:</strong>
									${framework.projects.map(p => {
									// Round p.performance to the nearest whole number
									const roundedPerformance = Math.round(p.performance);

									// Logic to color project progress bars based on rounded performance
									const projectBarColor = roundedPerformance >= 80 ? 'bg-success'
																	: roundedPerformance >= 50 ? 'bg-warning'
																	: 'bg-danger';

									return `
										<div class="mt-2">
											<div class="d-flex justify-content-between">
												<span style="font-size: 0.85rem;" class="text-muted">${p.projectName}</span>
												<span style="font-size: 0.85rem;" class="fw-bold text-muted">${roundedPerformance}%</span>
											</div>
											<div class="progress mt-1" style="height: 8px; border-radius: 0.25rem;">
												<div class="progress-bar ${projectBarColor}" role="progressbar"
													style="width: ${roundedPerformance}%"
													aria-valuenow="${roundedPerformance}" aria-valuemin="0" aria-valuemax="100">
												</div>
											</div>
										</div>
									`;
								}).join('')}
							</div>
						</div>
					</div>
				</div>
			`;
			container.appendChild(card);

			const ctx = document.getElementById(chartId).getContext('2d');

			new Chart(ctx, {
				type: 'doughnut',
				data: {
					datasets: [{
						data: [framework.indicatorsPerformance, 100 - framework.indicatorsPerformance],
						backgroundColor: ['#00c853', '#e0e0e0'],
						borderWidth: 0,
						cutout: '80%'
					}]
				},
				// Assuming ChartDataLabels is registered globally
				options: {
					responsive: true,
					plugins: {
						legend: { display: false },
						tooltip: {
							enabled: true,
							callbacks: {
								label: function(context) {
									const value = context.raw;
									const idx   = context.dataIndex;
									if (idx === 0) {
										if (value >= 80) return `Excellent: ${value}% achieved`;
										if (value >= 50) return `Satisfactory: ${value}% achieved`;
										return `Needs Improvement: ${value}% achieved`;
									} else {
										return `Remaining: ${value}% to goal`;
									}
								}
							}
						}
					}
				}
			});
		});
	}

	// --- Your existing event listeners and helper functions below ---

	// Load default gauges on page load
	document.addEventListener('DOMContentLoaded', function () {
		loadGauges();
		// Initialize Select2 for governorate filter
		$('#governorateFilter').select2({
			placeholder: "-- @Localizer["Select Governorate"] --",
			allowClear: true
		});

		$('#districtFilter').select2({
			placeholder: "-- @Localizer["Select District"] --",
			allowClear: true
		});

		$('#subDistrictFilter').select2({
			placeholder: "-- @Localizer["Select Sub District"] --",
			allowClear: true
		});

		$('#communityFilter').select2({
			placeholder: "-- @Localizer["Select Community"] --",
			allowClear: true
		});

	});

	// Event listeners for filters
	document.getElementById('frameworkFilter').addEventListener('change', function () {
		const frameworkCode = this.value;
		const ministryCode = document.getElementById('ministryFilter').value;
		const projectCode = document.getElementById('projectFilter').value;
		loadGauges(frameworkCode, ministryCode, projectCode);
		document.getElementById('totalFrameworks').textContent = 1;
		// Clear existing project options
		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';

		// Clear ministry options
		const ministryDropdown = document.getElementById('ministryFilter');
		ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';


		if (frameworkCode) {
			// Fetch projects for the selected framework
			fetch(`/Dashboard/GetProjectsByFramework?frameworkCode=${frameworkCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for projects");
					return response.json();
				})
					.then(projects => {
		projects.forEach(project => {
			const option = document.createElement('option');
			option.value = project.id;
			option.textContent = project.name;
			projectDropdown.appendChild(option);
		});

		// Update total projects (excluding the default option)
		const totalProjects = projectDropdown.options.length - 1;
		document.getElementById('totalProjects').textContent = totalProjects;
	})
				.catch(error => console.error('Error fetching projects:', error));

			// Fetch ministries for the selected framework
			fetch(`/Dashboard/GetMinistriesByFramework?frameworkCode=${frameworkCode}`)
				.then(res => {
					if (!res.ok) throw new Error('Network response was not ok for ministries');
					return res.json();
				})
				.then(ministries => {
		ministries.forEach(mn => {
			const opt = document.createElement('option');
			opt.value = mn.id;
			opt.textContent = mn.name;
			ministryDropdown.appendChild(opt);
		});

		// Update total ministries (excluding the default option)
		const totalMinistries = ministryDropdown.options.length - 1;
		document.getElementById('totalMinistries').textContent = totalMinistries;
	})
				.catch(err => console.error('Error fetching ministries:', err));
		}
	});

		document.getElementById('ministryFilter').addEventListener('change', function () {
		const ministryCode = this.value;
		const filters = getFilters();
		filters.ministryCode = ministryCode;

		// Load gauges with the new filter
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, filters.communityCode);

		// Clear existing project options
		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';

		// Reset project count
		document.getElementById('totalProjects').textContent = 0;

		if (ministryCode) {
			// Fetch projects for the selected ministry
			fetch(`/Dashboard/GetProjectsByMinistry?ministryCode=${ministryCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for projects by ministry");
					return response.json();
				})
				.then(projects => {
					projects.forEach(project => {
						const option = document.createElement('option');
						option.value = project.id;
						option.textContent = project.name;
						projectDropdown.appendChild(option);
					});
					const totalProjects = projects.length;
					document.getElementById('totalProjects').textContent = totalProjects;
				})
				.catch(error => console.error('Error fetching projects:', error));
		}
	});



		document.getElementById('projectFilter').addEventListener('change', function () {
		const projectCode = this.value;
		const filters = getFilters();
		filters.projectCode = projectCode;

		// Load gauges with the new filter
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, filters.communityCode);


		// Clear and reset the Frameworks dropdown and count
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';
		document.getElementById('totalFrameworks').textContent = 0;

		// Clear existing ministry options
		const ministryDropdown = document.getElementById('ministryFilter');
		ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';

		// Reset ministry count
		document.getElementById('totalMinistries').textContent = 0;

		if (projectCode) {
			// Fetch ministries for the selected project
			fetch(`/Dashboard/GetMinistriesByProject?projectCode=${projectCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for ministries by project");
					return response.json();
				})
				.then(ministries => {
					ministries.forEach(ministry => {
						const option = document.createElement('option');
						option.value = ministry.id;
						option.textContent = ministry.name;
						ministryDropdown.appendChild(option);
					});
					const totalMinistries = ministries.length;
					document.getElementById('totalMinistries').textContent = totalMinistries;
				})
				.catch(error => console.error('Error fetching ministries:', error));

					// Fetch frameworks for the selected project
			fetch(`/Dashboard/GetFrameworksByProject?projectCode=${projectCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for frameworks by project");
					return response.json();
				})
				.then(frameworks => {
					frameworks.forEach(framework => {
						const option = document.createElement('option');
						option.value = framework.code;
						option.textContent = framework.name;
						frameworkDropdown.appendChild(option);
					});
					const totalFrameworks = frameworks.length;
					document.getElementById('totalFrameworks').textContent = totalFrameworks;
				})
				.catch(error => console.error('Error fetching frameworks:', error));

		}
	});

	// Add or modify this part within your existing JavaScript block

	// Event listener for the governorate filter
	$('#governorateFilter').on('change', function () {
		// 1. Get the selected governorate codes
		const selectedGovCodes = $(this).val() || [];
		const governorateCode = selectedGovCodes.join(',');

		// 2. Load gauges based on the new filters
		const filters = getFilters();
		loadGauges(
			filters.frameworkCode,
			filters.ministryCode,
			filters.projectCode,
			governorateCode
		);

		// 3. Clear existing project options
		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option disabled selected>-- @Localizer["Select Project"]  --</option>';
		document.getElementById('totalProjects').textContent = 0; // Reset project count

		// 4. If any governorates are selected, fetch projects for them
		if (governorateCode) {
			fetch(`/Dashboard/GetProjectsByGovernorate?governorateCode=${governorateCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for projects by governorate");
					return response.json();
				})
				.then(projects => {
					projects.forEach(project => {
						const option = document.createElement('option');
						option.value = project.id;
						option.textContent = project.name;
						projectDropdown.appendChild(option);
					});
					// Update the total projects count
					const totalProjects = projects.length;
					document.getElementById('totalProjects').textContent = totalProjects;
				})
				.catch(error => console.error('Error fetching projects:', error));
		}

		// Existing logic for districts and other filters will follow...
		// The rest of the original $('#governorateFilter').on('change', function () { ... });
		// block should remain, as it handles the cascading of geographical filters.
			// Inside your existing `$('#governorateFilter').on('change', function () { ... });` block

	// ... [Existing code for updating gauges and projects] ...

	// New section to update the Ministries dropdown
	const ministryDropdown = document.getElementById('ministryFilter');
	ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';

	if (governorateCode) {
		fetch(`/Dashboard/GetMinistriesByGovernorates?governorateCodes=${governorateCode}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for ministries by governorate");
				return response.json();
			})
			.then(ministries => {
				ministries.forEach(ministry => {
					const option = document.createElement('option');
					option.value = ministry.id;
					option.textContent = ministry.name;
					ministryDropdown.appendChild(option);
				});
				// Update the total ministries count
				const totalMinistries = ministries.length;
				document.getElementById('totalMinistries').textContent = totalMinistries;
			})
			.catch(error => console.error('Error fetching ministries:', error));
	} else {
		// If no governorates are selected, reset the ministry count
		document.getElementById('totalMinistries').textContent = 0;
	}

	// ... [The rest of your existing code for districts and sub-districts] ...
		// Add this to your existing `$('#governorateFilter').on('change', function () { ... });` block,
	// along with the code for updating projects and ministries.

	// New section to update the Frameworks dropdown
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';

		if (governorateCode) {
			fetch(`/Dashboard/GetFrameworksByGovernorates?governorateCodes=${governorateCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for frameworks by governorate");
					return response.json();
				})
				.then(frameworks => {
					frameworks.forEach(framework => {
						const option = document.createElement('option');
						option.value = framework.code;
						option.textContent = framework.name;
						frameworkDropdown.appendChild(option);
					});
					// Update the total frameworks count
					const totalFrameworks = frameworks.length;
					document.getElementById('totalFrameworks').textContent = totalFrameworks;
				})
				.catch(error => console.error('Error fetching frameworks:', error));
		} else {
			// If no governorates are selected, reset the framework count
			document.getElementById('totalFrameworks').textContent = 0;
		}

	  // 3. if nothing selected, clear downstream filters
	  if (!selectedGovCodes.length) {
		resetDropdown('districtFilter');
		resetDropdown('subDistrictFilter');
		resetDropdown('communityFilter');
		$('#districtCount').text('Total Districts: 0');
		return;
	  }

	  // 4. dedupe your codes
	  const uniqueGovCodes = Array.from(new Set(selectedGovCodes));

	  // 5. fetch districts for ALL selected governorates
	  fetch(
		`/Dashboard/GetDistrictsByGovernorates?governorateCodes=${uniqueGovCodes.join(',')}`
	  )
		.then((resp) => resp.json())
		.then((districts) => {
		  // 6. repopulate the district dropdown, preserving any already‐picked districts
		  populateDropdown('districtFilter', districts, /*preserveSelection=*/ true);

		  // 7. update UI pieces
		  $('#districtCount').text(`@Localizer["Total Districts"]: ${districts.length}`);
		  $('#districtFilter').prop('disabled', districts.length === 0);
		})
		.catch((err) => console.error(err));
	});
$('#districtFilter').on('change', function () {
	// 1. Re-load gauges with the new filter
	const filters = getFilters();
	loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode);

	// 2. Clear & reset ministry, project, and framework dropdowns
	const ministryDropdown = document.getElementById('ministryFilter');
	ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';
	document.getElementById('totalMinistries').textContent = 0;

	const projectDropdown = document.getElementById('projectFilter');
	projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';
	document.getElementById('totalProjects').textContent = 0;

	const frameworkDropdown = document.getElementById('frameworkFilter');
	frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';
	document.getElementById('totalFrameworks').textContent = 0;

	// 3. Grab the selected district codes
	const selectedDistCodes = Array.from(new Set($(this).val() || []));
	const districtCodeString = selectedDistCodes.join(',');

	// 4. If any districts are selected, fetch data for all dependent dropdowns
	if (districtCodeString) {
		// Fetch projects for the selected districts
		fetch(`/Dashboard/GetProjectsByDistricts?districtCodes=${districtCodeString}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for projects by district");
				return response.json();
			})
			.then(projects => {
				projects.forEach(project => {
					const option = document.createElement('option');
					option.value = project.id;
					option.textContent = project.name;
					projectDropdown.appendChild(option);
				});
				const totalProjects = projects.length;
				document.getElementById('totalProjects').textContent = totalProjects;
			})
			.catch(error => console.error('Error fetching projects:', error));

		// Fetch ministries for the selected districts
		fetch(`/Dashboard/GetMinistriesByDistricts?districtCodes=${districtCodeString}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for ministries by district");
				return response.json();
			})
			.then(ministries => {
				ministries.forEach(mn => {
					const opt = document.createElement('option');
					opt.value = mn.id;
					opt.textContent = mn.name;
					ministryDropdown.appendChild(opt);
				});
				const totalMinistries = ministries.length;
				document.getElementById('totalMinistries').textContent = totalMinistries;
			})
			.catch(error => console.error('Error fetching ministries:', error));

		// Fetch frameworks for the selected districts
		fetch(`/Dashboard/GetFrameworksByDistricts?districtCodes=${districtCodeString}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for frameworks by district");
				return response.json();
			})
			.then(frameworks => {
				frameworks.forEach(framework => {
					const option = document.createElement('option');
					option.value = framework.code;
					option.textContent = framework.name;
					frameworkDropdown.appendChild(option);
				});
				const totalFrameworks = frameworks.length;
				document.getElementById('totalFrameworks').textContent = totalFrameworks;
			})
			.catch(error => console.error('Error fetching frameworks:', error));

		// ... [The rest of your existing logic for fetching sub-districts, etc.] ...
	}
});

	$('#subDistrictFilter').on('change', function () {
			const filters = getFilters();
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode);

	   const selectedsubDistCodes = $(this).val() || [];

		resetDropdown('communityFilter');
		document.getElementById('communityCount').innerText = 'Total Communities: 0';
		fetch(`/Dashboard/GetCommunitiesBySubDistrict?subDistrictCodes=${selectedsubDistCodes}`)
			.then((r) => r.json())
			.then((list) => {
				populateDropdown('communityFilter', list);
				document.getElementById('communityCount').innerText = `@Localizer["Total Communities"] : ${list.length}`;
			})
			.catch((e) => console.error(e));
		});

	document.getElementById('communityFilter').addEventListener('change', function () {
		const filters = getFilters();
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, filters.communityCode);
	});

	document.getElementById('clearFiltersBtn').addEventListener('click', function () {
		document.getElementById('frameworkFilter').selectedIndex = 0;
		document.getElementById('ministryFilter').innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"]  --</option>';
		document.getElementById('projectFilter').innerHTML = '<option value="">@Localizer["Select Project"] </option>';
		$('#governorateFilter').val(null).trigger('change'); // Clear Select2
		resetDropdown('districtFilter');
		resetDropdown('subDistrictFilter');
		resetDropdown('communityFilter');
		document.getElementById('districtCount').innerText = '@Localizer["Total Districts"] : 0';
		document.getElementById('subDistrictCount').innerText = '@Localizer["Total SubDistrict"] : 0';
		document.getElementById('communityCount').innerText = '@Localizer["Total Communities"] : 0';
		loadGauges();
	});

	// Helpers
	function resetDropdown(id) {
		const dd = document.getElementById(id);
		dd.innerHTML = `<option disabled selected value="">-- Select --</option>`;
		dd.disabled = true;
	}

	function populateDropdown(id, items) {
		const dd = document.getElementById(id);
		items.forEach(i => {
			const opt = document.createElement('option');
			opt.value = i.code;
			opt.textContent = i.aR_Name;
			dd.appendChild(opt);
		});
		dd.disabled = false;
	}

	function getFilters() {
		return {
			frameworkCode: document.getElementById('frameworkFilter').value,
			ministryCode: document.getElementById('ministryFilter').value,
			projectCode: document.getElementById('projectFilter').value,
			governorateCode: $('#governorateFilter').val().join(','), // For multi-select
			districtCode: document.getElementById('districtFilter').value,
			subDistrictCode: document.getElementById('subDistrictFilter').value,
			communityCode: document.getElementById('communityFilter').value
		};
	}
</script>
