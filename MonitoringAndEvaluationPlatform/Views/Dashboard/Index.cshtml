@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Localization
@model MonitoringAndEvaluationPlatform.ViewModel.DashboardSummaryViewModel
@{
	ViewData["Title"] = "Summary";
	Layout = "~/Views/Shared/_DashboardHomeLayout.cshtml";
}
<!-- Dashboard Header -->
<div class="dashboard-header">
	<h1 class="dashboard-title">
		<i class="fas fa-chart-pie me-3"></i>
		>@Localizer["Dashboard Summary"]
	</h1>
	<p class="dashboard-subtitle">
		@Localizer["Comprehensive overview with interactive filtering and real-time performance metrics"]
	</p>
</div>

<div class="container-fluid">
	<!-- Filter Cards Grid -->
	<div class="stats-grid mb-4">
		<!-- Frameworks Card -->
		<div class="stat-card frameworks-card">
			<div class="stat-icon primary">
				<i class="fas fa-sitemap"></i>
			</div>
			<div class="stat-number" id="totalFrameworks">@Model.TotalFrameworks</div>
			<div class="stat-label">@Localizer["Total Frameworks"]</div>
			<div class="stat-filter">
				<select id="frameworkFilter" class="modern-select-filter">
					<option disabled selected value="">@Localizer["Select Framework"]</option>
					@foreach (var fw in Model.Frameworks)
					{
						<option value="@fw.Code">@fw.Name</option>
					}
				</select>
			</div>
		</div>

		<!-- Projects Card -->
		<div class="stat-card projects-card">
			<div class="stat-icon warning">
				<i class="fas fa-project-diagram"></i>
			</div>
			<div class="stat-number" id="totalProjects">@Model.TotalProjects</div>
			<div class="stat-label">@Localizer["Total Projects"]</div>
			<div class="stat-filter">
				<select id="projectFilter" class="modern-select-filter">
					<option disabled selected>@Localizer["Select Project"]</option>
					@foreach (var proj in Model.Projects)
					{
						<option value="@proj.ProjectID">@proj.ProjectName</option>
					}
				</select>
			</div>
		</div>

		<!-- Ministries Card -->
		<div class="stat-card ministries-card">
			<div class="stat-icon success">
				<i class="fas fa-building"></i>
			</div>
			<div class="stat-number" id="totalMinistries">@Model.TotlalMinistries</div>
			<div class="stat-label">@Localizer["Total Ministries"]</div>
			<div class="stat-filter">
				<select id="ministryFilter" class="modern-select-filter">
					<option disabled selected value="">@Localizer["Select Ministry"]</option>
					@foreach (var min in Model.Ministries)
					{
						<option value="@min.Code">@min.MinistryDisplayName</option>
					}
				</select>
			</div>
		</div>


		<!-- Governorates Card -->
		<div class="stat-card governorates-card">
			<div class="stat-icon danger">
				<i class="fas fa-map-marked-alt"></i>
			</div>
			<div class="stat-number" id="totalGovernorates">@Model.TotalGovernorate</div>
			<div class="stat-label">@Localizer["Total Governorates"]</div>
			<div class="stat-filter">
				<select id="governorateFilter" class="modern-select-filter multiple" multiple>
					<option disabled selected value="">@Localizer["Select Governorate"]</option>
					@foreach (var gov in Model.Governorates)
					{
						<option value="@gov.Code">@gov.AR_Name</option>
					}
				</select>
			</div>
		</div>
		<!-- Districts Card -->
		<div class="stat-card districts-card">
			<div class="stat-icon info">
				<i class="fas fa-map-signs"></i>
			</div>
			<div class="stat-number" id="districtCount">0</div>
			<div class="stat-label">@Localizer["Total Districts"]</div>
			<div class="stat-filter">
				<select id="districtFilter" class="modern-select-filter multiple" disabled multiple>
					<option disabled selected value="">@Localizer["Select District"]</option>
				</select>
			</div>
		</div>

		<!-- Sub-Districts Card -->
		<div class="stat-card subdistricts-card">
			<div class="stat-icon secondary">
				<i class="fas fa-map"></i>
			</div>
			<div class="stat-number" id="subDistrictCount">0</div>
			<div class="stat-label">@Localizer["Total SubDistricts"]</div>
			<div class="stat-filter">
				<select id="subDistrictFilter" class="modern-select-filter multiple" disabled multiple>
					<option disabled selected value="">@Localizer["Select Sub-District"]</option>
				</select>
			</div>
		</div>

		<!-- Communities Card -->
		<div class="stat-card communities-card">
			<div class="stat-icon dark">
				<i class="fas fa-users"></i>
			</div>
			<div class="stat-number" id="communityCount">0</div>
			<div class="stat-label">@Localizer["Total Communities"]</div>
			<div class="stat-filter">
				<select id="communityFilter" class="modern-select-filter multiple" disabled multiple>
					<option disabled selected value="">@Localizer["Select Community"]</option>
				</select>
			</div>
		</div>
	</div>


	<!-- Clear Filters Button -->
	<div class="filter-actions-container mb-4">
		<button id="clearFiltersBtn" class="btn btn-modern-secondary">
			<i class="fas fa-times-circle me-2"></i>@Localizer["Clear Filters"]
		</button>
	</div>

	<!-- Performance Charts Section -->
	<div class="chart-card">
		<h3 class="chart-title">
			<i class="fas fa-chart-pie"></i>
			@Localizer["Framework Performance Overview"]
		</h3>
		<div class="chart-content">
			<div id="gaugesContainer" class="performance-charts-grid"></div>
		</div>
	</div>
</div>

<style>
	/* Modern Dashboard Styles */
	.stats-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 1.5rem;
		margin-bottom: 2rem;
	}

	.stat-card {
		background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
		backdrop-filter: blur(15px);
		-webkit-backdrop-filter: blur(15px);
		border: 1px solid rgba(255,255,255,0.3);
		border-radius: 20px;
		padding: 2rem;
		box-shadow: 
			0 8px 32px rgba(0,0,0,0.1),
			0 4px 16px rgba(0,0,0,0.05);
		transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
		position: relative;
		overflow: hidden;
	}

	.stat-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
		transition: left 0.6s;
	}

	.stat-card:hover::before {
		left: 100%;
	}

	.stat-card:hover {
		transform: translateY(-8px) scale(1.02);
		box-shadow: 
			0 20px 40px rgba(0,0,0,0.15),
			0 8px 24px rgba(0,0,0,0.1);
		border-color: rgba(255,255,255,0.5);
	}

	.stat-icon {
		width: 60px;
		height: 60px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		margin-bottom: 1rem;
		font-size: 1.5rem;
		color: white;
		box-shadow: 0 4px 15px rgba(0,0,0,0.2);
	}

	.stat-icon.primary { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
	.stat-icon.warning { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
	.stat-icon.success { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
	.stat-icon.danger { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); }
	.stat-icon.info { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }
	.stat-icon.secondary { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); }
	.stat-icon.dark { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }

	.stat-number {
		font-size: 2.5rem;
		font-weight: 700;
		color: #2d3748;
		margin-bottom: 0.5rem;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.stat-label {
		font-size: 0.9rem;
		color: #718096;
		font-weight: 500;
		margin-bottom: 1rem;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.stat-filter {
		margin-top: auto;
	}

	.modern-select-filter {
		width: 100%;
		padding: 0.75rem;
		border: 2px solid #e2e8f0;
		border-radius: 12px;
		background: rgba(255,255,255,0.9);
		font-size: 0.85rem;
		transition: all 0.3s ease;
		backdrop-filter: blur(10px);
	}

	.modern-select-filter:focus {
		outline: none;
		border-color: #667eea;
		box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
		transform: translateY(-1px);
	}

	.filter-actions-container {
		display: flex;
		justify-content: center;
		margin: 2rem 0;
	}

	.btn-modern-secondary {
		background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
		border: 2px solid #e2e8f0;
		color: #4a5568;
		padding: 0.75rem 1.5rem;
		border-radius: 12px;
		font-weight: 600;
		transition: all 0.3s ease;
		box-shadow: 0 4px 6px rgba(0,0,0,0.05);
	}

	.btn-modern-secondary:hover {
		background: linear-gradient(135deg, #edf2f7 0%, #e2e8f0 100%);
		transform: translateY(-2px);
		box-shadow: 0 8px 15px rgba(0,0,0,0.1);
		border-color: #cbd5e0;
	}

	.chart-card {
		background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
		backdrop-filter: blur(15px);
		-webkit-backdrop-filter: blur(15px);
		border: 1px solid rgba(255,255,255,0.3);
		border-radius: 20px;
		padding: 2rem;
		box-shadow: 
			0 8px 32px rgba(0,0,0,0.1),
			0 4px 16px rgba(0,0,0,0.05);
		margin-bottom: 2rem;
	}

	.chart-title {
		font-size: 1.5rem;
		font-weight: 700;
		color: #2d3748;
		margin-bottom: 1.5rem;
		display: flex;
		align-items: center;
		gap: 0.75rem;
	}

	.chart-title i {
		color: #667eea;
		font-size: 1.25rem;
	}

	.performance-charts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
		gap: 1.5rem;
	}

	/* Responsive Design */
	@@media (max-width: 768px) {
		.stats-grid {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.stat-card {
			padding: 1.5rem;
		}

		.stat-number {
			font-size: 2rem;
		}

		.performance-charts-grid {
			grid-template-columns: 1fr;
		}

		.chart-card {
			padding: 1.5rem;
		}
	}

	@@media (max-width: 480px) {
		.stat-card {
			padding: 1rem;
		}

		.stat-icon {
			width: 50px;
			height: 50px;
			font-size: 1.25rem;
		}

		.stat-number {
			font-size: 1.75rem;
		}

		.chart-title {
			font-size: 1.25rem;
		}
	}

	/* Animation for chart loading */
	@@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.performance-charts-grid > * {
		animation: fadeInUp 0.6s ease-out;
	}

	/* Select2 custom styling */
	.select2-container--default .select2-selection--multiple {
		border: 2px solid #e2e8f0 !important;
		border-radius: 12px !important;
		background: rgba(255,255,255,0.9) !important;
		backdrop-filter: blur(10px);
	}

	.select2-container--default.select2-container--focus .select2-selection--multiple {
		border-color: #667eea !important;
		box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1) !important;
	}

	.select2-container--default .select2-selection--multiple .select2-selection__choice {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
		border: none !important;
		color: white !important;
		border-radius: 8px !important;
		padding: 2px 8px !important;
		margin: 2px !important;
	}
</style>

<script>
	async function loadGauges(frameworkCode = '', ministryCode = '', projectCode = '',governorateCode='',districtCode='',subDistrictCode='',communityCode='') {
		const urlParams = new URLSearchParams();
		if (frameworkCode) urlParams.append('frameworkCode', frameworkCode);
		if (ministryCode) urlParams.append('ministryCode', ministryCode);
		if (projectCode) urlParams.append('projectCode', projectCode);
		if (governorateCode) urlParams.append('governorateCode', governorateCode);
		// Corrected typos in the following parameter checks
		if (districtCode) urlParams.append('districtCode', districtCode);
		if (subDistrictCode) urlParams.append('subDistrictCode', subDistrictCode);
		if (communityCode) urlParams.append('communityCode', communityCode);

		const response = await fetch(`/Dashboard/FrameworksGauge?${urlParams.toString()}`);
		const frameworks = await response.json();

		const container = document.getElementById('gaugesContainer');
		container.innerHTML = '';

		frameworks.forEach(framework => {
			const chartId = `gaugeChart_${framework.code}`;
			const barColor = framework.indicatorsPerformance >= 80 ? 'bg-success'
							: framework.indicatorsPerformance >= 50 ? 'bg-warning'
							: 'bg-danger';

			const card = document.createElement('div');
			card.className = 'col-md-6 mb-4';
			card.innerHTML = `
				<div class="card shadow-sm p-4 rounded-lg">
					<h5 class="mb-3 font-weight-bold">${framework.name}</h5>
					<div class="row align-items-center">
						<div class="col-md-6 text-center">
							<canvas id="${chartId}" height="160"></canvas>
							<div class="fw-bold mt-2" style="font-size: 1.1rem; color:#00c853;">
								${framework.indicatorsPerformance}% @Localizer["Achieved"]
							</div>
						</div>
						<div class="col-md-6">
							<div class="mb-2 fw-bold text-muted">@Localizer["Overall Progress"]</div>
							<div class="progress mb-3" style="height: 25px; border-radius: 0.5rem;">
								<div class="progress-bar ${barColor}" role="progressbar"
									 style="width: ${framework.indicatorsPerformance}%"
									 aria-valuenow="${framework.indicatorsPerformance}" aria-valuemin="0" aria-valuemax="100">
									${framework.indicatorsPerformance}%
								</div>
							</div>
							<div class="text-muted" style="font-size: 0.9rem;">
	@Localizer["Indicators"]: ${framework.indicatorCount}<br/>
							</div>
							<div class="mt-3">
								<strong class="text-muted">@Localizer["Projects"]:</strong>
									${framework.projects.map(p => {
									// Round p.performance to the nearest whole number
									const roundedPerformance = Math.round(p.performance);

									// Logic to color project progress bars based on rounded performance
									const projectBarColor = roundedPerformance >= 80 ? 'bg-success'
																	: roundedPerformance >= 50 ? 'bg-warning'
																	: 'bg-danger';

									return `
										<div class="mt-2">
											<div class="d-flex justify-content-between">
												<span style="font-size: 0.85rem;" class="text-muted">${p.projectName}</span>
												<span style="font-size: 0.85rem;" class="fw-bold text-muted">${roundedPerformance}%</span>
											</div>
											<div class="progress mt-1" style="height: 8px; border-radius: 0.25rem;">
												<div class="progress-bar ${projectBarColor}" role="progressbar"
													style="width: ${roundedPerformance}%"
													aria-valuenow="${roundedPerformance}" aria-valuemin="0" aria-valuemax="100">
												</div>
											</div>
										</div>
									`;
								}).join('')}
							</div>
						</div>
					</div>
				</div>
			`;
			container.appendChild(card);

			const ctx = document.getElementById(chartId).getContext('2d');

			new Chart(ctx, {
				type: 'doughnut',
				data: {
					datasets: [{
						data: [framework.indicatorsPerformance, 100 - framework.indicatorsPerformance],
						backgroundColor: ['#00c853', '#e0e0e0'],
						borderWidth: 0,
						cutout: '80%'
					}]
				},
				// Assuming ChartDataLabels is registered globally
				options: {
					responsive: true,
					plugins: {
						legend: { display: false },
						tooltip: {
							enabled: true,
							callbacks: {
								label: function(context) {
									const value = context.raw;
									const idx   = context.dataIndex;
									if (idx === 0) {
										if (value >= 80) return `Excellent: ${value}% achieved`;
										if (value >= 50) return `Satisfactory: ${value}% achieved`;
										return `Needs Improvement: ${value}% achieved`;
									} else {
										return `Remaining: ${value}% to goal`;
									}
								}
							}
						}
					}
				}
			});
		});
	}

	// --- Your existing event listeners and helper functions below ---

	// Load default gauges on page load
	document.addEventListener('DOMContentLoaded', function () {
		loadGauges();
		// Initialize Select2 for governorate filter
		$('#governorateFilter').select2({
			placeholder: "-- @Localizer["Select Governorate"] --",
			allowClear: true
		});

		$('#districtFilter').select2({
			placeholder: "-- @Localizer["Select District"] --",
			allowClear: true
		});

		$('#subDistrictFilter').select2({
			placeholder: "-- @Localizer["Select Sub District"] --",
			allowClear: true
		});

		$('#communityFilter').select2({
			placeholder: "-- @Localizer["Select Community"] --",
			allowClear: true
		});

	});

	   let suppressGovChange = false; // guard flag

	// ✅ Framework filter change
	document.getElementById('frameworkFilter').addEventListener('change', function () {
		const frameworkCode = this.value;

		// ensure selected framework stays selected
		document.getElementById('frameworkFilter').value = frameworkCode;

		const ministryCode = document.getElementById('ministryFilter').value;
		const projectCode = document.getElementById('projectFilter').value;

		loadGauges(frameworkCode, ministryCode, projectCode);

		// reset counts
		document.getElementById('totalFrameworks').textContent = 1;

		// reset projects
		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';

		// reset ministries
		const ministryDropdown = document.getElementById('ministryFilter');
		ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';

		// reset governorates (without triggering its handler)
		const governorateDropdown = document.getElementById('governorateFilter');
		governorateDropdown.innerHTML = '';
		suppressGovChange = true;
		$('#governorateFilter').val(null).trigger('change.select2');

		if (frameworkCode) {
			// fetch projects
			fetch(`/Dashboard/GetProjectsByFramework?frameworkCode=${frameworkCode}`)
				.then(res => res.json())
				.then(projects => {
					projects.forEach(project => {
						const option = document.createElement('option');
						option.value = project.id;
						option.textContent = project.name;
						projectDropdown.appendChild(option);
					});
					document.getElementById('totalProjects').textContent = projects.length;
				})
				.catch(console.error);

			// fetch ministries
			fetch(`/Dashboard/GetMinistriesByFramework?frameworkCode=${frameworkCode}`)
				.then(res => res.json())
				.then(ministries => {
					ministries.forEach(mn => {
						const opt = document.createElement('option');
						opt.value = mn.id;
						opt.textContent = mn.name;
						ministryDropdown.appendChild(opt);
					});
					document.getElementById('totalMinistries').textContent = ministries.length;
				})
				.catch(console.error);

			// fetch governorates
			fetch(`/Dashboard/GetGovernoratesByFramework?frameworkCode=${frameworkCode}`)
				.then(res => res.json())
				.then(governorates => {
					governorates.forEach(gov => {
						const opt = document.createElement('option');
						opt.value = gov.code;
						opt.textContent = gov.name;
						governorateDropdown.appendChild(opt);
					});
					document.getElementById('totalGovernorates').textContent = governorates.length;
					$('#governorateFilter').trigger('change.select2');
				})
				.catch(console.error);
		} else {
			document.getElementById('totalProjects').textContent = 0;
			document.getElementById('totalMinistries').textContent = 0;
			document.getElementById('totalGovernorates').textContent = 0;
		}
	});
		document.getElementById('ministryFilter').addEventListener('change', function () {
		const ministryCode = this.value;
		const filters = getFilters();
		filters.ministryCode = ministryCode;

		// Load gauges with the new filter
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode);

		// ------------------- Clear and reset dropdowns -------------------
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';
		document.getElementById('totalFrameworks').textContent = 0;

		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';
		document.getElementById('totalProjects').textContent = 0;

		const governorateDropdown = document.getElementById('governorateFilter');
		governorateDropdown.innerHTML = '<option value="">@Localizer["Select Governorate"]</option>';
		document.getElementById('totalGovernorates').textContent = 0;

		if (!ministryCode) return;

		// ------------------- Fetch Projects -------------------
		fetch(`/Dashboard/GetProjectsByMinistry?ministryCode=${ministryCode}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for projects by ministry");
				return response.json();
			})
			.then(projects => {
				projects.forEach(project => {
					const option = document.createElement('option');
					option.value = project.id;
					option.textContent = project.name;
					projectDropdown.appendChild(option);
				});
				document.getElementById('totalProjects').textContent = projects.length;
			})
			.catch(error => console.error('Error fetching projects:', error));

		// ------------------- Fetch Frameworks -------------------
		fetch(`/Dashboard/GetFrameworksByMinistry?ministryCode=${ministryCode}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for frameworks by ministry");
				return response.json();
			})
			.then(frameworks => {
				frameworks.forEach(framework => {
					const option = document.createElement('option');
					option.value = framework.code;
					option.textContent = framework.name;
					frameworkDropdown.appendChild(option);
				});
				document.getElementById('totalFrameworks').textContent = frameworks.length;
			})
			.catch(error => console.error('Error fetching frameworks:', error));

		// ------------------- Fetch Governorates -------------------
		fetch(`/Dashboard/GetGovernoratesByMinistry?ministryCode=${ministryCode}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for governorates by ministry");
				return response.json();
			})
			.then(governorates => {
				governorates.forEach(gov => {
					const option = document.createElement('option');
					option.value = gov.code;
					option.textContent = gov.name;
					governorateDropdown.appendChild(option);
				});
				document.getElementById('totalGovernorates').textContent = governorates.length;
			})
			.catch(error => console.error('Error fetching governorates:', error));

		// Update total ministries count
		document.getElementById('totalMinistries').textContent = 1;
	});

		document.getElementById('projectFilter').addEventListener('change', function () {
		const projectCode = this.value;
		const filters = getFilters();
		filters.projectCode = projectCode;
		const governorateDropdown = document.getElementById('governorateFilter');
		governorateDropdown.innerHTML = '';

		// Load gauges with the new filter
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, filters.communityCode);


		// Clear and reset the Frameworks dropdown and count
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';
		document.getElementById('totalFrameworks').textContent = 0;

		// Clear existing ministry options
		const ministryDropdown = document.getElementById('ministryFilter');
		ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';

		// Reset ministry count
		document.getElementById('totalMinistries').textContent = 0;

		if (projectCode) {
			// Fetch ministries for the selected project
			fetch(`/Dashboard/GetMinistriesByProject?projectCode=${projectCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for ministries by project");
					return response.json();
				})
				.then(ministries => {
					ministries.forEach(ministry => {
						const option = document.createElement('option');
						option.value = ministry.id;
						option.textContent = ministry.name;
						ministryDropdown.appendChild(option);
					});
					const totalMinistries = ministries.length;
					document.getElementById('totalMinistries').textContent = totalMinistries;
				})
				.catch(error => console.error('Error fetching ministries:', error));

					// Fetch frameworks for the selected project
			fetch(`/Dashboard/GetFrameworksByProject?projectCode=${projectCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for frameworks by project");
					return response.json();
				})
				.then(frameworks => {
					frameworks.forEach(framework => {
						const option = document.createElement('option');
						option.value = framework.code;
						option.textContent = framework.name;
						frameworkDropdown.appendChild(option);
					});
					const totalFrameworks = frameworks.length;
					document.getElementById('totalFrameworks').textContent = totalFrameworks;
				})
				.catch(error => console.error('Error fetching frameworks:', error));

				fetch(`/Dashboard/GetGovernoratesByProject?projectCode=${projectCode}`)
				.then(res => res.json())
				.then(governorates => {
					governorates.forEach(gov => {
						const opt = document.createElement('option');
						opt.value = gov.code;
						opt.textContent = gov.name;
						governorateDropdown.appendChild(opt);
					});
					document.getElementById('totalGovernorates').textContent = governorates.length;
					$('#governorateFilter').trigger('change.select2');
				})
				.catch(console.error);

				document.getElementById('totalProjects').textContent = 1;
		} 
		else {
			document.getElementById('totalGovernorates').textContent = 0;
		}

		
	});

	// Add or modify this part within your existing JavaScript block

	// Event listener for the governorate filter
	$('#governorateFilter').on('change', function () {
		// 1. Get the selected governorate codes
		const selectedGovCodes = $(this).val() || [];
		const governorateCode = selectedGovCodes.join(',');

		// 2. Load gauges based on the new filters
		const filters = getFilters();
		loadGauges(
			filters.frameworkCode,
			filters.ministryCode,
			filters.projectCode,
			governorateCode
		);

		// 3. Clear existing project options
		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option disabled selected>-- @Localizer["Select Project"]  --</option>';
		document.getElementById('totalProjects').textContent = 0; // Reset project count

		// 4. If any governorates are selected, fetch projects for them
		if (governorateCode) {
			fetch(`/Dashboard/GetProjectsByGovernorate?governorateCode=${governorateCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for projects by governorate");
					return response.json();
				})
				.then(projects => {
					projects.forEach(project => {
						const option = document.createElement('option');
						option.value = project.id;
						option.textContent = project.name;
						projectDropdown.appendChild(option);
					});
					// Update the total projects count
					const totalProjects = projects.length;
					document.getElementById('totalProjects').textContent = totalProjects;
				})
				.catch(error => console.error('Error fetching projects:', error));
		}

		// Existing logic for districts and other filters will follow...
		// The rest of the original $('#governorateFilter').on('change', function () { ... });
		// block should remain, as it handles the cascading of geographical filters.
			// Inside your existing `$('#governorateFilter').on('change', function () { ... });` block

	// ... [Existing code for updating gauges and projects] ...

	// New section to update the Ministries dropdown
	const ministryDropdown = document.getElementById('ministryFilter');
	ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';

	if (governorateCode) {
		fetch(`/Dashboard/GetMinistriesByGovernorates?governorateCodes=${governorateCode}`)
			.then(response => {
				if (!response.ok) throw new Error("Network response was not ok for ministries by governorate");
				return response.json();
			})
			.then(ministries => {
				ministries.forEach(ministry => {
					const option = document.createElement('option');
					option.value = ministry.id;
					option.textContent = ministry.name;
					ministryDropdown.appendChild(option);
				});
				// Update the total ministries count
				const totalMinistries = ministries.length;
				document.getElementById('totalMinistries').textContent = totalMinistries;
			})
			.catch(error => console.error('Error fetching ministries:', error));
	} else {
		// If no governorates are selected, reset the ministry count
		document.getElementById('totalMinistries').textContent = 0;
	}

	// ... [The rest of your existing code for districts and sub-districts] ...
		// Add this to your existing `$('#governorateFilter').on('change', function () { ... });` block,
	// along with the code for updating projects and ministries.

	// New section to update the Frameworks dropdown
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';

		if (governorateCode) {
			fetch(`/Dashboard/GetFrameworksByGovernorates?governorateCodes=${governorateCode}`)
				.then(response => {
					if (!response.ok) throw new Error("Network response was not ok for frameworks by governorate");
					return response.json();
				})
				.then(frameworks => {
					frameworks.forEach(framework => {
						const option = document.createElement('option');
						option.value = framework.code;
						option.textContent = framework.name;
						frameworkDropdown.appendChild(option);
					});
					// Update the total frameworks count
					const totalFrameworks = frameworks.length;
					document.getElementById('totalFrameworks').textContent = totalFrameworks;
				})
				.catch(error => console.error('Error fetching frameworks:', error));
		} else {
			// If no governorates are selected, reset the framework count
			document.getElementById('totalFrameworks').textContent = 0;
		}

	  // 3. if nothing selected, clear downstream filters
	  if (!selectedGovCodes.length) {
		resetDropdown('districtFilter');
		resetDropdown('subDistrictFilter');
		resetDropdown('communityFilter');
		$('#districtCount').text('@Localizer["Total Districts"]: 0');
		return;
	  }

	  // 4. dedupe your codes
	  const uniqueGovCodes = Array.from(new Set(selectedGovCodes));

	  // 5. fetch districts for ALL selected governorates
	  fetch(
		`/Dashboard/GetDistrictsByGovernorates?governorateCodes=${uniqueGovCodes.join(',')}`
	  )
		.then((resp) => resp.json())
		.then((districts) => {
		  // 6. repopulate the district dropdown, preserving any already‐picked districts
		  populateDropdown('districtFilter', districts, /*preserveSelection=*/ true);

		  // 7. update UI pieces
		  $('#districtCount').text(`@Localizer["Total Districts"]: ${districts.length}`);
		  $('#districtFilter').prop('disabled', districts.length === 0);
		})
		.catch((err) => console.error(err));
	});

	$('#districtFilter').on('change', function () {
	  // 1. Re-load your gauges with the new district context
	  const filters = getFilters();
	  loadGauges(
		filters.frameworkCode,
		filters.ministryCode,
		filters.projectCode,
		filters.governorateCode,
		filters.districtCode
	  );

	  // 2. Grab & dedupe the selected district codes
	  const selectedDistCodes = Array.from(new Set($(this).val() || []));

	  // 3. If none selected, clear downstream & exit
	  if (!selectedDistCodes.length) {
		resetDropdown('subDistrictFilter');
		resetDropdown('communityFilter');
		$('#subDistrictCount').text('@Localizer["Total SubDistrict"] : 0');
		$('#subDistrictFilter').prop('disabled', true);
		return;
	  }

	  // 4. Fetch all sub-districts for the chosen district(s)
	  fetch(
		`/Dashboard/GetSubDistrictsByDistrict?districtCodes=${selectedDistCodes.join(',')}`
	  )
		.then(r => r.json())
		.then(subDistricts => {
		  // 5. Repopulate, preserving any multi-select picks
		  populateDropdown(
			'subDistrictFilter',
			subDistricts,
			/* preserveSelection = */ true
		  );

		  // 6. Update count & disable state
		  $('#subDistrictCount').text(`@Localizer["Total SubDistrict"]: ${subDistricts.length}`);
		  $('#subDistrictFilter').prop('disabled', !subDistricts.length);
		})
		.catch(console.error);
	});

	$('#subDistrictFilter').on('change', function () {
			const filters = getFilters();
		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode);

	   const selectedsubDistCodes = $(this).val() || [];

		resetDropdown('communityFilter');
		document.getElementById('communityCount').innerText = 'Total Communities: 0';
		fetch(`/Dashboard/GetCommunitiesBySubDistrict?subDistrictCodes=${selectedsubDistCodes}`)
			.then((r) => r.json())
			.then((list) => {
				populateDropdown('communityFilter', list);
				document.getElementById('communityCount').innerText = `@Localizer["Total Communities"] : ${list.length}`;
			})
			.catch((e) => console.error(e));
		});

	$('#communityFilter').on('change', function () {
		debugger;
		const filters = getFilters();
		const selectedCommunityCodes = $(this).val() || [];
		const communityCodeString = selectedCommunityCodes.join(',');

		loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, communityCodeString);

		// Clear and reset the Framework, Ministry, and Project dropdowns
		const frameworkDropdown = document.getElementById('frameworkFilter');
		frameworkDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Framework"] --</option>';
		document.getElementById('totalFrameworks').textContent = 0;

		const ministryDropdown = document.getElementById('ministryFilter');
		ministryDropdown.innerHTML = '<option disabled selected value="">-- @Localizer["Select Ministry"] --</option>';
		document.getElementById('totalMinistries').textContent = 0;

		const projectDropdown = document.getElementById('projectFilter');
		projectDropdown.innerHTML = '<option value="">@Localizer["Select Project"]</option>';
		document.getElementById('totalProjects').textContent = 0;

		if (communityCodeString) {
			// Fetch Frameworks for the selected communities
			fetch(`/Dashboard/GetFrameworksByCommunities?communityCodes=${communityCodeString}`)
				.then(r => r.json())
				.then(list => {
					list.forEach(item => {
						const opt = document.createElement('option');
						opt.value = item.code;
						opt.textContent = item.name;
						frameworkDropdown.appendChild(opt);
					});
					document.getElementById('totalFrameworks').textContent = list.length;
				})
				.catch(e => console.error(e));

			// Fetch Ministries for the selected communities
			fetch(`/Dashboard/GetMinistriesByCommunities?communityCodes=${communityCodeString}`)
				.then(r => r.json())
				.then(list => {
					list.forEach(item => {
						const opt = document.createElement('option');
						opt.value = item.id;
						opt.textContent = item.name;
						ministryDropdown.appendChild(opt);
					});
					document.getElementById('totalMinistries').textContent = list.length;
				})
				.catch(e => console.error(e));

			// Fetch Projects for the selected communities
			fetch(`/Dashboard/GetProjectsByCommunities?communityCodes=${communityCodeString}`)
				.then(r => r.json())
				.then(list => {
					list.forEach(item => {
						const opt = document.createElement('option');
						opt.value = item.id;
						opt.textContent = item.name;
						projectDropdown.appendChild(opt);
					});
					document.getElementById('totalProjects').textContent = list.length;
				})
				.catch(e => console.error(e));
		}
	});




	// document.getElementById('communityFilter').addEventListener('change', function () {
	// 	debugger;
	// 	const filters = getFilters();
	// 	loadGauges(filters.frameworkCode, filters.ministryCode, filters.projectCode, filters.governorateCode, filters.districtCode, filters.subDistrictCode, filters.communityCode);
	// });
	document.getElementById('clearFiltersBtn').addEventListener('click', function () {
		location.reload();
	});
	// Helpers
	function resetDropdown(id) {
		const dd = document.getElementById(id);
		dd.innerHTML = `<option disabled selected value="">-- Select --</option>`;
		dd.disabled = true;
	}

	function populateDropdown(id, items) {
		const dd = document.getElementById(id);
		items.forEach(i => {
			const opt = document.createElement('option');
			opt.value = i.code;
			opt.textContent = i.aR_Name;
			dd.appendChild(opt);
		});
		dd.disabled = false;
	}

		function getFilters() {
		return {
			frameworkCode: document.getElementById('frameworkFilter').value,
			ministryCode: document.getElementById('ministryFilter').value,
			projectCode: document.getElementById('projectFilter').value,
			governorateCode: $('#governorateFilter').val() ? $('#governorateFilter').val().join(',') : '',
			districtCode: $('#districtFilter').val() ? $('#districtFilter').val().join(',') : '',
			subDistrictCode: $('#subDistrictFilter').val() ? $('#subDistrictFilter').val().join(',') : '',
			communityCode: $('#communityFilter').val() ? $('#communityFilter').val().join(',') : ''
		};
	}


</script>
